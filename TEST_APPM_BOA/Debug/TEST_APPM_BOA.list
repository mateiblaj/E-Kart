
TEST_APPM_BOA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000370c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b0  080038b0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b8  080038b8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080038c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000040  080038fc  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080038fc  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7a1  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194c  00000000  00000000  0002b80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016454  00000000  00000000  0002e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5eb  00000000  00000000  00044a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ebb  00000000  00000000  0004ffff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2eba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d7c  00000000  00000000  000e2f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003888 	.word	0x08003888

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	08003888 	.word	0x08003888

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__gedf2>:
 8000970:	f04f 3cff 	mov.w	ip, #4294967295
 8000974:	e006      	b.n	8000984 <__cmpdf2+0x4>
 8000976:	bf00      	nop

08000978 <__ledf2>:
 8000978:	f04f 0c01 	mov.w	ip, #1
 800097c:	e002      	b.n	8000984 <__cmpdf2+0x4>
 800097e:	bf00      	nop

08000980 <__cmpdf2>:
 8000980:	f04f 0c01 	mov.w	ip, #1
 8000984:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	bf18      	it	ne
 8000996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099a:	d01b      	beq.n	80009d4 <__cmpdf2+0x54>
 800099c:	b001      	add	sp, #4
 800099e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a2:	bf0c      	ite	eq
 80009a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a8:	ea91 0f03 	teqne	r1, r3
 80009ac:	bf02      	ittt	eq
 80009ae:	ea90 0f02 	teqeq	r0, r2
 80009b2:	2000      	moveq	r0, #0
 80009b4:	4770      	bxeq	lr
 80009b6:	f110 0f00 	cmn.w	r0, #0
 80009ba:	ea91 0f03 	teq	r1, r3
 80009be:	bf58      	it	pl
 80009c0:	4299      	cmppl	r1, r3
 80009c2:	bf08      	it	eq
 80009c4:	4290      	cmpeq	r0, r2
 80009c6:	bf2c      	ite	cs
 80009c8:	17d8      	asrcs	r0, r3, #31
 80009ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ce:	f040 0001 	orr.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	d102      	bne.n	80009e4 <__cmpdf2+0x64>
 80009de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e2:	d107      	bne.n	80009f4 <__cmpdf2+0x74>
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d1d6      	bne.n	800099c <__cmpdf2+0x1c>
 80009ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f2:	d0d3      	beq.n	800099c <__cmpdf2+0x1c>
 80009f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_cdrcmple>:
 80009fc:	4684      	mov	ip, r0
 80009fe:	4610      	mov	r0, r2
 8000a00:	4662      	mov	r2, ip
 8000a02:	468c      	mov	ip, r1
 8000a04:	4619      	mov	r1, r3
 8000a06:	4663      	mov	r3, ip
 8000a08:	e000      	b.n	8000a0c <__aeabi_cdcmpeq>
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdcmpeq>:
 8000a0c:	b501      	push	{r0, lr}
 8000a0e:	f7ff ffb7 	bl	8000980 <__cmpdf2>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	bf48      	it	mi
 8000a16:	f110 0f00 	cmnmi.w	r0, #0
 8000a1a:	bd01      	pop	{r0, pc}

08000a1c <__aeabi_dcmpeq>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff fff4 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a24:	bf0c      	ite	eq
 8000a26:	2001      	moveq	r0, #1
 8000a28:	2000      	movne	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmplt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffea 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmple>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffe0 	bl	8000a0c <__aeabi_cdcmpeq>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpge>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffce 	bl	80009fc <__aeabi_cdrcmple>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpgt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffc4 	bl	80009fc <__aeabi_cdrcmple>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295
 8000a94:	f000 b96e 	b.w	8000d74 <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	9d08      	ldr	r5, [sp, #32]
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	468c      	mov	ip, r1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 8083 	bne.w	8000bc6 <__udivmoddi4+0x116>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d947      	bls.n	8000b56 <__udivmoddi4+0xa6>
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	b142      	cbz	r2, 8000ade <__udivmoddi4+0x2e>
 8000acc:	f1c2 0020 	rsb	r0, r2, #32
 8000ad0:	fa24 f000 	lsr.w	r0, r4, r0
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4097      	lsls	r7, r2
 8000ad8:	ea40 0c01 	orr.w	ip, r0, r1
 8000adc:	4094      	lsls	r4, r2
 8000ade:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ae2:	0c23      	lsrs	r3, r4, #16
 8000ae4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ae8:	fa1f fe87 	uxth.w	lr, r7
 8000aec:	fb08 c116 	mls	r1, r8, r6, ip
 8000af0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af4:	fb06 f10e 	mul.w	r1, r6, lr
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x60>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 8119 	bcs.w	8000d38 <__udivmoddi4+0x288>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 8116 	bls.w	8000d38 <__udivmoddi4+0x288>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	443b      	add	r3, r7
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x8c>
 8000b28:	193c      	adds	r4, r7, r4
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	f080 8105 	bcs.w	8000d3c <__udivmoddi4+0x28c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f240 8102 	bls.w	8000d3c <__udivmoddi4+0x28c>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b40:	eba4 040e 	sub.w	r4, r4, lr
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa0>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	b902      	cbnz	r2, 8000b5a <__udivmoddi4+0xaa>
 8000b58:	deff      	udf	#255	; 0xff
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	2a00      	cmp	r2, #0
 8000b60:	d150      	bne.n	8000c04 <__udivmoddi4+0x154>
 8000b62:	1bcb      	subs	r3, r1, r7
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	fa1f f887 	uxth.w	r8, r7
 8000b6c:	2601      	movs	r6, #1
 8000b6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b72:	0c21      	lsrs	r1, r4, #16
 8000b74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d907      	bls.n	8000b94 <__udivmoddi4+0xe4>
 8000b84:	1879      	adds	r1, r7, r1
 8000b86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0xe2>
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	f200 80e9 	bhi.w	8000d64 <__udivmoddi4+0x2b4>
 8000b92:	4684      	mov	ip, r0
 8000b94:	1ac9      	subs	r1, r1, r3
 8000b96:	b2a3      	uxth	r3, r4
 8000b98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ba0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ba4:	fb08 f800 	mul.w	r8, r8, r0
 8000ba8:	45a0      	cmp	r8, r4
 8000baa:	d907      	bls.n	8000bbc <__udivmoddi4+0x10c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x10a>
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	f200 80d9 	bhi.w	8000d6c <__udivmoddi4+0x2bc>
 8000bba:	4618      	mov	r0, r3
 8000bbc:	eba4 0408 	sub.w	r4, r4, r8
 8000bc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bc4:	e7bf      	b.n	8000b46 <__udivmoddi4+0x96>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0x12e>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80b1 	beq.w	8000d32 <__udivmoddi4+0x282>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x1cc>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0x140>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80b8 	bhi.w	8000d60 <__udivmoddi4+0x2b0>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	468c      	mov	ip, r1
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0a8      	beq.n	8000b50 <__udivmoddi4+0xa0>
 8000bfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c02:	e7a5      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c04:	f1c2 0320 	rsb	r3, r2, #32
 8000c08:	fa20 f603 	lsr.w	r6, r0, r3
 8000c0c:	4097      	lsls	r7, r2
 8000c0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c16:	40d9      	lsrs	r1, r3
 8000c18:	4330      	orrs	r0, r6
 8000c1a:	0c03      	lsrs	r3, r0, #16
 8000c1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c20:	fa1f f887 	uxth.w	r8, r7
 8000c24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f108 	mul.w	r1, r6, r8
 8000c30:	4299      	cmp	r1, r3
 8000c32:	fa04 f402 	lsl.w	r4, r4, r2
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x19c>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c3e:	f080 808d 	bcs.w	8000d5c <__udivmoddi4+0x2ac>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 808a 	bls.w	8000d5c <__udivmoddi4+0x2ac>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b281      	uxth	r1, r0
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5c:	fb00 f308 	mul.w	r3, r0, r8
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d907      	bls.n	8000c74 <__udivmoddi4+0x1c4>
 8000c64:	1879      	adds	r1, r7, r1
 8000c66:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c6a:	d273      	bcs.n	8000d54 <__udivmoddi4+0x2a4>
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d971      	bls.n	8000d54 <__udivmoddi4+0x2a4>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4439      	add	r1, r7
 8000c74:	1acb      	subs	r3, r1, r3
 8000c76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c7a:	e778      	b.n	8000b6e <__udivmoddi4+0xbe>
 8000c7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000c80:	fa03 f406 	lsl.w	r4, r3, r6
 8000c84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c88:	431c      	orrs	r4, r3
 8000c8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c9a:	431f      	orrs	r7, r3
 8000c9c:	0c3b      	lsrs	r3, r7, #16
 8000c9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ca2:	fa1f f884 	uxth.w	r8, r4
 8000ca6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000caa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cae:	fb09 fa08 	mul.w	sl, r9, r8
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	fa02 f206 	lsl.w	r2, r2, r6
 8000cb8:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x220>
 8000cbe:	1861      	adds	r1, r4, r1
 8000cc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc4:	d248      	bcs.n	8000d58 <__udivmoddi4+0x2a8>
 8000cc6:	458a      	cmp	sl, r1
 8000cc8:	d946      	bls.n	8000d58 <__udivmoddi4+0x2a8>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4421      	add	r1, r4
 8000cd0:	eba1 010a 	sub.w	r1, r1, sl
 8000cd4:	b2bf      	uxth	r7, r7
 8000cd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ce2:	fb00 f808 	mul.w	r8, r0, r8
 8000ce6:	45b8      	cmp	r8, r7
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x24a>
 8000cea:	19e7      	adds	r7, r4, r7
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d22e      	bcs.n	8000d50 <__udivmoddi4+0x2a0>
 8000cf2:	45b8      	cmp	r8, r7
 8000cf4:	d92c      	bls.n	8000d50 <__udivmoddi4+0x2a0>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4427      	add	r7, r4
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	eba7 0708 	sub.w	r7, r7, r8
 8000d02:	fba0 8902 	umull	r8, r9, r0, r2
 8000d06:	454f      	cmp	r7, r9
 8000d08:	46c6      	mov	lr, r8
 8000d0a:	4649      	mov	r1, r9
 8000d0c:	d31a      	bcc.n	8000d44 <__udivmoddi4+0x294>
 8000d0e:	d017      	beq.n	8000d40 <__udivmoddi4+0x290>
 8000d10:	b15d      	cbz	r5, 8000d2a <__udivmoddi4+0x27a>
 8000d12:	ebb3 020e 	subs.w	r2, r3, lr
 8000d16:	eb67 0701 	sbc.w	r7, r7, r1
 8000d1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d1e:	40f2      	lsrs	r2, r6
 8000d20:	ea4c 0202 	orr.w	r2, ip, r2
 8000d24:	40f7      	lsrs	r7, r6
 8000d26:	e9c5 2700 	strd	r2, r7, [r5]
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	462e      	mov	r6, r5
 8000d34:	4628      	mov	r0, r5
 8000d36:	e70b      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	e6e9      	b.n	8000b10 <__udivmoddi4+0x60>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	e6fd      	b.n	8000b3c <__udivmoddi4+0x8c>
 8000d40:	4543      	cmp	r3, r8
 8000d42:	d2e5      	bcs.n	8000d10 <__udivmoddi4+0x260>
 8000d44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d48:	eb69 0104 	sbc.w	r1, r9, r4
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	e7df      	b.n	8000d10 <__udivmoddi4+0x260>
 8000d50:	4608      	mov	r0, r1
 8000d52:	e7d2      	b.n	8000cfa <__udivmoddi4+0x24a>
 8000d54:	4660      	mov	r0, ip
 8000d56:	e78d      	b.n	8000c74 <__udivmoddi4+0x1c4>
 8000d58:	4681      	mov	r9, r0
 8000d5a:	e7b9      	b.n	8000cd0 <__udivmoddi4+0x220>
 8000d5c:	4666      	mov	r6, ip
 8000d5e:	e775      	b.n	8000c4c <__udivmoddi4+0x19c>
 8000d60:	4630      	mov	r0, r6
 8000d62:	e74a      	b.n	8000bfa <__udivmoddi4+0x14a>
 8000d64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d68:	4439      	add	r1, r7
 8000d6a:	e713      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	443c      	add	r4, r7
 8000d70:	e724      	b.n	8000bbc <__udivmoddi4+0x10c>
 8000d72:	bf00      	nop

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <APPM_BOA2_step>:
static RT_MODEL_APPM_BOA2_T APPM_BOA2_M_;
RT_MODEL_APPM_BOA2_T *const APPM_BOA2_M = &APPM_BOA2_M_;

/* Model step function */
void APPM_BOA2_step(void)
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/APP_R'
   *  Inport: '<Root>/Acc_switch'
   *  RelationalOperator: '<S5>/Compare'
   *  RelationalOperator: '<S9>/Compare'
   */
  rtb_LogicalOperator1 = (APPM_BOA2_U.APP_R > APPM_BOA2_P.Constant_Value) ^
 8000d7e:	4b9e      	ldr	r3, [pc, #632]	; (8000ff8 <APPM_BOA2_step+0x280>)
 8000d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d84:	4b9d      	ldr	r3, [pc, #628]	; (8000ffc <APPM_BOA2_step+0x284>)
 8000d86:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000d8a:	2401      	movs	r4, #1
 8000d8c:	f7ff fe6e 	bl	8000a6c <__aeabi_dcmpgt>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <APPM_BOA2_step+0x22>
 8000d96:	2300      	movs	r3, #0
 8000d98:	461c      	mov	r4, r3
 8000d9a:	b2e3      	uxtb	r3, r4
 8000d9c:	b25c      	sxtb	r4, r3
    (APPM_BOA2_U.Acc_switch == APPM_BOA2_P.CompareToConstant_const);
 8000d9e:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <APPM_BOA2_step+0x280>)
 8000da0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000da4:	4b95      	ldr	r3, [pc, #596]	; (8000ffc <APPM_BOA2_step+0x284>)
 8000da6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000daa:	2501      	movs	r5, #1
 8000dac:	f7ff fe36 	bl	8000a1c <__aeabi_dcmpeq>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <APPM_BOA2_step+0x42>
 8000db6:	2300      	movs	r3, #0
 8000db8:	461d      	mov	r5, r3
 8000dba:	b2eb      	uxtb	r3, r5
 8000dbc:	b25b      	sxtb	r3, r3
  rtb_LogicalOperator1 = (APPM_BOA2_U.APP_R > APPM_BOA2_P.Constant_Value) ^
 8000dbe:	4063      	eors	r3, r4
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	70fb      	strb	r3, [r7, #3]

  /* Chart: '<S1>/100ms debounce' */
  APPM_BOA2_DW.chartAbsoluteTimeCounter_nk++;
 8000dc4:	4b8e      	ldr	r3, [pc, #568]	; (8001000 <APPM_BOA2_step+0x288>)
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a8d      	ldr	r2, [pc, #564]	; (8001000 <APPM_BOA2_step+0x288>)
 8000dcc:	61d3      	str	r3, [r2, #28]
  condIsTrue = !rtb_LogicalOperator1;
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	70bb      	strb	r3, [r7, #2]
  if ((!condIsTrue) || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_e)) {
 8000ddc:	78bb      	ldrb	r3, [r7, #2]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <APPM_BOA2_step+0x74>
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <APPM_BOA2_step+0x288>)
 8000de4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d103      	bne.n	8000df4 <APPM_BOA2_step+0x7c>
    APPM_BOA2_DW.durationLastReferenceTick_1_m =
      APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000dec:	4b84      	ldr	r3, [pc, #528]	; (8001000 <APPM_BOA2_step+0x288>)
 8000dee:	69db      	ldr	r3, [r3, #28]
    APPM_BOA2_DW.durationLastReferenceTick_1_m =
 8000df0:	4a83      	ldr	r2, [pc, #524]	; (8001000 <APPM_BOA2_step+0x288>)
 8000df2:	6213      	str	r3, [r2, #32]
  }

  APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_e = condIsTrue;
 8000df4:	4a82      	ldr	r2, [pc, #520]	; (8001000 <APPM_BOA2_step+0x288>)
 8000df6:	78bb      	ldrb	r3, [r7, #2]
 8000df8:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
  if ((!rtb_LogicalOperator1) || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_n))
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d004      	beq.n	8000e0c <APPM_BOA2_step+0x94>
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d103      	bne.n	8000e14 <APPM_BOA2_step+0x9c>
  {
    APPM_BOA2_DW.durationLastReferenceTick_1_k =
      APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000e0c:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
    APPM_BOA2_DW.durationLastReferenceTick_1_k =
 8000e10:	4a7b      	ldr	r2, [pc, #492]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e12:	6253      	str	r3, [r2, #36]	; 0x24
  }

  APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_n = rtb_LogicalOperator1;
 8000e14:	4a7a      	ldr	r2, [pc, #488]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  if (APPM_BOA2_DW.is_active_c1_APPM_BOA2 == 0U) {
 8000e1c:	4b78      	ldr	r3, [pc, #480]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d115      	bne.n	8000e52 <APPM_BOA2_step+0xda>
    APPM_BOA2_DW.chartAbsoluteTimeCounter_nk = 0;
 8000e26:	4b76      	ldr	r3, [pc, #472]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
    APPM_BOA2_DW.is_active_c1_APPM_BOA2 = 1U;
 8000e2c:	4b74      	ldr	r3, [pc, #464]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    APPM_BOA2_DW.durationLastReferenceTick_1_k =
      APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000e34:	4b72      	ldr	r3, [pc, #456]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e36:	69db      	ldr	r3, [r3, #28]
    APPM_BOA2_DW.durationLastReferenceTick_1_k =
 8000e38:	4a71      	ldr	r2, [pc, #452]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e3a:	6253      	str	r3, [r2, #36]	; 0x24
    APPM_BOA2_DW.is_c1_APPM_BOA2 = APPM_BOA2_IN_off;
 8000e3c:	4b70      	ldr	r3, [pc, #448]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    rtb_cut_pwr_h = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
    APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_n = rtb_LogicalOperator1;
 8000e48:	4a6d      	ldr	r2, [pc, #436]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8000e50:	e05f      	b.n	8000f12 <APPM_BOA2_step+0x19a>
  } else if (APPM_BOA2_DW.is_c1_APPM_BOA2 == APPM_BOA2_IN_off) {
 8000e52:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d12a      	bne.n	8000eb2 <APPM_BOA2_step+0x13a>
    if ((!rtb_LogicalOperator1) || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_n))
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <APPM_BOA2_step+0xf4>
 8000e62:	4b67      	ldr	r3, [pc, #412]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e64:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <APPM_BOA2_step+0xfc>
    {
      APPM_BOA2_DW.durationLastReferenceTick_1_k =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000e6c:	4b64      	ldr	r3, [pc, #400]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
      APPM_BOA2_DW.durationLastReferenceTick_1_k =
 8000e70:	4a63      	ldr	r2, [pc, #396]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e72:	6253      	str	r3, [r2, #36]	; 0x24
    }

    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_nk -
 8000e74:	4b62      	ldr	r3, [pc, #392]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e76:	69da      	ldr	r2, [r3, #28]
        APPM_BOA2_DW.durationLastReferenceTick_1_k > 10) {
 8000e78:	4b61      	ldr	r3, [pc, #388]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_nk -
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b0a      	cmp	r3, #10
 8000e80:	dd14      	ble.n	8000eac <APPM_BOA2_step+0x134>
      APPM_BOA2_DW.durationLastReferenceTick_1_m =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e84:	69db      	ldr	r3, [r3, #28]
      APPM_BOA2_DW.durationLastReferenceTick_1_m =
 8000e86:	4a5e      	ldr	r2, [pc, #376]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e88:	6213      	str	r3, [r2, #32]
      APPM_BOA2_DW.is_c1_APPM_BOA2 = APPM_BOA2_IN_on;
 8000e8a:	4b5d      	ldr	r3, [pc, #372]	; (8001000 <APPM_BOA2_step+0x288>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      rtb_cut_pwr_h = 1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
      APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_e = !rtb_LogicalOperator1;
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf0c      	ite	eq
 8000e9c:	2301      	moveq	r3, #1
 8000e9e:	2300      	movne	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ea6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000eaa:	e032      	b.n	8000f12 <APPM_BOA2_step+0x19a>
    } else {
      rtb_cut_pwr_h = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	e02f      	b.n	8000f12 <APPM_BOA2_step+0x19a>
    }
  } else {
    /* case IN_on: */
    condIsTrue = !rtb_LogicalOperator1;
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	70bb      	strb	r3, [r7, #2]
    if ((!condIsTrue) || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_e)) {
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d004      	beq.n	8000ed0 <APPM_BOA2_step+0x158>
 8000ec6:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ec8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <APPM_BOA2_step+0x160>
      APPM_BOA2_DW.durationLastReferenceTick_1_m =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000ed0:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
      APPM_BOA2_DW.durationLastReferenceTick_1_m =
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ed6:	6213      	str	r3, [r2, #32]
    }

    APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_e = condIsTrue;
 8000ed8:	4a49      	ldr	r2, [pc, #292]	; (8001000 <APPM_BOA2_step+0x288>)
 8000eda:	78bb      	ldrb	r3, [r7, #2]
 8000edc:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_nk -
 8000ee0:	4b47      	ldr	r3, [pc, #284]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
        APPM_BOA2_DW.durationLastReferenceTick_1_m > 500) {
 8000ee4:	4b46      	ldr	r3, [pc, #280]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_nk -
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eee:	dd0e      	ble.n	8000f0e <APPM_BOA2_step+0x196>
      APPM_BOA2_DW.durationLastReferenceTick_1_k =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_nk;
 8000ef0:	4b43      	ldr	r3, [pc, #268]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
      APPM_BOA2_DW.durationLastReferenceTick_1_k =
 8000ef4:	4a42      	ldr	r2, [pc, #264]	; (8001000 <APPM_BOA2_step+0x288>)
 8000ef6:	6253      	str	r3, [r2, #36]	; 0x24
      APPM_BOA2_DW.is_c1_APPM_BOA2 = APPM_BOA2_IN_off;
 8000ef8:	4b41      	ldr	r3, [pc, #260]	; (8001000 <APPM_BOA2_step+0x288>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      rtb_cut_pwr_h = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
      APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_n = rtb_LogicalOperator1;
 8000f04:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8000f0c:	e001      	b.n	8000f12 <APPM_BOA2_step+0x19a>
    } else {
      rtb_cut_pwr_h = 1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
   *
   * Block description for '<S11>/UD':
   *
   *  Store in Global RAM
   */
  APPM_BOA2_DW.chartAbsoluteTimeCounter++;
 8000f12:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a39      	ldr	r2, [pc, #228]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f1a:	6093      	str	r3, [r2, #8]
  condIsTrue = (APPM_BOA2_U.Acc_switch == 0.0);
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <APPM_BOA2_step+0x280>)
 8000f1e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f22:	2301      	movs	r3, #1
 8000f24:	461c      	mov	r4, r3
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	f7ff fd75 	bl	8000a1c <__aeabi_dcmpeq>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <APPM_BOA2_step+0x1c4>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	b2e3      	uxtb	r3, r4
 8000f3e:	70bb      	strb	r3, [r7, #2]
  if ((!condIsTrue) || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1)) {
 8000f40:	78bb      	ldrb	r3, [r7, #2]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <APPM_BOA2_step+0x1d8>
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f48:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <APPM_BOA2_step+0x1e0>
    APPM_BOA2_DW.durationLastReferenceTick_1 =
      APPM_BOA2_DW.chartAbsoluteTimeCounter;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f52:	689b      	ldr	r3, [r3, #8]
    APPM_BOA2_DW.durationLastReferenceTick_1 =
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f56:	60d3      	str	r3, [r2, #12]
  }

  APPM_BOA2_DW.condWasTrueAtLastTimeStep_1 = condIsTrue;
 8000f58:	4a29      	ldr	r2, [pc, #164]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f5a:	78bb      	ldrb	r3, [r7, #2]
 8000f5c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  if (APPM_BOA2_DW.is_active_c2_APPM_BOA2 == 0U) {
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10d      	bne.n	8000f86 <APPM_BOA2_step+0x20e>
    APPM_BOA2_DW.chartAbsoluteTimeCounter = 0;
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
    APPM_BOA2_DW.is_active_c2_APPM_BOA2 = 1U;
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    APPM_BOA2_DW.is_c2_APPM_BOA2 = APPM_BOA2_IN_Gradient_OK;
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    rtb_cut_pwr = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e07f      	b.n	8001086 <APPM_BOA2_step+0x30e>
  } else if (APPM_BOA2_DW.is_c2_APPM_BOA2 == APPM_BOA2_IN_Gradient_NOK) {
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <APPM_BOA2_step+0x288>)
 8000f88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d139      	bne.n	8001004 <APPM_BOA2_step+0x28c>
    condIsTrue = (APPM_BOA2_U.Acc_switch == 0.0);
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <APPM_BOA2_step+0x280>)
 8000f92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f96:	2301      	movs	r3, #1
 8000f98:	461c      	mov	r4, r3
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	f7ff fd3b 	bl	8000a1c <__aeabi_dcmpeq>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <APPM_BOA2_step+0x238>
 8000fac:	2300      	movs	r3, #0
 8000fae:	461c      	mov	r4, r3
 8000fb0:	b2e3      	uxtb	r3, r4
 8000fb2:	70bb      	strb	r3, [r7, #2]
    if ((!condIsTrue) || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1)) {
 8000fb4:	78bb      	ldrb	r3, [r7, #2]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <APPM_BOA2_step+0x24c>
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fbc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <APPM_BOA2_step+0x254>
      APPM_BOA2_DW.durationLastReferenceTick_1 =
        APPM_BOA2_DW.chartAbsoluteTimeCounter;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
      APPM_BOA2_DW.durationLastReferenceTick_1 =
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fca:	60d3      	str	r3, [r2, #12]
    }

    APPM_BOA2_DW.condWasTrueAtLastTimeStep_1 = condIsTrue;
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fce:	78bb      	ldrb	r3, [r7, #2]
 8000fd0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter -
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
        APPM_BOA2_DW.durationLastReferenceTick_1 > 300) {
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fda:	68db      	ldr	r3, [r3, #12]
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter -
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fe2:	dd06      	ble.n	8000ff2 <APPM_BOA2_step+0x27a>
      APPM_BOA2_DW.is_c2_APPM_BOA2 = APPM_BOA2_IN_Gradient_OK;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <APPM_BOA2_step+0x288>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      rtb_cut_pwr = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	e049      	b.n	8001086 <APPM_BOA2_step+0x30e>
    } else {
      rtb_cut_pwr = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e046      	b.n	8001086 <APPM_BOA2_step+0x30e>
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000068 	.word	0x20000068
    }

    /* case IN_Gradient_OK: */
  } else if ((APPM_BOA2_U.APP_R - APPM_BOA2_DW.UD_DSTATE >
 8001004:	4b8a      	ldr	r3, [pc, #552]	; (8001230 <APPM_BOA2_step+0x4b8>)
 8001006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100a:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff f8e4 	bl	80001dc <__aeabi_dsub>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
              APPM_BOA2_P.CompareToConstant_const_j) && (APPM_BOA2_U.Acc_switch ==
 800101c:	4b86      	ldr	r3, [pc, #536]	; (8001238 <APPM_BOA2_step+0x4c0>)
 800101e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  } else if ((APPM_BOA2_U.APP_R - APPM_BOA2_DW.UD_DSTATE >
 8001022:	f7ff fd23 	bl	8000a6c <__aeabi_dcmpgt>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d02a      	beq.n	8001082 <APPM_BOA2_step+0x30a>
              APPM_BOA2_P.CompareToConstant_const_j) && (APPM_BOA2_U.Acc_switch ==
 800102c:	4b80      	ldr	r3, [pc, #512]	; (8001230 <APPM_BOA2_step+0x4b8>)
 800102e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b81      	ldr	r3, [pc, #516]	; (800123c <APPM_BOA2_step+0x4c4>)
 8001038:	f7ff fcf0 	bl	8000a1c <__aeabi_dcmpeq>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d01f      	beq.n	8001082 <APPM_BOA2_step+0x30a>
              1.0)) {
    APPM_BOA2_DW.durationLastReferenceTick_1 =
      APPM_BOA2_DW.chartAbsoluteTimeCounter;
 8001042:	4b7c      	ldr	r3, [pc, #496]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001044:	689b      	ldr	r3, [r3, #8]
    APPM_BOA2_DW.durationLastReferenceTick_1 =
 8001046:	4a7b      	ldr	r2, [pc, #492]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001048:	60d3      	str	r3, [r2, #12]
    APPM_BOA2_DW.is_c2_APPM_BOA2 = APPM_BOA2_IN_Gradient_NOK;
 800104a:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    rtb_cut_pwr = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
    APPM_BOA2_DW.condWasTrueAtLastTimeStep_1 = (APPM_BOA2_U.Acc_switch == 0.0);
 8001056:	4b76      	ldr	r3, [pc, #472]	; (8001230 <APPM_BOA2_step+0x4b8>)
 8001058:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	461c      	mov	r4, r3
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f7ff fcd8 	bl	8000a1c <__aeabi_dcmpeq>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <APPM_BOA2_step+0x2fe>
 8001072:	2300      	movs	r3, #0
 8001074:	461c      	mov	r4, r3
 8001076:	b2e3      	uxtb	r3, r4
 8001078:	461a      	mov	r2, r3
 800107a:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800107c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001080:	e001      	b.n	8001086 <APPM_BOA2_step+0x30e>
  } else {
    rtb_cut_pwr = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
   *  Inport: '<Root>/Acc_switch'
   *  Inport: '<Root>/Brake_switch'
   *  RelationalOperator: '<S6>/Compare'
   *  RelationalOperator: '<S7>/Compare'
   */
  rtb_LogicalOperator1 = ((APPM_BOA2_U.Acc_switch ==
 8001086:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <APPM_BOA2_step+0x4b8>)
 8001088:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    APPM_BOA2_P.CompareToConstant1_const) && (APPM_BOA2_U.Brake_switch ==
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <APPM_BOA2_step+0x4c0>)
 800108e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001092:	f7ff fcc3 	bl	8000a1c <__aeabi_dcmpeq>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00c      	beq.n	80010b6 <APPM_BOA2_step+0x33e>
 800109c:	4b64      	ldr	r3, [pc, #400]	; (8001230 <APPM_BOA2_step+0x4b8>)
 800109e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    APPM_BOA2_P.CompareToConstant2_const));
 80010a2:	4b65      	ldr	r3, [pc, #404]	; (8001238 <APPM_BOA2_step+0x4c0>)
 80010a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    APPM_BOA2_P.CompareToConstant1_const) && (APPM_BOA2_U.Brake_switch ==
 80010a8:	f7ff fcb8 	bl	8000a1c <__aeabi_dcmpeq>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <APPM_BOA2_step+0x33e>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <APPM_BOA2_step+0x340>
 80010b6:	2300      	movs	r3, #0
  rtb_LogicalOperator1 = ((APPM_BOA2_U.Acc_switch ==
 80010b8:	70fb      	strb	r3, [r7, #3]

  /* Chart: '<S1>/1sec debounce' */
  APPM_BOA2_DW.chartAbsoluteTimeCounter_n++;
 80010ba:	4b5e      	ldr	r3, [pc, #376]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a5c      	ldr	r2, [pc, #368]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80010c2:	6113      	str	r3, [r2, #16]
  condIsTrue = !rtb_LogicalOperator1;
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf0c      	ite	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	2300      	movne	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	70bb      	strb	r3, [r7, #2]
  tmp = !condIsTrue;
 80010d2:	78bb      	ldrb	r3, [r7, #2]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	707b      	strb	r3, [r7, #1]
  if (tmp || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_k)) {
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d104      	bne.n	80010f0 <APPM_BOA2_step+0x378>
 80010e6:	4b53      	ldr	r3, [pc, #332]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80010e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <APPM_BOA2_step+0x380>
    APPM_BOA2_DW.durationLastReferenceTick_1_p =
      APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 80010f0:	4b50      	ldr	r3, [pc, #320]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80010f2:	691b      	ldr	r3, [r3, #16]
    APPM_BOA2_DW.durationLastReferenceTick_1_p =
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80010f6:	6153      	str	r3, [r2, #20]
  }

  APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_k = condIsTrue;
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  if (condIsTrue || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_h)) {
 8001100:	78bb      	ldrb	r3, [r7, #2]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d104      	bne.n	8001110 <APPM_BOA2_step+0x398>
 8001106:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <APPM_BOA2_step+0x3a0>
    APPM_BOA2_DW.durationLastReferenceTick_1_i =
      APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001112:	691b      	ldr	r3, [r3, #16]
    APPM_BOA2_DW.durationLastReferenceTick_1_i =
 8001114:	4a47      	ldr	r2, [pc, #284]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001116:	6193      	str	r3, [r2, #24]
  }

  APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_h = rtb_LogicalOperator1;
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  if (APPM_BOA2_DW.is_active_c3_APPM_BOA2 == 0U) {
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001122:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001126:	2b00      	cmp	r3, #0
 8001128:	d115      	bne.n	8001156 <APPM_BOA2_step+0x3de>
    APPM_BOA2_DW.chartAbsoluteTimeCounter_n = 0;
 800112a:	4b42      	ldr	r3, [pc, #264]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
    APPM_BOA2_DW.is_active_c3_APPM_BOA2 = 1U;
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001132:	2201      	movs	r2, #1
 8001134:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    APPM_BOA2_DW.durationLastReferenceTick_1_i =
      APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800113a:	691b      	ldr	r3, [r3, #16]
    APPM_BOA2_DW.durationLastReferenceTick_1_i =
 800113c:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800113e:	6193      	str	r3, [r2, #24]
    APPM_BOA2_DW.is_c3_APPM_BOA2 = APPM_BOA2_IN_off;
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001142:	2201      	movs	r2, #1
 8001144:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    rtb_cut_pwr_i = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
    APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_h = rtb_LogicalOperator1;
 800114c:	4a39      	ldr	r2, [pc, #228]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 8001154:	e052      	b.n	80011fc <APPM_BOA2_step+0x484>
  } else if (APPM_BOA2_DW.is_c3_APPM_BOA2 == APPM_BOA2_IN_off) {
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001158:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800115c:	2b01      	cmp	r3, #1
 800115e:	d124      	bne.n	80011aa <APPM_BOA2_step+0x432>
    if (condIsTrue || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_h)) {
 8001160:	78bb      	ldrb	r3, [r7, #2]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <APPM_BOA2_step+0x3f8>
 8001166:	4b33      	ldr	r3, [pc, #204]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001168:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <APPM_BOA2_step+0x400>
      APPM_BOA2_DW.durationLastReferenceTick_1_i =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001172:	691b      	ldr	r3, [r3, #16]
      APPM_BOA2_DW.durationLastReferenceTick_1_i =
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001176:	6193      	str	r3, [r2, #24]
    }

    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_n -
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800117a:	691a      	ldr	r2, [r3, #16]
        APPM_BOA2_DW.durationLastReferenceTick_1_i > 100) {
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800117e:	699b      	ldr	r3, [r3, #24]
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_n -
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	dd0e      	ble.n	80011a4 <APPM_BOA2_step+0x42c>
      APPM_BOA2_DW.durationLastReferenceTick_1_p =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001188:	691b      	ldr	r3, [r3, #16]
      APPM_BOA2_DW.durationLastReferenceTick_1_p =
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800118c:	6153      	str	r3, [r2, #20]
      APPM_BOA2_DW.is_c3_APPM_BOA2 = APPM_BOA2_IN_on;
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001190:	2202      	movs	r2, #2
 8001192:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
      rtb_cut_pwr_i = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
      APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_k = condIsTrue;
 800119a:	4a26      	ldr	r2, [pc, #152]	; (8001234 <APPM_BOA2_step+0x4bc>)
 800119c:	78bb      	ldrb	r3, [r7, #2]
 800119e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
 80011a2:	e02b      	b.n	80011fc <APPM_BOA2_step+0x484>
    } else {
      rtb_cut_pwr_i = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	e028      	b.n	80011fc <APPM_BOA2_step+0x484>
    }
  } else {
    /* case IN_on: */
    if (tmp || (!APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_k)) {
 80011aa:	787b      	ldrb	r3, [r7, #1]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d104      	bne.n	80011ba <APPM_BOA2_step+0x442>
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <APPM_BOA2_step+0x44a>
      APPM_BOA2_DW.durationLastReferenceTick_1_p =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011bc:	691b      	ldr	r3, [r3, #16]
      APPM_BOA2_DW.durationLastReferenceTick_1_p =
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011c0:	6153      	str	r3, [r2, #20]
    }

    APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_k = condIsTrue;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011c4:	78bb      	ldrb	r3, [r7, #2]
 80011c6:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_n -
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011cc:	691a      	ldr	r2, [r3, #16]
        APPM_BOA2_DW.durationLastReferenceTick_1_p > 500) {
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011d0:	695b      	ldr	r3, [r3, #20]
    if (APPM_BOA2_DW.chartAbsoluteTimeCounter_n -
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011d8:	dd0e      	ble.n	80011f8 <APPM_BOA2_step+0x480>
      APPM_BOA2_DW.durationLastReferenceTick_1_i =
        APPM_BOA2_DW.chartAbsoluteTimeCounter_n;
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011dc:	691b      	ldr	r3, [r3, #16]
      APPM_BOA2_DW.durationLastReferenceTick_1_i =
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011e0:	6193      	str	r3, [r2, #24]
      APPM_BOA2_DW.is_c3_APPM_BOA2 = APPM_BOA2_IN_off;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
      rtb_cut_pwr_i = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
      APPM_BOA2_DW.condWasTrueAtLastTimeStep_1_h = rtb_LogicalOperator1;
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <APPM_BOA2_step+0x4bc>)
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 80011f6:	e001      	b.n	80011fc <APPM_BOA2_step+0x484>
    } else {
      rtb_cut_pwr_i = 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  /* End of Chart: '<S1>/1sec debounce' */

  /* Outport: '<Root>/CUT_PWR' incorporates:
   *  Logic: '<S1>/Logical Operator'
   */
  APPM_BOA2_Y.CUT_PWR = ((rtb_cut_pwr_h != 0) || (rtb_cut_pwr != 0) ||
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <APPM_BOA2_step+0x496>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d102      	bne.n	800120e <APPM_BOA2_step+0x496>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <APPM_BOA2_step+0x49a>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <APPM_BOA2_step+0x49c>
 8001212:	2300      	movs	r3, #0
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <APPM_BOA2_step+0x4c8>)
 8001218:	701a      	strb	r2, [r3, #0]
   *
   * Block description for '<S11>/UD':
   *
   *  Store in Global RAM
   */
  APPM_BOA2_DW.UD_DSTATE = APPM_BOA2_U.APP_R;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <APPM_BOA2_step+0x4b8>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <APPM_BOA2_step+0x4bc>)
 8001222:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}
 800122e:	bf00      	nop
 8001230:	200000a0 	.word	0x200000a0
 8001234:	20000068 	.word	0x20000068
 8001238:	20000000 	.word	0x20000000
 800123c:	3ff00000 	.word	0x3ff00000
 8001240:	20000060 	.word	0x20000060

08001244 <APPM_BOA2_initialize>:

/* Model initialize function */
void APPM_BOA2_initialize(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
   *
   * Block description for '<S11>/UD':
   *
   *  Store in Global RAM
   */
  APPM_BOA2_DW.UD_DSTATE = APPM_BOA2_P.Difference_ICPrevInput;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <APPM_BOA2_initialize+0x1c>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	4905      	ldr	r1, [pc, #20]	; (8001264 <APPM_BOA2_initialize+0x20>)
 8001250:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000
 8001264:	20000068 	.word	0x20000068

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fb72 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f816 	bl	80012a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 f96c 	bl	8001550 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001278:	f000 f87c 	bl	8001374 <MX_ADC1_Init>
  MX_TIM2_Init();
 800127c:	f000 f8cc 	bl	8001418 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001280:	f000 f918 	bl	80014b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <main+0x30>)
 8001286:	f001 fedd 	bl	8003044 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800128a:	4804      	ldr	r0, [pc, #16]	; (800129c <main+0x34>)
 800128c:	f001 feda 	bl	8003044 <HAL_TIM_Base_Start_IT>
  APPM_BOA2_initialize();
 8001290:	f7ff ffd8 	bl	8001244 <APPM_BOA2_initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001294:	e7fe      	b.n	8001294 <main+0x2c>
 8001296:	bf00      	nop
 8001298:	20000150 	.word	0x20000150
 800129c:	200000bc 	.word	0x200000bc

080012a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	2230      	movs	r2, #48	; 0x30
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fae2 	bl	8003878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	4b28      	ldr	r3, [pc, #160]	; (800136c <SystemClock_Config+0xcc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a27      	ldr	r2, [pc, #156]	; (800136c <SystemClock_Config+0xcc>)
 80012ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <SystemClock_Config+0xcc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <SystemClock_Config+0xd0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012ec:	4a20      	ldr	r2, [pc, #128]	; (8001370 <SystemClock_Config+0xd0>)
 80012ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <SystemClock_Config+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001318:	2354      	movs	r3, #84	; 0x54
 800131a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f9fb 	bl	8002724 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001334:	f000 f9f0 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2102      	movs	r1, #2
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fc5d 	bl	8002c14 <HAL_RCC_ClockConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001360:	f000 f9da 	bl	8001718 <Error_Handler>
  }
}
 8001364:	bf00      	nop
 8001366:	3750      	adds	r7, #80	; 0x50
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_ADC1_Init+0x98>)
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <MX_ADC1_Init+0x9c>)
 800138a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_ADC1_Init+0x98>)
 800138e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001392:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_ADC1_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_ADC1_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_ADC1_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_ADC1_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <MX_ADC1_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_ADC1_Init+0x98>)
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <MX_ADC1_Init+0xa0>)
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_ADC1_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_ADC1_Init+0x98>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_ADC1_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_ADC1_Init+0x98>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_ADC1_Init+0x98>)
 80013d6:	f000 fb2f 	bl	8001a38 <HAL_ADC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013e0:	f000 f99a 	bl	8001718 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_ADC1_Init+0x98>)
 80013f6:	f000 fcaf 	bl	8001d58 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001400:	f000 f98a 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000108 	.word	0x20000108
 8001410:	40012000 	.word	0x40012000
 8001414:	0f000001 	.word	0x0f000001

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM2_Init+0x98>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM2_Init+0x98>)
 800143e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM2_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM2_Init+0x98>)
 800144c:	f44f 7252 	mov.w	r2, #840	; 0x348
 8001450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_TIM2_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM2_Init+0x98>)
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_TIM2_Init+0x98>)
 8001460:	f001 fda0 	bl	8002fa4 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800146a:	f000 f955 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM2_Init+0x98>)
 800147c:	f001 ff4c 	bl	8003318 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001486:	f000 f947 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM2_Init+0x98>)
 8001498:	f002 f948 	bl	800372c <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014a2:	f000 f939 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000150 	.word	0x20000150

080014b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <MX_TIM3_Init+0x94>)
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <MX_TIM3_Init+0x98>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <MX_TIM3_Init+0x94>)
 80014d8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80014dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_TIM3_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_TIM3_Init+0x94>)
 80014e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <MX_TIM3_Init+0x94>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_TIM3_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <MX_TIM3_Init+0x94>)
 80014fa:	f001 fd53 	bl	8002fa4 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001504:	f000 f908 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800150e:	f107 0308 	add.w	r3, r7, #8
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <MX_TIM3_Init+0x94>)
 8001516:	f001 feff 	bl	8003318 <HAL_TIM_ConfigClockSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001520:	f000 f8fa 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_TIM3_Init+0x94>)
 8001532:	f002 f8fb 	bl	800372c <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800153c:	f000 f8ec 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000bc 	.word	0x200000bc
 800154c:	40000400 	.word	0x40000400

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MX_GPIO_Init+0xc8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <MX_GPIO_Init+0xc8>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <MX_GPIO_Init+0xc8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b24      	ldr	r3, [pc, #144]	; (8001618 <MX_GPIO_Init+0xc8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_GPIO_Init+0xc8>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <MX_GPIO_Init+0xc8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_GPIO_Init+0xc8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <MX_GPIO_Init+0xc8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_GPIO_Init+0xc8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2120      	movs	r1, #32
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <MX_GPIO_Init+0xcc>)
 80015c0:	f001 f896 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c4:	2304      	movs	r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	4812      	ldr	r0, [pc, #72]	; (8001620 <MX_GPIO_Init+0xd0>)
 80015d8:	f000 feee 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015dc:	2308      	movs	r3, #8
 80015de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e4:	2302      	movs	r3, #2
 80015e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_GPIO_Init+0xd0>)
 80015f0:	f000 fee2 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015f4:	2320      	movs	r3, #32
 80015f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0xcc>)
 800160c:	f000 fed4 	bl	80023b8 <HAL_GPIO_Init>

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020800 	.word	0x40020800

08001624 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d159      	bne.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0xc4>
		HAL_ADC_Start(&hadc1);
 8001634:	482f      	ldr	r0, [pc, #188]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001636:	f000 fa43 	bl	8001ac0 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1,5);
 800163a:	2105      	movs	r1, #5
 800163c:	482d      	ldr	r0, [pc, #180]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800163e:	f000 faf3 	bl	8001c28 <HAL_ADC_PollForConversion>
	    APPM_BOA2_U.APP_R = HAL_ADC_GetValue(&hadc1);
 8001642:	482c      	ldr	r0, [pc, #176]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001644:	f000 fb7b 	bl	8001d3e <HAL_ADC_GetValue>
 8001648:	4603      	mov	r3, r0
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff04 	bl	8000458 <__aeabi_ui2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4928      	ldr	r1, [pc, #160]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
	    APPM_BOA2_U.APP_R /= 4096;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800165c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001666:	f7ff f89b 	bl	80007a0 <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4922      	ldr	r1, [pc, #136]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
		APPM_BOA2_U.Acc_switch=HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_3);
 8001674:	2108      	movs	r1, #8
 8001676:	4822      	ldr	r0, [pc, #136]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001678:	f001 f822 	bl	80026c0 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe feea 	bl	8000458 <__aeabi_ui2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	491b      	ldr	r1, [pc, #108]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800168a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		APPM_BOA2_U.Brake_switch=HAL_GPIO_ReadPin (GPIOC, GPIO_PIN_2);
 800168e:	2104      	movs	r1, #4
 8001690:	481b      	ldr	r0, [pc, #108]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001692:	f001 f815 	bl	80026c0 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fedd 	bl	8000458 <__aeabi_ui2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4915      	ldr	r1, [pc, #84]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80016a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016b2:	601a      	str	r2, [r3, #0]

		APPM_BOA2_step();
 80016b4:	f7ff fb60 	bl	8000d78 <APPM_BOA2_step>

		tim_val_1_step = __HAL_TIM_GET_COUNTER(&htim3) - tim_val;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80016c8:	601a      	str	r2, [r3, #0]
		if(APPM_BOA2_Y.CUT_PWR==1)
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0xba>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2120      	movs	r1, #32
 80016d6:	480f      	ldr	r0, [pc, #60]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80016d8:	f001 f80a 	bl	80026f0 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
}
 80016dc:	e004      	b.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0xc4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2120      	movs	r1, #32
 80016e2:	480c      	ldr	r0, [pc, #48]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80016e4:	f001 f804 	bl	80026f0 <HAL_GPIO_WritePin>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000150 	.word	0x20000150
 80016f4:	20000108 	.word	0x20000108
 80016f8:	200000a0 	.word	0x200000a0
 80016fc:	40b00000 	.word	0x40b00000
 8001700:	40020800 	.word	0x40020800
 8001704:	200000bc 	.word	0x200000bc
 8001708:	20000104 	.word	0x20000104
 800170c:	200000b8 	.word	0x200000b8
 8001710:	20000060 	.word	0x20000060
 8001714:	40020000 	.word	0x40020000

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_MspInit+0x4c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_MspInit+0x4c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_ADC_MspInit+0x7c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d127      	bne.n	80017e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_ADC_MspInit+0x80>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <HAL_ADC_MspInit+0x80>)
 80017a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_ADC_MspInit+0x80>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_ADC_MspInit+0x80>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_ADC_MspInit+0x80>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_ADC_MspInit+0x80>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ce:	2301      	movs	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_ADC_MspInit+0x84>)
 80017e2:	f000 fde9 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d116      	bne.n	800183c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_TIM_Base_MspInit+0x70>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_TIM_Base_MspInit+0x70>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_TIM_Base_MspInit+0x70>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	201c      	movs	r0, #28
 8001830:	f000 fd8b 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001834:	201c      	movs	r0, #28
 8001836:	f000 fda4 	bl	8002382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800183a:	e012      	b.n	8001862 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_TIM_Base_MspInit+0x74>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10d      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_TIM_Base_MspInit+0x70>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0x70>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_TIM_Base_MspInit+0x70>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40000400 	.word	0x40000400

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f89a 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM2_IRQHandler+0x10>)
 80018ce:	f001 fc1b 	bl	8003108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000150 	.word	0x20000150

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800192a:	f7ff ffd7 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f001 ff7f 	bl	8003830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff fc99 	bl	8001268 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001938:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001944:	080038c0 	.word	0x080038c0
  ldr r2, =_sbss
 8001948:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800194c:	2000019c 	.word	0x2000019c

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 fcd9 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fecc 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fcf1 	bl	800239e <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 fcb9 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000030 	.word	0x20000030
 80019f0:	20000038 	.word	0x20000038
 80019f4:	20000034 	.word	0x20000034

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000038 	.word	0x20000038
 8001a1c:	20000198 	.word	0x20000198

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000198 	.word	0x20000198

08001a38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e033      	b.n	8001ab6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fe8c 	bl	8001774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a7e:	f023 0302 	bic.w	r3, r3, #2
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa86 	bl	8001f9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Start+0x1a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e097      	b.n	8001c0a <HAL_ADC_Start+0x14a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d018      	beq.n	8001b22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <HAL_ADC_Start+0x158>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a45      	ldr	r2, [pc, #276]	; (8001c1c <HAL_ADC_Start+0x15c>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9a      	lsrs	r2, r3, #18
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d15f      	bne.n	8001bf0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6e:	d106      	bne.n	8001b7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	f023 0206 	bic.w	r2, r3, #6
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b7c:	e002      	b.n	8001b84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_ADC_Start+0x160>)
 8001b8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d129      	bne.n	8001c08 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e020      	b.n	8001c08 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_ADC_Start+0x164>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d11b      	bne.n	8001c08 <HAL_ADC_Start+0x148>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d114      	bne.n	8001c08 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	e00b      	b.n	8001c08 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000030 	.word	0x20000030
 8001c1c:	431bde83 	.word	0x431bde83
 8001c20:	40012300 	.word	0x40012300
 8001c24:	40012000 	.word	0x40012000

08001c28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c44:	d113      	bne.n	8001c6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c54:	d10b      	bne.n	8001c6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f043 0220 	orr.w	r2, r3, #32
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e063      	b.n	8001d36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c6e:	f7ff fed7 	bl	8001a20 <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c74:	e021      	b.n	8001cba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d01d      	beq.n	8001cba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_ADC_PollForConversion+0x6c>
 8001c84:	f7ff fecc 	bl	8001a20 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d212      	bcs.n	8001cba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d00b      	beq.n	8001cba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f043 0204 	orr.w	r2, r3, #4
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e03d      	b.n	8001d36 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d1d6      	bne.n	8001c76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0212 	mvn.w	r2, #18
 8001cd0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d123      	bne.n	8001d34 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11f      	bne.n	8001d34 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d111      	bne.n	8001d34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1c>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e105      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x228>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	d925      	bls.n	8001dd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68d9      	ldr	r1, [r3, #12]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	3b1e      	subs	r3, #30
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43da      	mvns	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	400a      	ands	r2, r1
 8001da8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68d9      	ldr	r1, [r3, #12]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4403      	add	r3, r0
 8001dc2:	3b1e      	subs	r3, #30
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	e022      	b.n	8001e16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6919      	ldr	r1, [r3, #16]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	2207      	movs	r2, #7
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43da      	mvns	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	400a      	ands	r2, r1
 8001df2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6919      	ldr	r1, [r3, #16]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4403      	add	r3, r0
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d824      	bhi.n	8001e68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b05      	subs	r3, #5
 8001e30:	221f      	movs	r2, #31
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	3b05      	subs	r3, #5
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
 8001e66:	e04c      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d824      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b23      	subs	r3, #35	; 0x23
 8001e82:	221f      	movs	r2, #31
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	400a      	ands	r2, r1
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b23      	subs	r3, #35	; 0x23
 8001eac:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb8:	e023      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b41      	subs	r3, #65	; 0x41
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b41      	subs	r3, #65	; 0x41
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f02:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_ADC_ConfigChannel+0x234>)
 8001f04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_ADC_ConfigChannel+0x238>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d109      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1cc>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b12      	cmp	r3, #18
 8001f16:	d105      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_ADC_ConfigChannel+0x238>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d123      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x21e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d003      	beq.n	8001f3e <HAL_ADC_ConfigChannel+0x1e6>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b11      	cmp	r3, #17
 8001f3c:	d11b      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d111      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_ADC_ConfigChannel+0x23c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_ADC_ConfigChannel+0x240>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9a      	lsrs	r2, r3, #18
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f9      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	40012300 	.word	0x40012300
 8001f90:	40012000 	.word	0x40012000
 8001f94:	20000030 	.word	0x20000030
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa4:	4b79      	ldr	r3, [pc, #484]	; (800218c <ADC_Init+0x1f0>)
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	021a      	lsls	r2, r3, #8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <ADC_Init+0x1f4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d022      	beq.n	800207a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002042:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e00f      	b.n	800209a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0202 	bic.w	r2, r2, #2
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7e1b      	ldrb	r3, [r3, #24]
 80020b4:	005a      	lsls	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01b      	beq.n	8002100 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	3b01      	subs	r3, #1
 80020f4:	035a      	lsls	r2, r3, #13
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	e007      	b.n	8002110 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	3b01      	subs	r3, #1
 800212c:	051a      	lsls	r2, r3, #20
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002152:	025a      	lsls	r2, r3, #9
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	029a      	lsls	r2, r3, #10
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40012300 	.word	0x40012300
 8002190:	0f000001 	.word	0x0f000001

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e159      	b.n	8002688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8148 	bne.w	8002682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d005      	beq.n	800240a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002406:	2b02      	cmp	r3, #2
 8002408:	d130      	bne.n	800246c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a2 	beq.w	8002682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_GPIO_Init+0x2f0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x202>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_GPIO_Init+0x2f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x1fe>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_GPIO_Init+0x2f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x1fa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x1f6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x1f2>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_GPIO_Init+0x304>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x304>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x304>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f aea2 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e264      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d075      	beq.n	800282e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002742:	4ba3      	ldr	r3, [pc, #652]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d00c      	beq.n	8002768 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002756:	2b08      	cmp	r3, #8
 8002758:	d112      	bne.n	8002780 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b9d      	ldr	r3, [pc, #628]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002766:	d10b      	bne.n	8002780 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	4b99      	ldr	r3, [pc, #612]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d05b      	beq.n	800282c <HAL_RCC_OscConfig+0x108>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d157      	bne.n	800282c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e23f      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x74>
 800278a:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a90      	ldr	r2, [pc, #576]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e01d      	b.n	80027d4 <HAL_RCC_OscConfig+0xb0>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x98>
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a87      	ldr	r2, [pc, #540]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0xb0>
 80027bc:	4b84      	ldr	r3, [pc, #528]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a83      	ldr	r2, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b81      	ldr	r3, [pc, #516]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a80      	ldr	r2, [pc, #512]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff f920 	bl	8001a20 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7ff f91c 	bl	8001a20 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	; 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e204      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0xc0>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff f90c 	bl	8001a20 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff f908 	bl	8001a20 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1f0      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281e:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0xe8>
 800282a:	e000      	b.n	800282e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d063      	beq.n	8002902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00b      	beq.n	800285e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002846:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284e:	2b08      	cmp	r3, #8
 8002850:	d11c      	bne.n	800288c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b5f      	ldr	r3, [pc, #380]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d116      	bne.n	800288c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	4b5c      	ldr	r3, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_RCC_OscConfig+0x152>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e1c4      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4952      	ldr	r1, [pc, #328]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288a:	e03a      	b.n	8002902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <HAL_RCC_OscConfig+0x2b0>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff f8c1 	bl	8001a20 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a2:	f7ff f8bd 	bl	8001a20 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1a5      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4940      	ldr	r1, [pc, #256]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
 80028d4:	e015      	b.n	8002902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <HAL_RCC_OscConfig+0x2b0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7ff f8a0 	bl	8001a20 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7ff f89c 	bl	8001a20 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e184      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d030      	beq.n	8002970 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_RCC_OscConfig+0x2b4>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff f880 	bl	8001a20 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff f87c 	bl	8001a20 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e164      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x200>
 8002942:	e015      	b.n	8002970 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RCC_OscConfig+0x2b4>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff f869 	bl	8001a20 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002952:	f7ff f865 	bl	8001a20 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e14d      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a0 	beq.w	8002abe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x2b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_RCC_OscConfig+0x2b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <HAL_RCC_OscConfig+0x2b8>)
 80029c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c6:	f7ff f82b 	bl	8001a20 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	e011      	b.n	80029f2 <HAL_RCC_OscConfig+0x2ce>
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	42470000 	.word	0x42470000
 80029d8:	42470e80 	.word	0x42470e80
 80029dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e0:	f7ff f81e 	bl	8001a20 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e106      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b85      	ldr	r3, [pc, #532]	; (8002c08 <HAL_RCC_OscConfig+0x4e4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
 8002a06:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a80      	ldr	r2, [pc, #512]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x32a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x312>
 8002a1c:	4b7b      	ldr	r3, [pc, #492]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a7a      	ldr	r2, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
 8002a28:	4b78      	ldr	r3, [pc, #480]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	4a77      	ldr	r2, [pc, #476]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6713      	str	r3, [r2, #112]	; 0x70
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x32a>
 8002a36:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a74      	ldr	r2, [pc, #464]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a71      	ldr	r2, [pc, #452]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe ffe3 	bl	8001a20 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe ffdf 	bl	8001a20 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0c5      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x33a>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe ffcd 	bl	8001a20 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe ffc9 	bl	8001a20 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0af      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 809b 	beq.w	8002bfe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d05c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d141      	bne.n	8002b60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCC_OscConfig+0x4ec>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe ff9d 	bl	8001a20 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe ff99 	bl	8001a20 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e081      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afc:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	019b      	lsls	r3, r3, #6
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	4937      	ldr	r1, [pc, #220]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x4ec>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe ff72 	bl	8001a20 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe ff6e 	bl	8001a20 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e056      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x41c>
 8002b5e:	e04e      	b.n	8002bfe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_OscConfig+0x4ec>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe ff5b 	bl	8001a20 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe ff57 	bl	8001a20 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e03f      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x44a>
 8002b8c:	e037      	b.n	8002bfe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e032      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d028      	beq.n	8002bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d121      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d11a      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d111      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40007000 	.word	0x40007000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	42470060 	.word	0x42470060

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0cc      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b68      	ldr	r3, [pc, #416]	; (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d90c      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b65      	ldr	r3, [pc, #404]	; (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b8      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c68:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a58      	ldr	r2, [pc, #352]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a52      	ldr	r2, [pc, #328]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	494d      	ldr	r1, [pc, #308]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d044      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d119      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e07f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e06f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e067      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4934      	ldr	r1, [pc, #208]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fe8c 	bl	8001a20 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe fe88 	bl	8001a20 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e04f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d20c      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e032      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d9a:	f000 f821 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	490a      	ldr	r1, [pc, #40]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	5ccb      	ldrb	r3, [r1, r3]
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fdec 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023c00 	.word	0x40023c00
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	080038a0 	.word	0x080038a0
 8002dd8:	20000030 	.word	0x20000030
 8002ddc:	20000034 	.word	0x20000034

08002de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	2300      	movs	r3, #0
 8002df2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002df8:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x40>
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	f200 80bd 	bhi.w	8002f84 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x34>
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e12:	e0b7      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b61      	ldr	r3, [pc, #388]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e16:	60bb      	str	r3, [r7, #8]
       break;
 8002e18:	e0b7      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e1a:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e1c:	60bb      	str	r3, [r7, #8]
      break;
 8002e1e:	e0b4      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e20:	4b5d      	ldr	r3, [pc, #372]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04d      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	4b58      	ldr	r3, [pc, #352]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	ea02 0800 	and.w	r8, r2, r0
 8002e4e:	ea03 0901 	and.w	r9, r3, r1
 8002e52:	4640      	mov	r0, r8
 8002e54:	4649      	mov	r1, r9
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	014b      	lsls	r3, r1, #5
 8002e60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e64:	0142      	lsls	r2, r0, #5
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	ebb0 0008 	subs.w	r0, r0, r8
 8002e6e:	eb61 0109 	sbc.w	r1, r1, r9
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	018b      	lsls	r3, r1, #6
 8002e7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e80:	0182      	lsls	r2, r0, #6
 8002e82:	1a12      	subs	r2, r2, r0
 8002e84:	eb63 0301 	sbc.w	r3, r3, r1
 8002e88:	f04f 0000 	mov.w	r0, #0
 8002e8c:	f04f 0100 	mov.w	r1, #0
 8002e90:	00d9      	lsls	r1, r3, #3
 8002e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e96:	00d0      	lsls	r0, r2, #3
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	eb12 0208 	adds.w	r2, r2, r8
 8002ea0:	eb43 0309 	adc.w	r3, r3, r9
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	0259      	lsls	r1, r3, #9
 8002eae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eb2:	0250      	lsls	r0, r2, #9
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	f7fd fddc 	bl	8000a80 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e04a      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	ea02 0400 	and.w	r4, r2, r0
 8002eea:	ea03 0501 	and.w	r5, r3, r1
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	014b      	lsls	r3, r1, #5
 8002efc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f00:	0142      	lsls	r2, r0, #5
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	1b00      	subs	r0, r0, r4
 8002f08:	eb61 0105 	sbc.w	r1, r1, r5
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	018b      	lsls	r3, r1, #6
 8002f16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f1a:	0182      	lsls	r2, r0, #6
 8002f1c:	1a12      	subs	r2, r2, r0
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	00d9      	lsls	r1, r3, #3
 8002f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f30:	00d0      	lsls	r0, r2, #3
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	1912      	adds	r2, r2, r4
 8002f38:	eb45 0303 	adc.w	r3, r5, r3
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	0299      	lsls	r1, r3, #10
 8002f46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f4a:	0290      	lsls	r0, r2, #10
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	f7fd fd90 	bl	8000a80 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4613      	mov	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f68:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	3301      	adds	r3, #1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	60bb      	str	r3, [r7, #8]
      break;
 8002f82:	e002      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f86:	60bb      	str	r3, [r7, #8]
      break;
 8002f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	00f42400 	.word	0x00f42400
 8002fa0:	007a1200 	.word	0x007a1200

08002fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e041      	b.n	800303a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fc16 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 fa88 	bl	80034f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d001      	beq.n	800305c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e044      	b.n	80030e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1e      	ldr	r2, [pc, #120]	; (80030f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d018      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d013      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x6c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_TIM_Base_Start_IT+0xb8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x6c>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a17      	ldr	r2, [pc, #92]	; (8003100 <HAL_TIM_Base_Start_IT+0xbc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x6c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIM_Base_Start_IT+0xc0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d010      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	e007      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00
 8003104:	40014000 	.word	0x40014000

08003108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b02      	cmp	r3, #2
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b02      	cmp	r3, #2
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0202 	mvn.w	r2, #2
 8003134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f9b5 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f9a7 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f9b8 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b04      	cmp	r3, #4
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0204 	mvn.w	r2, #4
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2202      	movs	r2, #2
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f98b 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f97d 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f98e 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d122      	bne.n	800320c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d11b      	bne.n	800320c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0208 	mvn.w	r2, #8
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2204      	movs	r2, #4
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f961 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f953 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f964 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b10      	cmp	r3, #16
 8003218:	d122      	bne.n	8003260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b10      	cmp	r3, #16
 8003226:	d11b      	bne.n	8003260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0210 	mvn.w	r2, #16
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2208      	movs	r2, #8
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f937 	bl	80034ba <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f929 	bl	80034a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f93a 	bl	80034ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0201 	mvn.w	r2, #1
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fe f9cc 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a4:	2b80      	cmp	r3, #128	; 0x80
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fab2 	bl	800381c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8ff 	bl	80034e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d10e      	bne.n	8003310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d107      	bne.n	8003310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0220 	mvn.w	r2, #32
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa7c 	bl	8003808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIM_ConfigClockSource+0x1c>
 8003330:	2302      	movs	r3, #2
 8003332:	e0b4      	b.n	800349e <HAL_TIM_ConfigClockSource+0x186>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800335a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336c:	d03e      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xd4>
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	f200 8087 	bhi.w	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	f000 8086 	beq.w	800348a <HAL_TIM_ConfigClockSource+0x172>
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	d87f      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b70      	cmp	r3, #112	; 0x70
 8003386:	d01a      	beq.n	80033be <HAL_TIM_ConfigClockSource+0xa6>
 8003388:	2b70      	cmp	r3, #112	; 0x70
 800338a:	d87b      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b60      	cmp	r3, #96	; 0x60
 800338e:	d050      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x11a>
 8003390:	2b60      	cmp	r3, #96	; 0x60
 8003392:	d877      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b50      	cmp	r3, #80	; 0x50
 8003396:	d03c      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0xfa>
 8003398:	2b50      	cmp	r3, #80	; 0x50
 800339a:	d873      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d058      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x13a>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d86f      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b30      	cmp	r3, #48	; 0x30
 80033a6:	d064      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	2b30      	cmp	r3, #48	; 0x30
 80033aa:	d86b      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d060      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d867      	bhi.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d05c      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d05a      	beq.n	8003472 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	e062      	b.n	8003484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6899      	ldr	r1, [r3, #8]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f000 f98d 	bl	80036ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	609a      	str	r2, [r3, #8]
      break;
 80033ea:	e04f      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f000 f976 	bl	80036ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800340e:	609a      	str	r2, [r3, #8]
      break;
 8003410:	e03c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	461a      	mov	r2, r3
 8003420:	f000 f8ea 	bl	80035f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2150      	movs	r1, #80	; 0x50
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f943 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003430:	e02c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	f000 f909 	bl	8003656 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2160      	movs	r1, #96	; 0x60
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f933 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003450:	e01c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6859      	ldr	r1, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	461a      	mov	r2, r3
 8003460:	f000 f8ca 	bl	80035f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2140      	movs	r1, #64	; 0x40
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f923 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003470:	e00c      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 f91a 	bl	80036b6 <TIM_ITRx_SetConfig>
      break;
 8003482:	e003      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e000      	b.n	800348c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800348a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a34      	ldr	r2, [pc, #208]	; (80035dc <TIM_Base_SetConfig+0xe4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00f      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d00b      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <TIM_Base_SetConfig+0xe8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <TIM_Base_SetConfig+0xec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_Base_SetConfig+0x38>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <TIM_Base_SetConfig+0xf0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <TIM_Base_SetConfig+0xe4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01b      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d017      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <TIM_Base_SetConfig+0xe8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <TIM_Base_SetConfig+0xec>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00f      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <TIM_Base_SetConfig+0xf0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00b      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <TIM_Base_SetConfig+0xf4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <TIM_Base_SetConfig+0xf8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d003      	beq.n	8003582 <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <TIM_Base_SetConfig+0xfc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a08      	ldr	r2, [pc, #32]	; (80035dc <TIM_Base_SetConfig+0xe4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d103      	bne.n	80035c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	615a      	str	r2, [r3, #20]
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40000c00 	.word	0x40000c00
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 030a 	bic.w	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003656:	b480      	push	{r7}
 8003658:	b087      	sub	sp, #28
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0210 	bic.w	r2, r3, #16
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
 80036be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f043 0307 	orr.w	r3, r3, #7
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	021a      	lsls	r2, r3, #8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	431a      	orrs	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	609a      	str	r2, [r3, #8]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003740:	2302      	movs	r3, #2
 8003742:	e050      	b.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d018      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d013      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00e      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d009      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d004      	beq.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10c      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40014000 	.word	0x40014000

08003808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	4d0d      	ldr	r5, [pc, #52]	; (8003868 <__libc_init_array+0x38>)
 8003834:	4c0d      	ldr	r4, [pc, #52]	; (800386c <__libc_init_array+0x3c>)
 8003836:	1b64      	subs	r4, r4, r5
 8003838:	10a4      	asrs	r4, r4, #2
 800383a:	2600      	movs	r6, #0
 800383c:	42a6      	cmp	r6, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	4d0b      	ldr	r5, [pc, #44]	; (8003870 <__libc_init_array+0x40>)
 8003842:	4c0c      	ldr	r4, [pc, #48]	; (8003874 <__libc_init_array+0x44>)
 8003844:	f000 f820 	bl	8003888 <_init>
 8003848:	1b64      	subs	r4, r4, r5
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	2600      	movs	r6, #0
 800384e:	42a6      	cmp	r6, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	f855 3b04 	ldr.w	r3, [r5], #4
 8003858:	4798      	blx	r3
 800385a:	3601      	adds	r6, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003862:	4798      	blx	r3
 8003864:	3601      	adds	r6, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	080038b8 	.word	0x080038b8
 800386c:	080038b8 	.word	0x080038b8
 8003870:	080038b8 	.word	0x080038b8
 8003874:	080038bc 	.word	0x080038bc

08003878 <memset>:
 8003878:	4402      	add	r2, r0
 800387a:	4603      	mov	r3, r0
 800387c:	4293      	cmp	r3, r2
 800387e:	d100      	bne.n	8003882 <memset+0xa>
 8003880:	4770      	bx	lr
 8003882:	f803 1b01 	strb.w	r1, [r3], #1
 8003886:	e7f9      	b.n	800387c <memset+0x4>

08003888 <_init>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr

08003894 <_fini>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	bf00      	nop
 8003898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389a:	bc08      	pop	{r3}
 800389c:	469e      	mov	lr, r3
 800389e:	4770      	bx	lr

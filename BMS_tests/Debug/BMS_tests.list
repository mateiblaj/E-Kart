
BMS_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080067c0  080067c0  000167c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f8  080069f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a00  08006a00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000074  08006a7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08006a7c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f86  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001354  00000000  00000000  0002802a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000628  00000000  00000000  00029380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000590  00000000  00000000  000299a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015142  00000000  00000000  00029f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e3a  00000000  00000000  0003f07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085103  00000000  00000000  00046eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbfb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  000cc00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080067a4 	.word	0x080067a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	080067a4 	.word	0x080067a4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2uiz>:
 8000ac0:	004a      	lsls	r2, r1, #1
 8000ac2:	d211      	bcs.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d211      	bcs.n	8000aee <__aeabi_d2uiz+0x2e>
 8000aca:	d50d      	bpl.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d40e      	bmi.n	8000af4 <__aeabi_d2uiz+0x34>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_d2uiz+0x3a>
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b98c 	b.w	8000e30 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f824 	bl	8000b6c <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2ulz>:
 8000b30:	b5d0      	push	{r4, r6, r7, lr}
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__aeabi_d2ulz+0x34>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	4606      	mov	r6, r0
 8000b38:	460f      	mov	r7, r1
 8000b3a:	f7ff fd11 	bl	8000560 <__aeabi_dmul>
 8000b3e:	f7ff ffbf 	bl	8000ac0 <__aeabi_d2uiz>
 8000b42:	4604      	mov	r4, r0
 8000b44:	f7ff fc92 	bl	800046c <__aeabi_ui2d>
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <__aeabi_d2ulz+0x38>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f7ff fd08 	bl	8000560 <__aeabi_dmul>
 8000b50:	4602      	mov	r2, r0
 8000b52:	460b      	mov	r3, r1
 8000b54:	4630      	mov	r0, r6
 8000b56:	4639      	mov	r1, r7
 8000b58:	f7ff fb4a 	bl	80001f0 <__aeabi_dsub>
 8000b5c:	f7ff ffb0 	bl	8000ac0 <__aeabi_d2uiz>
 8000b60:	4621      	mov	r1, r4
 8000b62:	bdd0      	pop	{r4, r6, r7, pc}
 8000b64:	3df00000 	.word	0x3df00000
 8000b68:	41f00000 	.word	0x41f00000

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468c      	mov	ip, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8083 	bne.w	8000c82 <__udivmoddi4+0x116>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d947      	bls.n	8000c12 <__udivmoddi4+0xa6>
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	b142      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	f1c2 0020 	rsb	r0, r2, #32
 8000b8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b90:	4091      	lsls	r1, r2
 8000b92:	4097      	lsls	r7, r2
 8000b94:	ea40 0c01 	orr.w	ip, r0, r1
 8000b98:	4094      	lsls	r4, r2
 8000b9a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba4:	fa1f fe87 	uxth.w	lr, r7
 8000ba8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x60>
 8000bb8:	18fb      	adds	r3, r7, r3
 8000bba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bbe:	f080 8119 	bcs.w	8000df4 <__udivmoddi4+0x288>
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	f240 8116 	bls.w	8000df4 <__udivmoddi4+0x288>
 8000bc8:	3e02      	subs	r6, #2
 8000bca:	443b      	add	r3, r7
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	45a6      	cmp	lr, r4
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bea:	f080 8105 	bcs.w	8000df8 <__udivmoddi4+0x28c>
 8000bee:	45a6      	cmp	lr, r4
 8000bf0:	f240 8102 	bls.w	8000df8 <__udivmoddi4+0x28c>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	443c      	add	r4, r7
 8000bf8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfc:	eba4 040e 	sub.w	r4, r4, lr
 8000c00:	2600      	movs	r6, #0
 8000c02:	b11d      	cbz	r5, 8000c0c <__udivmoddi4+0xa0>
 8000c04:	40d4      	lsrs	r4, r2
 8000c06:	2300      	movs	r3, #0
 8000c08:	e9c5 4300 	strd	r4, r3, [r5]
 8000c0c:	4631      	mov	r1, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	b902      	cbnz	r2, 8000c16 <__udivmoddi4+0xaa>
 8000c14:	deff      	udf	#255	; 0xff
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d150      	bne.n	8000cc0 <__udivmoddi4+0x154>
 8000c1e:	1bcb      	subs	r3, r1, r7
 8000c20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c24:	fa1f f887 	uxth.w	r8, r7
 8000c28:	2601      	movs	r6, #1
 8000c2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c2e:	0c21      	lsrs	r1, r4, #16
 8000c30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb08 f30c 	mul.w	r3, r8, ip
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0xe4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0xe2>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	f200 80e9 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1ac9      	subs	r1, r1, r3
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x10c>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x10a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80d9 	bhi.w	8000e28 <__udivmoddi4+0x2bc>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e7bf      	b.n	8000c02 <__udivmoddi4+0x96>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x12e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80b1 	beq.w	8000dee <__udivmoddi4+0x282>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x1cc>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0x140>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80b8 	bhi.w	8000e1c <__udivmoddi4+0x2b0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0a8      	beq.n	8000c0c <__udivmoddi4+0xa0>
 8000cba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cc8:	4097      	lsls	r7, r2
 8000cca:	fa01 f002 	lsl.w	r0, r1, r2
 8000cce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd2:	40d9      	lsrs	r1, r3
 8000cd4:	4330      	orrs	r0, r6
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cdc:	fa1f f887 	uxth.w	r8, r7
 8000ce0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f108 	mul.w	r1, r6, r8
 8000cec:	4299      	cmp	r1, r3
 8000cee:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x19c>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfa:	f080 808d 	bcs.w	8000e18 <__udivmoddi4+0x2ac>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 808a 	bls.w	8000e18 <__udivmoddi4+0x2ac>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b281      	uxth	r1, r0
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb00 f308 	mul.w	r3, r0, r8
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x1c4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d26:	d273      	bcs.n	8000e10 <__udivmoddi4+0x2a4>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d971      	bls.n	8000e10 <__udivmoddi4+0x2a4>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	4439      	add	r1, r7
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d36:	e778      	b.n	8000c2a <__udivmoddi4+0xbe>
 8000d38:	f1c6 0c20 	rsb	ip, r6, #32
 8000d3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d44:	431c      	orrs	r4, r3
 8000d46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d56:	431f      	orrs	r7, r3
 8000d58:	0c3b      	lsrs	r3, r7, #16
 8000d5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5e:	fa1f f884 	uxth.w	r8, r4
 8000d62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d6e:	458a      	cmp	sl, r1
 8000d70:	fa02 f206 	lsl.w	r2, r2, r6
 8000d74:	fa00 f306 	lsl.w	r3, r0, r6
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x220>
 8000d7a:	1861      	adds	r1, r4, r1
 8000d7c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d80:	d248      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000d82:	458a      	cmp	sl, r1
 8000d84:	d946      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4421      	add	r1, r4
 8000d8c:	eba1 010a 	sub.w	r1, r1, sl
 8000d90:	b2bf      	uxth	r7, r7
 8000d92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d9e:	fb00 f808 	mul.w	r8, r0, r8
 8000da2:	45b8      	cmp	r8, r7
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x24a>
 8000da6:	19e7      	adds	r7, r4, r7
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d22e      	bcs.n	8000e0c <__udivmoddi4+0x2a0>
 8000dae:	45b8      	cmp	r8, r7
 8000db0:	d92c      	bls.n	8000e0c <__udivmoddi4+0x2a0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4427      	add	r7, r4
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	eba7 0708 	sub.w	r7, r7, r8
 8000dbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc2:	454f      	cmp	r7, r9
 8000dc4:	46c6      	mov	lr, r8
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	d31a      	bcc.n	8000e00 <__udivmoddi4+0x294>
 8000dca:	d017      	beq.n	8000dfc <__udivmoddi4+0x290>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x27a>
 8000dce:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dda:	40f2      	lsrs	r2, r6
 8000ddc:	ea4c 0202 	orr.w	r2, ip, r2
 8000de0:	40f7      	lsrs	r7, r6
 8000de2:	e9c5 2700 	strd	r2, r7, [r5]
 8000de6:	2600      	movs	r6, #0
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	462e      	mov	r6, r5
 8000df0:	4628      	mov	r0, r5
 8000df2:	e70b      	b.n	8000c0c <__udivmoddi4+0xa0>
 8000df4:	4606      	mov	r6, r0
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0x60>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6fd      	b.n	8000bf8 <__udivmoddi4+0x8c>
 8000dfc:	4543      	cmp	r3, r8
 8000dfe:	d2e5      	bcs.n	8000dcc <__udivmoddi4+0x260>
 8000e00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e04:	eb69 0104 	sbc.w	r1, r9, r4
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7df      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e7d2      	b.n	8000db6 <__udivmoddi4+0x24a>
 8000e10:	4660      	mov	r0, ip
 8000e12:	e78d      	b.n	8000d30 <__udivmoddi4+0x1c4>
 8000e14:	4681      	mov	r9, r0
 8000e16:	e7b9      	b.n	8000d8c <__udivmoddi4+0x220>
 8000e18:	4666      	mov	r6, ip
 8000e1a:	e775      	b.n	8000d08 <__udivmoddi4+0x19c>
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e74a      	b.n	8000cb6 <__udivmoddi4+0x14a>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	4439      	add	r1, r7
 8000e26:	e713      	b.n	8000c50 <__udivmoddi4+0xe4>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	e724      	b.n	8000c78 <__udivmoddi4+0x10c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	485a      	ldr	r0, [pc, #360]	; (8000fac <main+0x178>)
 8000e42:	f003 fd7d 	bl	8004940 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f003 fa7b 	bl	8004340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f8d1 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 f96d 	bl	800112c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e52:	f000 f935 	bl	80010c0 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //---------------------------SLEEP-----------------------------------------

	  singleFrameTransaction("1","0","00000","0000000","00","000000000000000000",false);
 8000e56:	2300      	movs	r3, #0
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	4b55      	ldr	r3, [pc, #340]	; (8000fb0 <main+0x17c>)
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <main+0x180>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4b55      	ldr	r3, [pc, #340]	; (8000fb8 <main+0x184>)
 8000e64:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <main+0x188>)
 8000e66:	4956      	ldr	r1, [pc, #344]	; (8000fc0 <main+0x18c>)
 8000e68:	4856      	ldr	r0, [pc, #344]	; (8000fc4 <main+0x190>)
 8000e6a:	f000 f9a5 	bl	80011b8 <singleFrameTransaction>
	  //HAL_Delay(5);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
	  */

	  //------------------------------INIT---------------------------------------------------
	  singleFrameTransaction("1","1","00000","0000001","00","000010000000000010",false);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <main+0x194>)
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <main+0x180>)
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	4b54      	ldr	r3, [pc, #336]	; (8000fcc <main+0x198>)
 8000e7c:	4a4f      	ldr	r2, [pc, #316]	; (8000fbc <main+0x188>)
 8000e7e:	4951      	ldr	r1, [pc, #324]	; (8000fc4 <main+0x190>)
 8000e80:	4850      	ldr	r0, [pc, #320]	; (8000fc4 <main+0x190>)
 8000e82:	f000 f999 	bl	80011b8 <singleFrameTransaction>


	  //--------------------------NORMAL--------------------------------------------
	  // READ DEV_GEN_CFG:
	  singleFrameTransaction("1","0","00001","0000001","00","000000000000000000",true);
 8000e86:	2301      	movs	r3, #1
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <main+0x17c>)
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <main+0x180>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <main+0x198>)
 8000e94:	4a4e      	ldr	r2, [pc, #312]	; (8000fd0 <main+0x19c>)
 8000e96:	494a      	ldr	r1, [pc, #296]	; (8000fc0 <main+0x18c>)
 8000e98:	484a      	ldr	r0, [pc, #296]	; (8000fc4 <main+0x190>)
 8000e9a:	f000 f98d 	bl	80011b8 <singleFrameTransaction>
	  dummy+=1;
 8000e9e:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <main+0x1a0>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <main+0x1a0>)
 8000ea8:	701a      	strb	r2, [r3, #0]
	  // ENABLE CELLS:
	  singleFrameTransaction("1","1","00001","0011100","00","000011000000000011",true);
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9302      	str	r3, [sp, #8]
 8000eae:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <main+0x1a4>)
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <main+0x180>)
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <main+0x1a8>)
 8000eb8:	4a45      	ldr	r2, [pc, #276]	; (8000fd0 <main+0x19c>)
 8000eba:	4942      	ldr	r1, [pc, #264]	; (8000fc4 <main+0x190>)
 8000ebc:	4841      	ldr	r0, [pc, #260]	; (8000fc4 <main+0x190>)
 8000ebe:	f000 f97b 	bl	80011b8 <singleFrameTransaction>
	  dummy+=1;
 8000ec2:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <main+0x1a0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b42      	ldr	r3, [pc, #264]	; (8000fd4 <main+0x1a0>)
 8000ecc:	701a      	strb	r2, [r3, #0]



	  // PERFORM CYCLIC ADC VOLTAGE CONVERSION:

	  configRegNCYCLE_PROG_1("10","000","000","000","1","1","1","0","0","0");
 8000ece:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <main+0x18c>)
 8000ed0:	9305      	str	r3, [sp, #20]
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <main+0x18c>)
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <main+0x18c>)
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <main+0x190>)
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <main+0x190>)
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <main+0x190>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <main+0x1ac>)
 8000ee8:	4a3d      	ldr	r2, [pc, #244]	; (8000fe0 <main+0x1ac>)
 8000eea:	493d      	ldr	r1, [pc, #244]	; (8000fe0 <main+0x1ac>)
 8000eec:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <main+0x1b0>)
 8000eee:	f000 fb3f 	bl	8001570 <configRegNCYCLE_PROG_1>
	  dummy+=1;
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <main+0x1a0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <main+0x1a0>)
 8000efc:	701a      	strb	r2, [r3, #0]
	  configRegNCYCLE_PROG_2("1","0","000","000","001","011","001");
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <main+0x1b4>)
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <main+0x1b8>)
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <main+0x1b4>)
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <main+0x1ac>)
 8000f0c:	4a34      	ldr	r2, [pc, #208]	; (8000fe0 <main+0x1ac>)
 8000f0e:	492c      	ldr	r1, [pc, #176]	; (8000fc0 <main+0x18c>)
 8000f10:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <main+0x190>)
 8000f12:	f000 fb9b 	bl	800164c <configRegNCYCLE_PROG_2>
	  dummy+=1;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <main+0x1a0>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <main+0x1a0>)
 8000f20:	701a      	strb	r2, [r3, #0]
	  configRegADCV_CONV("0","0","0","000","0","0","0","0","0","011","1");
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <main+0x190>)
 8000f24:	9306      	str	r3, [sp, #24]
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <main+0x1b8>)
 8000f28:	9305      	str	r3, [sp, #20]
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <main+0x18c>)
 8000f2c:	9304      	str	r3, [sp, #16]
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <main+0x18c>)
 8000f30:	9303      	str	r3, [sp, #12]
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <main+0x18c>)
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <main+0x18c>)
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <main+0x18c>)
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <main+0x1ac>)
 8000f40:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <main+0x18c>)
 8000f42:	491f      	ldr	r1, [pc, #124]	; (8000fc0 <main+0x18c>)
 8000f44:	481e      	ldr	r0, [pc, #120]	; (8000fc0 <main+0x18c>)
 8000f46:	f000 fa81 	bl	800144c <configRegADCV_CONV>
	  dummy+=1;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <main+0x1a0>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <main+0x1a0>)
 8000f54:	701a      	strb	r2, [r3, #0]
	  configRegADCV_CONV("0","0","1","000","0","0","0","0","0","011","1");
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <main+0x190>)
 8000f58:	9306      	str	r3, [sp, #24]
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <main+0x1b8>)
 8000f5c:	9305      	str	r3, [sp, #20]
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <main+0x18c>)
 8000f60:	9304      	str	r3, [sp, #16]
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <main+0x18c>)
 8000f64:	9303      	str	r3, [sp, #12]
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <main+0x18c>)
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <main+0x18c>)
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <main+0x18c>)
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <main+0x1ac>)
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <main+0x190>)
 8000f76:	4912      	ldr	r1, [pc, #72]	; (8000fc0 <main+0x18c>)
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <main+0x18c>)
 8000f7a:	f000 fa67 	bl	800144c <configRegADCV_CONV>
	  dummy+=1;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <main+0x1a0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <main+0x1a0>)
 8000f88:	701a      	strb	r2, [r3, #0]
	  dummy+=1;
	  	  */

	  while(1){
	  // READ BURSTS
	  HAL_Delay(1000);
 8000f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8e:	f003 fa49 	bl	8004424 <HAL_Delay>
	  readBurst0x78();
 8000f92:	f000 fbb9 	bl	8001708 <readBurst0x78>
	  readBurst0x7A();
 8000f96:	f001 f85f 	bl	8002058 <readBurst0x7A>
	  readBurst0x7B();
 8000f9a:	f002 f9d5 	bl	8003348 <readBurst0x7B>
	  //configRegADCV_CONV("0","1","1","000","0","0","0","0","0","011","1");
	  dummy+=1; // <--optional breakpoint here
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <main+0x1a0>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <main+0x1a0>)
 8000fa8:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000faa:	e7ee      	b.n	8000f8a <main+0x156>
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	080067d8 	.word	0x080067d8
 8000fb4:	080067ec 	.word	0x080067ec
 8000fb8:	080067c0 	.word	0x080067c0
 8000fbc:	080067c8 	.word	0x080067c8
 8000fc0:	080067d0 	.word	0x080067d0
 8000fc4:	080067d4 	.word	0x080067d4
 8000fc8:	080067f8 	.word	0x080067f8
 8000fcc:	080067f0 	.word	0x080067f0
 8000fd0:	0800680c 	.word	0x0800680c
 8000fd4:	20000090 	.word	0x20000090
 8000fd8:	0800681c 	.word	0x0800681c
 8000fdc:	08006814 	.word	0x08006814
 8000fe0:	08006830 	.word	0x08006830
 8000fe4:	08006834 	.word	0x08006834
 8000fe8:	08006838 	.word	0x08006838
 8000fec:	0800683c 	.word	0x0800683c

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	; 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	; 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fbfa 	bl	80057f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <SystemClock_Config+0xc8>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <SystemClock_Config+0xc8>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <SystemClock_Config+0xc8>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <SystemClock_Config+0xcc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <SystemClock_Config+0xcc>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <SystemClock_Config+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001060:	230c      	movs	r3, #12
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800106c:	2304      	movs	r3, #4
 800106e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fc7d 	bl	8004974 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001080:	f003 f882 	bl	8004188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2103      	movs	r1, #3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fedf 	bl	8004e64 <HAL_RCC_ClockConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010ac:	f003 f86c 	bl	8004188 <Error_Handler>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3750      	adds	r7, #80	; 0x50
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_SPI2_Init+0x64>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MX_SPI2_Init+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_SPI2_Init+0x64>)
 80010cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_SPI2_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_SPI2_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_SPI2_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_SPI2_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_SPI2_Init+0x64>)
 80010ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_SPI2_Init+0x64>)
 80010f4:	2228      	movs	r2, #40	; 0x28
 80010f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_SPI2_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_SPI2_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_SPI2_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_SPI2_Init+0x64>)
 800110c:	220a      	movs	r2, #10
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_SPI2_Init+0x64>)
 8001112:	f004 f843 	bl	800519c <HAL_SPI_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800111c:	f003 f834 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000bc 	.word	0x200000bc
 8001128:	40003800 	.word	0x40003800

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_GPIO_Init+0x80>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <MX_GPIO_Init+0x80>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_GPIO_Init+0x80>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_GPIO_Init+0x80>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <MX_GPIO_Init+0x80>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_GPIO_Init+0x80>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0x84>)
 8001182:	f003 fbdd 	bl	8004940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001186:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4619      	mov	r1, r3
 800119e:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_GPIO_Init+0x84>)
 80011a0:	f003 fa4a 	bl	8004638 <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	00000000 	.word	0x00000000

080011b8 <singleFrameTransaction>:

/* USER CODE BEGIN 4 */

void singleFrameTransaction(char PA[],char RW[],char DevID[],char Addr[],char GSW[],char data[], bool acquireResponse){
 80011b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011bc:	b09a      	sub	sp, #104	; 0x68
 80011be:	af02      	add	r7, sp, #8
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
	  char frame[41];char CRC_code[7]="000000";
 80011c8:	4a9b      	ldr	r2, [pc, #620]	; (8001438 <singleFrameTransaction+0x280>)
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d2:	6018      	str	r0, [r3, #0]
 80011d4:	3304      	adds	r3, #4
 80011d6:	8019      	strh	r1, [r3, #0]
 80011d8:	3302      	adds	r3, #2
 80011da:	0c0a      	lsrs	r2, r1, #16
 80011dc:	701a      	strb	r2, [r3, #0]
	  strcpy(frame, PA);
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fb1e 	bl	8005826 <strcpy>
	  strcat(frame,RW);
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fb09 	bl	8005808 <strcat>
	  strcat(frame,DevID);
 80011f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fb03 	bl	8005808 <strcat>
	  strcat(frame,Addr);
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fafd 	bl	8005808 <strcat>
	  strcat(frame,GSW);
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001214:	4618      	mov	r0, r3
 8001216:	f004 faf7 	bl	8005808 <strcat>
	  strcat(frame,data);
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001220:	4618      	mov	r0, r3
 8001222:	f004 faf1 	bl	8005808 <strcat>
	  strcat(frame,CRC_code);
 8001226:	f107 0220 	add.w	r2, r7, #32
 800122a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f004 fae9 	bl	8005808 <strcat>
	  uint8_t command_data_arr[5];


	  for (int i=0;i<5;i++){
 8001236:	2300      	movs	r3, #0
 8001238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800123a:	e048      	b.n	80012ce <singleFrameTransaction+0x116>
	     command_data_arr[i]=0;
 800123c:	f107 0218 	add.w	r2, r7, #24
 8001240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001242:	4413      	add	r3, r2
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	     for(int j=7;j>=0;j--){
 8001248:	2307      	movs	r3, #7
 800124a:	65bb      	str	r3, [r7, #88]	; 0x58
 800124c:	e039      	b.n	80012c2 <singleFrameTransaction+0x10a>
	         if(frame[i*8+j]=='1')
 800124e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001250:	00da      	lsls	r2, r3, #3
 8001252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001254:	4413      	add	r3, r2
 8001256:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800125a:	4413      	add	r3, r2
 800125c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001260:	2b31      	cmp	r3, #49	; 0x31
 8001262:	d12b      	bne.n	80012bc <singleFrameTransaction+0x104>
	            command_data_arr[i]=command_data_arr[i] + pow(2,7-j);
 8001264:	f107 0218 	add.w	r2, r7, #24
 8001268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f90c 	bl	800048c <__aeabi_i2d>
 8001274:	4604      	mov	r4, r0
 8001276:	460d      	mov	r5, r1
 8001278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f904 	bl	800048c <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ec43 2b11 	vmov	d1, r2, r3
 800128c:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8001430 <singleFrameTransaction+0x278>
 8001290:	f004 fad2 	bl	8005838 <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe ffaa 	bl	80001f4 <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc0a 	bl	8000ac0 <__aeabi_d2uiz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b2d9      	uxtb	r1, r3
 80012b0:	f107 0218 	add.w	r2, r7, #24
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	4413      	add	r3, r2
 80012b8:	460a      	mov	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
	     for(int j=7;j>=0;j--){
 80012bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012be:	3b01      	subs	r3, #1
 80012c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80012c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dac2      	bge.n	800124e <singleFrameTransaction+0x96>
	  for (int i=0;i<5;i++){
 80012c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ca:	3301      	adds	r3, #1
 80012cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	ddb3      	ble.n	800123c <singleFrameTransaction+0x84>
	         }
	  }

	  uint64_t command_data = 0;
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  for (int i=39;i>=0;i--){
 80012e0:	2327      	movs	r3, #39	; 0x27
 80012e2:	657b      	str	r3, [r7, #84]	; 0x54
 80012e4:	e039      	b.n	800135a <singleFrameTransaction+0x1a2>
		  command_data = command_data + (frame[i]-48)*pow(2,39-i);
 80012e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff f901 	bl	80004f4 <__aeabi_ul2d>
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3b30      	subs	r3, #48	; 0x30
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8c2 	bl	800048c <__aeabi_i2d>
 8001308:	4680      	mov	r8, r0
 800130a:	4689      	mov	r9, r1
 800130c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800130e:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f8ba 	bl	800048c <__aeabi_i2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	ec43 2b11 	vmov	d1, r2, r3
 8001320:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8001430 <singleFrameTransaction+0x278>
 8001324:	f004 fa88 	bl	8005838 <pow>
 8001328:	ec53 2b10 	vmov	r2, r3, d0
 800132c:	4640      	mov	r0, r8
 800132e:	4649      	mov	r1, r9
 8001330:	f7ff f916 	bl	8000560 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff5a 	bl	80001f4 <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbf2 	bl	8000b30 <__aeabi_d2ulz>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  for (int i=39;i>=0;i--){
 8001354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001356:	3b01      	subs	r3, #1
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
 800135a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135c:	2b00      	cmp	r3, #0
 800135e:	dac2      	bge.n	80012e6 <singleFrameTransaction+0x12e>
	  }
	  L9963_CrcCalc8bitLookupTab(&command_data);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fe21 	bl	8003fac <L9963_CrcCalc8bitLookupTab>
	  command_data_arr[4]=command_data_arr[4] | (uint8_t)(command_data & 0b00111111);
 800136a:	7f3b      	ldrb	r3, [r7, #28]
 800136c:	b259      	sxtb	r1, r3
 800136e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001372:	b253      	sxtb	r3, r2
 8001374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001378:	b25b      	sxtb	r3, r3
 800137a:	430b      	orrs	r3, r1
 800137c:	b25b      	sxtb	r3, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	773b      	strb	r3, [r7, #28]


	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001388:	482c      	ldr	r0, [pc, #176]	; (800143c <singleFrameTransaction+0x284>)
 800138a:	f003 fad9 	bl	8004940 <HAL_GPIO_WritePin>
	  status = HAL_SPI_TransmitReceive(&hspi2, command_data_arr, response_arr, 5, HAL_MAX_DELAY);
 800138e:	f107 0118 	add.w	r1, r7, #24
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2305      	movs	r3, #5
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <singleFrameTransaction+0x288>)
 800139c:	4829      	ldr	r0, [pc, #164]	; (8001444 <singleFrameTransaction+0x28c>)
 800139e:	f003 ff86 	bl	80052ae <HAL_SPI_TransmitReceive>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <singleFrameTransaction+0x290>)
 80013a8:	701a      	strb	r2, [r3, #0]
	  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 80013aa:	bf00      	nop
 80013ac:	4825      	ldr	r0, [pc, #148]	; (8001444 <singleFrameTransaction+0x28c>)
 80013ae:	f004 f920 	bl	80055f2 <HAL_SPI_GetState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d1f9      	bne.n	80013ac <singleFrameTransaction+0x1f4>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	481f      	ldr	r0, [pc, #124]	; (800143c <singleFrameTransaction+0x284>)
 80013c0:	f003 fabe 	bl	8004940 <HAL_GPIO_WritePin>

	  if(acquireResponse){
 80013c4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d02a      	beq.n	8001422 <singleFrameTransaction+0x26a>
		  //use dummy command (read DEV_GEN_CFG reg) to acquire the out of frame response to the previous command
		  command_data_arr[0]=0b10000010;
 80013cc:	2382      	movs	r3, #130	; 0x82
 80013ce:	763b      	strb	r3, [r7, #24]
		  command_data_arr[1]=0b00000100;
 80013d0:	2304      	movs	r3, #4
 80013d2:	767b      	strb	r3, [r7, #25]
		  command_data_arr[2]=0b00000000;
 80013d4:	2300      	movs	r3, #0
 80013d6:	76bb      	strb	r3, [r7, #26]
		  command_data_arr[3]=0b00000000;
 80013d8:	2300      	movs	r3, #0
 80013da:	76fb      	strb	r3, [r7, #27]
		  command_data_arr[4]=0b00010111;
 80013dc:	2317      	movs	r3, #23
 80013de:	773b      	strb	r3, [r7, #28]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	4815      	ldr	r0, [pc, #84]	; (800143c <singleFrameTransaction+0x284>)
 80013e8:	f003 faaa 	bl	8004940 <HAL_GPIO_WritePin>
		  status = HAL_SPI_TransmitReceive(&hspi2, command_data_arr, response_arr, 5, HAL_MAX_DELAY);
 80013ec:	f107 0118 	add.w	r1, r7, #24
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2305      	movs	r3, #5
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <singleFrameTransaction+0x288>)
 80013fa:	4812      	ldr	r0, [pc, #72]	; (8001444 <singleFrameTransaction+0x28c>)
 80013fc:	f003 ff57 	bl	80052ae <HAL_SPI_TransmitReceive>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <singleFrameTransaction+0x290>)
 8001406:	701a      	strb	r2, [r3, #0]
		  while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 8001408:	bf00      	nop
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <singleFrameTransaction+0x28c>)
 800140c:	f004 f8f1 	bl	80055f2 <HAL_SPI_GetState>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d1f9      	bne.n	800140a <singleFrameTransaction+0x252>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <singleFrameTransaction+0x284>)
 800141e:	f003 fa8f 	bl	8004940 <HAL_GPIO_WritePin>
	  }
}
 8001422:	bf00      	nop
 8001424:	3760      	adds	r7, #96	; 0x60
 8001426:	46bd      	mov	sp, r7
 8001428:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800142c:	f3af 8000 	nop.w
 8001430:	00000000 	.word	0x00000000
 8001434:	40000000 	.word	0x40000000
 8001438:	08006840 	.word	0x08006840
 800143c:	40020400 	.word	0x40020400
 8001440:	20000094 	.word	0x20000094
 8001444:	200000bc 	.word	0x200000bc
 8001448:	200002c8 	.word	0x200002c8

0800144c <configRegADCV_CONV>:

void configRegADCV_CONV(char ADC_CROSS_CHECK[],char SOC[],char CONF_CYCLIC_EN[],char ADC_FILTER_SOC[],char GPIO_CONV[],
		char GPIO_TERM_CONV[],char CELL_TERM_CONV[],char BAL_TERM_CONV[],char HWSC[],char TCYCLE[],char CYCLIC_CONTINOUS[]){
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af04      	add	r7, sp, #16
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	char data[19];
	strcpy(data,ADC_CROSS_CHECK);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	4618      	mov	r0, r3
 8001462:	f004 f9e0 	bl	8005826 <strcpy>
	strcat(data,"0"); //TCYCLE_OVF
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe feb4 	bl	80001d8 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4413      	add	r3, r2
 800147a:	4938      	ldr	r1, [pc, #224]	; (800155c <configRegADCV_CONV+0x110>)
 800147c:	461a      	mov	r2, r3
 800147e:	460b      	mov	r3, r1
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	8013      	strh	r3, [r2, #0]
	strcat(data,SOC);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f9bc 	bl	8005808 <strcat>
	strcat(data,"0"); //OVR_LATCH
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe fe9f 	bl	80001d8 <strlen>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4413      	add	r3, r2
 80014a4:	492d      	ldr	r1, [pc, #180]	; (800155c <configRegADCV_CONV+0x110>)
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	8013      	strh	r3, [r2, #0]
	strcat(data,CONF_CYCLIC_EN);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 f9a7 	bl	8005808 <strcat>
	strcat(data,"0"); //DUTY_ON
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fe8a 	bl	80001d8 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4413      	add	r3, r2
 80014ce:	4923      	ldr	r1, [pc, #140]	; (800155c <configRegADCV_CONV+0x110>)
 80014d0:	461a      	mov	r2, r3
 80014d2:	460b      	mov	r3, r1
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	8013      	strh	r3, [r2, #0]
	strcat(data,ADC_FILTER_SOC);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 f992 	bl	8005808 <strcat>
	strcat(data,GPIO_CONV);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 f98c 	bl	8005808 <strcat>
	strcat(data,GPIO_TERM_CONV);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 f986 	bl	8005808 <strcat>
	strcat(data,CELL_TERM_CONV);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001502:	4618      	mov	r0, r3
 8001504:	f004 f980 	bl	8005808 <strcat>
	strcat(data,BAL_TERM_CONV);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800150e:	4618      	mov	r0, r3
 8001510:	f004 f97a 	bl	8005808 <strcat>
	strcat(data,HWSC);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800151a:	4618      	mov	r0, r3
 800151c:	f004 f974 	bl	8005808 <strcat>
	strcat(data,TCYCLE);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001526:	4618      	mov	r0, r3
 8001528:	f004 f96e 	bl	8005808 <strcat>
	strcat(data,CYCLIC_CONTINOUS);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001532:	4618      	mov	r0, r3
 8001534:	f004 f968 	bl	8005808 <strcat>

	singleFrameTransaction("1","1","00001","0001101","00",data,true);
 8001538:	2301      	movs	r3, #1
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <configRegADCV_CONV+0x114>)
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <configRegADCV_CONV+0x118>)
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <configRegADCV_CONV+0x11c>)
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <configRegADCV_CONV+0x120>)
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <configRegADCV_CONV+0x120>)
 800154e:	f7ff fe33 	bl	80011b8 <singleFrameTransaction>

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	080067d0 	.word	0x080067d0
 8001560:	080067ec 	.word	0x080067ec
 8001564:	08006848 	.word	0x08006848
 8001568:	0800680c 	.word	0x0800680c
 800156c:	080067d4 	.word	0x080067d4

08001570 <configRegNCYCLE_PROG_1>:

void configRegNCYCLE_PROG_1(char T_CELL_SET[],char NCYCLE_GPIO_TERM[],char NCYCLE_CELL_TERM[],char NCYCLE_BAL_TERM[],char BAL_TIM_AUTO_PAUSE[],
		char BAL_AUTO_PAUSE[],char CYCLIC_UPDATE[], char CROSS_ODD_EVEN_CELL[], char PCB_open_en_odd_curr[], char PCB_open_en_even_curr[]){
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af04      	add	r7, sp, #16
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
	char data[19];
	strcpy(data,T_CELL_SET);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	4618      	mov	r0, r3
 8001586:	f004 f94e 	bl	8005826 <strcpy>
	strcat(data,NCYCLE_GPIO_TERM);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	68b9      	ldr	r1, [r7, #8]
 8001590:	4618      	mov	r0, r3
 8001592:	f004 f939 	bl	8005808 <strcat>
	strcat(data,NCYCLE_CELL_TERM);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f933 	bl	8005808 <strcat>
	strcat(data,NCYCLE_BAL_TERM);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f92d 	bl	8005808 <strcat>
	strcat(data,BAL_TIM_AUTO_PAUSE);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f927 	bl	8005808 <strcat>
	strcat(data,BAL_AUTO_PAUSE);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 f921 	bl	8005808 <strcat>
	strcat(data,CYCLIC_UPDATE);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 f91b 	bl	8005808 <strcat>
	strcat(data,CROSS_ODD_EVEN_CELL);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 f915 	bl	8005808 <strcat>
	strcat(data,PCB_open_en_odd_curr);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 f90f 	bl	8005808 <strcat>
	strcat(data,PCB_open_en_even_curr);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 f909 	bl	8005808 <strcat>
	strcat(data,"0"); //NOREG0
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fdec 	bl	80001d8 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4413      	add	r3, r2
 800160a:	490b      	ldr	r1, [pc, #44]	; (8001638 <configRegNCYCLE_PROG_1+0xc8>)
 800160c:	461a      	mov	r2, r3
 800160e:	460b      	mov	r3, r1
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	8013      	strh	r3, [r2, #0]

	singleFrameTransaction("1","1","00001","0001110","00",data,true);
 8001614:	2301      	movs	r3, #1
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <configRegNCYCLE_PROG_1+0xcc>)
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <configRegNCYCLE_PROG_1+0xd0>)
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <configRegNCYCLE_PROG_1+0xd4>)
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <configRegNCYCLE_PROG_1+0xd8>)
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <configRegNCYCLE_PROG_1+0xd8>)
 800162a:	f7ff fdc5 	bl	80011b8 <singleFrameTransaction>
}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	080067d0 	.word	0x080067d0
 800163c:	080067ec 	.word	0x080067ec
 8001640:	08006850 	.word	0x08006850
 8001644:	0800680c 	.word	0x0800680c
 8001648:	080067d4 	.word	0x080067d4

0800164c <configRegNCYCLE_PROG_2>:

void configRegNCYCLE_PROG_2(char VTREF_EN[],char VTREF_DYN_EN[],char NCYCLE_GPIO[],char NCYCLE_HWSC[], char ADC_FILTER_CYCLE[], char TCYCLE_SLEEP[],
		char ADC_FILTER_SLEEP[]){
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	; 0x38
 8001650:	af04      	add	r7, sp, #16
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
	char data[19];
	strcpy(data,VTREF_EN);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	4618      	mov	r0, r3
 8001662:	f004 f8e0 	bl	8005826 <strcpy>
	strcat(data,VTREF_DYN_EN);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	4618      	mov	r0, r3
 800166e:	f004 f8cb 	bl	8005808 <strcat>
	strcat(data,NCYCLE_GPIO);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	f004 f8c5 	bl	8005808 <strcat>
	strcat(data,NCYCLE_HWSC);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f004 f8bf 	bl	8005808 <strcat>
	strcat(data,"0"); //NOREG9
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fda2 	bl	80001d8 <strlen>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4413      	add	r3, r2
 800169e:	4914      	ldr	r1, [pc, #80]	; (80016f0 <configRegNCYCLE_PROG_2+0xa4>)
 80016a0:	461a      	mov	r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	8013      	strh	r3, [r2, #0]
	strcat(data,ADC_FILTER_CYCLE);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 f8aa 	bl	8005808 <strcat>
	strcat(data,TCYCLE_SLEEP);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f8a4 	bl	8005808 <strcat>
	strcat(data,ADC_FILTER_SLEEP);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f89e 	bl	8005808 <strcat>

	singleFrameTransaction("1","1","00001","0001111","00",data,true);
 80016cc:	2301      	movs	r3, #1
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <configRegNCYCLE_PROG_2+0xa8>)
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <configRegNCYCLE_PROG_2+0xac>)
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <configRegNCYCLE_PROG_2+0xb0>)
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <configRegNCYCLE_PROG_2+0xb4>)
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <configRegNCYCLE_PROG_2+0xb4>)
 80016e2:	f7ff fd69 	bl	80011b8 <singleFrameTransaction>
}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	080067d0 	.word	0x080067d0
 80016f4:	080067ec 	.word	0x080067ec
 80016f8:	08006858 	.word	0x08006858
 80016fc:	0800680c 	.word	0x0800680c
 8001700:	080067d4 	.word	0x080067d4
 8001704:	00000000 	.word	0x00000000

08001708 <readBurst0x78>:

void readBurst0x78 (){
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	b0c3      	sub	sp, #268	; 0x10c
 800170e:	af02      	add	r7, sp, #8
 8001710:	466b      	mov	r3, sp
 8001712:	607b      	str	r3, [r7, #4]
	//FOR VOLTAGE CONVERSIONS CHECK DOCUMENTATION -> TABLE 4.5.2


	uint8_t command_data_arr[5]; //initial burst command data to be sent by MCU, 8 bit array form
	uint64_t command_data = 0; //initial burst command data to be sent by MCU
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	uint8_t nofFrames = 18; //number of frames received from burst command
 8001720:	2312      	movs	r3, #18
 8001722:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	uint8_t data_burst_arr[nofFrames*5]; //dummy data sent by MCU during burst frame receival
 8001726:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	189c      	adds	r4, r3, r2
 8001730:	1e63      	subs	r3, r4, #1
 8001732:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001736:	4623      	mov	r3, r4
 8001738:	461a      	mov	r2, r3
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	f04f 0000 	mov.w	r0, #0
 8001742:	f04f 0100 	mov.w	r1, #0
 8001746:	00d9      	lsls	r1, r3, #3
 8001748:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800174c:	00d0      	lsls	r0, r2, #3
 800174e:	4623      	mov	r3, r4
 8001750:	461a      	mov	r2, r3
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	f04f 0000 	mov.w	r0, #0
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	00d9      	lsls	r1, r3, #3
 8001760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001764:	00d0      	lsls	r0, r2, #3
 8001766:	4623      	mov	r3, r4
 8001768:	3307      	adds	r3, #7
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	ebad 0d03 	sub.w	sp, sp, r3
 8001772:	ab02      	add	r3, sp, #8
 8001774:	3300      	adds	r3, #0
 8001776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	for(int i=0;i<nofFrames*5;i++) data_burst_arr[i]=0; //all zeroes as per manufacturer documentation
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001780:	e00b      	b.n	800179a <readBurst0x78+0x92>
 8001782:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800178a:	441a      	add	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	7013      	strb	r3, [r2, #0]
 8001790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001794:	3301      	adds	r3, #1
 8001796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800179a:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	441a      	add	r2, r3
 80017a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80017a8:	4293      	cmp	r3, r2
 80017aa:	dbea      	blt.n	8001782 <readBurst0x78+0x7a>
	data_burst_arr[nofFrames*5-5]=0b10000010;
 80017ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	1899      	adds	r1, r3, r2
 80017b8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017bc:	2382      	movs	r3, #130	; 0x82
 80017be:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-4]=0b00000100;
 80017c0:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	1f19      	subs	r1, r3, #4
 80017cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017d0:	2304      	movs	r3, #4
 80017d2:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-3]=0b00000000;
 80017d4:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	1ed9      	subs	r1, r3, #3
 80017e0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017e4:	2300      	movs	r3, #0
 80017e6:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-2]=0b00000000;
 80017e8:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	1e99      	subs	r1, r3, #2
 80017f4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80017f8:	2300      	movs	r3, #0
 80017fa:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-1]=0b00010111;
 80017fc:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	1e59      	subs	r1, r3, #1
 8001808:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800180c:	2317      	movs	r3, #23
 800180e:	5453      	strb	r3, [r2, r1]
	uint8_t burst_response_arr[nofFrames*5]; // data received by MCU during burst response
 8001810:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	189c      	adds	r4, r3, r2
 800181a:	466b      	mov	r3, sp
 800181c:	461e      	mov	r6, r3
 800181e:	1e63      	subs	r3, r4, #1
 8001820:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001824:	4623      	mov	r3, r4
 8001826:	461a      	mov	r2, r3
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	f04f 0000 	mov.w	r0, #0
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	00d9      	lsls	r1, r3, #3
 8001836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800183a:	00d0      	lsls	r0, r2, #3
 800183c:	4623      	mov	r3, r4
 800183e:	461a      	mov	r2, r3
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	00d9      	lsls	r1, r3, #3
 800184e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001852:	00d0      	lsls	r0, r2, #3
 8001854:	4623      	mov	r3, r4
 8001856:	3307      	adds	r3, #7
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	ebad 0d03 	sub.w	sp, sp, r3
 8001860:	ab02      	add	r3, sp, #8
 8001862:	3300      	adds	r3, #0
 8001864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	char PA[2] = "1"; // 0 = MISO answer ; 1 = MOSI command
 8001868:	2331      	movs	r3, #49	; 0x31
 800186a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
    char RW[2] = "0"; // 0 = read ; 1 = write
 800186e:	2330      	movs	r3, #48	; 0x30
 8001870:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    char DevID[6] = "00001";
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <readBurst0x78+0x318>)
 8001876:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800187a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187e:	6018      	str	r0, [r3, #0]
 8001880:	3304      	adds	r3, #4
 8001882:	8019      	strh	r1, [r3, #0]
	char Addr[8] = "1111000"; 	// 0x78 burst command
 8001884:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <readBurst0x78+0x31c>)
 8001886:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800188a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800188e:	e882 0003 	stmia.w	r2, {r0, r1}
	char GSW[3] = "00"; // 0x = ok ; 1x = internal failure detected
 8001892:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <readBurst0x78+0x320>)
 8001894:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	460b      	mov	r3, r1
 800189c:	8013      	strh	r3, [r2, #0]
 800189e:	3202      	adds	r2, #2
 80018a0:	0c0b      	lsrs	r3, r1, #16
 80018a2:	7013      	strb	r3, [r2, #0]
	char data[19] = "111111111111111111";
 80018a4:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <readBurst0x78+0x324>)
 80018a6:	f107 0590 	add.w	r5, r7, #144	; 0x90
 80018aa:	461c      	mov	r4, r3
 80018ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	4613      	mov	r3, r2
 80018b4:	802b      	strh	r3, [r5, #0]
 80018b6:	3502      	adds	r5, #2
 80018b8:	0c13      	lsrs	r3, r2, #16
 80018ba:	702b      	strb	r3, [r5, #0]
	char CRC_code[7] = "000000";
 80018bc:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <readBurst0x78+0x328>)
 80018be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c6:	6010      	str	r0, [r2, #0]
 80018c8:	3204      	adds	r2, #4
 80018ca:	8011      	strh	r1, [r2, #0]
 80018cc:	3202      	adds	r2, #2
 80018ce:	0c0b      	lsrs	r3, r1, #16
 80018d0:	7013      	strb	r3, [r2, #0]
	char frame[41];

	strcpy(frame, PA);
 80018d2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80018d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 ffa2 	bl	8005826 <strcpy>
	strcat(frame,RW);
 80018e2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80018e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 ff8b 	bl	8005808 <strcat>
	strcat(frame,DevID);
 80018f2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80018f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 ff83 	bl	8005808 <strcat>
	strcat(frame,Addr);
 8001902:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001906:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f003 ff7b 	bl	8005808 <strcat>
	strcat(frame,GSW);
 8001912:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001916:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f003 ff73 	bl	8005808 <strcat>
	strcat(frame,data);
 8001922:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f003 ff6b 	bl	8005808 <strcat>
	strcat(frame,CRC_code);
 8001932:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001936:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f003 ff63 	bl	8005808 <strcat>

    //convert char array to 8 bit number array:
    for (int i=4;i>=0;i--){
 8001942:	2304      	movs	r3, #4
 8001944:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001948:	e05e      	b.n	8001a08 <readBurst0x78+0x300>
    	command_data_arr[i]=0;
 800194a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800194e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001952:	441a      	add	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	7013      	strb	r3, [r2, #0]
    	for(int j=7;j>=0;j--){
 8001958:	2307      	movs	r3, #7
 800195a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800195e:	e04a      	b.n	80019f6 <readBurst0x78+0x2ee>
    		command_data_arr[i]=command_data_arr[i] + (frame[i*8+j]-48)*pow(2,7-j);
 8001960:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001968:	4413      	add	r3, r2
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd8d 	bl	800048c <__aeabi_i2d>
 8001972:	4680      	mov	r8, r0
 8001974:	4689      	mov	r9, r1
 8001976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800197a:	00da      	lsls	r2, r3, #3
 800197c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001980:	4413      	add	r3, r2
 8001982:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8001986:	4413      	add	r3, r2
 8001988:	f813 3ca4 	ldrb.w	r3, [r3, #-164]
 800198c:	3b30      	subs	r3, #48	; 0x30
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd7c 	bl	800048c <__aeabi_i2d>
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800199c:	f1c3 0307 	rsb	r3, r3, #7
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fd73 	bl	800048c <__aeabi_i2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ec43 2b11 	vmov	d1, r2, r3
 80019ae:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001a18 <readBurst0x78+0x310>
 80019b2:	f003 ff41 	bl	8005838 <pow>
 80019b6:	ec53 2b10 	vmov	r2, r3, d0
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fdcf 	bl	8000560 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4640      	mov	r0, r8
 80019c8:	4649      	mov	r1, r9
 80019ca:	f7fe fc13 	bl	80001f4 <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f873 	bl	8000ac0 <__aeabi_d2uiz>
 80019da:	4603      	mov	r3, r0
 80019dc:	b2d9      	uxtb	r1, r3
 80019de:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80019e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80019e6:	441a      	add	r2, r3
 80019e8:	460b      	mov	r3, r1
 80019ea:	7013      	strb	r3, [r2, #0]
    	for(int j=7;j>=0;j--){
 80019ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019f0:	3b01      	subs	r3, #1
 80019f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80019f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	dab0      	bge.n	8001960 <readBurst0x78+0x258>
    for (int i=4;i>=0;i--){
 80019fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da9c      	bge.n	800194a <readBurst0x78+0x242>
    	}
    }
    //convert char array to number:
    for (int i=39;i>=0;i--){
 8001a10:	2327      	movs	r3, #39	; 0x27
 8001a12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a16:	e04b      	b.n	8001ab0 <readBurst0x78+0x3a8>
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40000000 	.word	0x40000000
 8001a20:	0800680c 	.word	0x0800680c
 8001a24:	08006860 	.word	0x08006860
 8001a28:	080067ec 	.word	0x080067ec
 8001a2c:	08006868 	.word	0x08006868
 8001a30:	08006840 	.word	0x08006840
    	command_data = command_data + (frame[i]-48)*pow(2,39-i);
 8001a34:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7fe fd5a 	bl	80004f4 <__aeabi_ul2d>
 8001a40:	4680      	mov	r8, r0
 8001a42:	4689      	mov	r9, r1
 8001a44:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd1a 	bl	800048c <__aeabi_i2d>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a60:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd11 	bl	800048c <__aeabi_i2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ec43 2b11 	vmov	d1, r2, r3
 8001a72:	ed9f 0bc5 	vldr	d0, [pc, #788]	; 8001d88 <readBurst0x78+0x680>
 8001a76:	f003 fedf 	bl	8005838 <pow>
 8001a7a:	ec53 2b10 	vmov	r2, r3, d0
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fd6d 	bl	8000560 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fbb1 	bl	80001f4 <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f849 	bl	8000b30 <__aeabi_d2ulz>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
    for (int i=39;i>=0;i--){
 8001aa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ab0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	dabd      	bge.n	8001a34 <readBurst0x78+0x32c>
    }

    L9963_CrcCalc8bitLookupTab(&command_data); //compute CRC for command
 8001ab8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fa75 	bl	8003fac <L9963_CrcCalc8bitLookupTab>
    command_data_arr[4]=command_data_arr[4] | (uint8_t)(command_data & 0b00111111);
 8001ac2:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8001ac6:	b259      	sxtb	r1, r3
 8001ac8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001acc:	b253      	sxtb	r3, r2
 8001ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

    uint8_t nOfTrials = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    TRANSACTION: //for goto instruction in case there is a problem with sent/received data
	nOfTrials+=1;
 8001ae4:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af4:	48a6      	ldr	r0, [pc, #664]	; (8001d90 <readBurst0x78+0x688>)
 8001af6:	f002 ff23 	bl	8004940 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, command_data_arr, response_arr, 5, HAL_MAX_DELAY);
 8001afa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2305      	movs	r3, #5
 8001b06:	4aa3      	ldr	r2, [pc, #652]	; (8001d94 <readBurst0x78+0x68c>)
 8001b08:	48a3      	ldr	r0, [pc, #652]	; (8001d98 <readBurst0x78+0x690>)
 8001b0a:	f003 fbd0 	bl	80052ae <HAL_SPI_TransmitReceive>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4aa2      	ldr	r2, [pc, #648]	; (8001d9c <readBurst0x78+0x694>)
 8001b12:	7013      	strb	r3, [r2, #0]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 8001b14:	bf00      	nop
 8001b16:	48a0      	ldr	r0, [pc, #640]	; (8001d98 <readBurst0x78+0x690>)
 8001b18:	f003 fd6b 	bl	80055f2 <HAL_SPI_GetState>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d1f9      	bne.n	8001b16 <readBurst0x78+0x40e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b28:	4899      	ldr	r0, [pc, #612]	; (8001d90 <readBurst0x78+0x688>)
 8001b2a:	f002 ff09 	bl	8004940 <HAL_GPIO_WritePin>

    HAL_Delay(4);
 8001b2e:	2004      	movs	r0, #4
 8001b30:	f002 fc78 	bl	8004424 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3a:	4895      	ldr	r0, [pc, #596]	; (8001d90 <readBurst0x78+0x688>)
 8001b3c:	f002 ff00 	bl	8004940 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, data_burst_arr, burst_response_arr, nofFrames*5, HAL_MAX_DELAY);
 8001b40:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001b44:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b48:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	460a      	mov	r2, r1
 8001b62:	4601      	mov	r1, r0
 8001b64:	488c      	ldr	r0, [pc, #560]	; (8001d98 <readBurst0x78+0x690>)
 8001b66:	f003 fba2 	bl	80052ae <HAL_SPI_TransmitReceive>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a8b      	ldr	r2, [pc, #556]	; (8001d9c <readBurst0x78+0x694>)
 8001b6e:	7013      	strb	r3, [r2, #0]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 8001b70:	bf00      	nop
 8001b72:	4889      	ldr	r0, [pc, #548]	; (8001d98 <readBurst0x78+0x690>)
 8001b74:	f003 fd3d 	bl	80055f2 <HAL_SPI_GetState>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d1f9      	bne.n	8001b72 <readBurst0x78+0x46a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b84:	4882      	ldr	r0, [pc, #520]	; (8001d90 <readBurst0x78+0x688>)
 8001b86:	f002 fedb 	bl	8004940 <HAL_GPIO_WritePin>

    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8001b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	0a14      	lsrs	r4, r2, #8
 8001bb0:	64fc      	str	r4, [r7, #76]	; 0x4c
 8001bb2:	0613      	lsls	r3, r2, #24
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001bba:	4623      	mov	r3, r4
 8001bbc:	4303      	orrs	r3, r0
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
    					   ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8001bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bca:	789b      	ldrb	r3, [r3, #2]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0419      	lsls	r1, r3, #16
 8001bdc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001be0:	0410      	lsls	r0, r2, #16
    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8001be2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001be6:	4623      	mov	r3, r4
 8001be8:	4303      	orrs	r3, r0
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bec:	462b      	mov	r3, r5
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    					   ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8001bf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bf6:	78db      	ldrb	r3, [r3, #3]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0219      	lsls	r1, r3, #8
 8001c08:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001c0c:	0210      	lsls	r0, r2, #8
 8001c0e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001c12:	4623      	mov	r3, r4
 8001c14:	ea43 0a00 	orr.w	sl, r3, r0
 8001c18:	462b      	mov	r3, r5
 8001c1a:	ea43 0b01 	orr.w	fp, r3, r1
 8001c1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4a 0102 	orr.w	r1, sl, r2
 8001c2e:	6339      	str	r1, [r7, #48]	; 0x30
 8001c30:	ea4b 0303 	orr.w	r3, fp, r3
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8001c36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001c3a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    //check first frame (for special frames - documentation 4.2.4.4)
    if((frame_check == 0xC1FCFFFD08 || //CRC error frame
 8001c3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c42:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <readBurst0x78+0x698>)
 8001c44:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 8001c48:	4299      	cmp	r1, r3
 8001c4a:	bf08      	it	eq
 8001c4c:	4290      	cmpeq	r0, r2
 8001c4e:	d01a      	beq.n	8001c86 <readBurst0x78+0x57e>
        frame_check == 0xC1FCFFFCDE || //Busy frame
 8001c50:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    if((frame_check == 0xC1FCFFFD08 || //CRC error frame
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <readBurst0x78+0x69c>)
 8001c56:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 8001c5a:	4299      	cmp	r1, r3
 8001c5c:	bf08      	it	eq
 8001c5e:	4290      	cmpeq	r0, r2
 8001c60:	d011      	beq.n	8001c86 <readBurst0x78+0x57e>
	    frame_check == 0xC1FCFFFC87 || //Timeout frame
 8001c62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
        frame_check == 0xC1FCFFFCDE || //Busy frame
 8001c66:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <readBurst0x78+0x6a0>)
 8001c68:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 8001c6c:	4299      	cmp	r1, r3
 8001c6e:	bf08      	it	eq
 8001c70:	4290      	cmpeq	r0, r2
 8001c72:	d008      	beq.n	8001c86 <readBurst0x78+0x57e>
	   frame_check == 0xC1FCFFFC6C) && //Not Expected frame
 8001c74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
	    frame_check == 0xC1FCFFFC87 || //Timeout frame
 8001c78:	4a4c      	ldr	r2, [pc, #304]	; (8001dac <readBurst0x78+0x6a4>)
 8001c7a:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	bf08      	it	eq
 8001c82:	4290      	cmpeq	r0, r2
 8001c84:	d104      	bne.n	8001c90 <readBurst0x78+0x588>
	   frame_check == 0xC1FCFFFC6C) && //Not Expected frame
 8001c86:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001c8a:	2b09      	cmp	r3, #9
 8001c8c:	d800      	bhi.n	8001c90 <readBurst0x78+0x588>
	   nOfTrials<10)
    goto TRANSACTION; //repeat process in case of error
 8001c8e:	e729      	b.n	8001ae4 <readBurst0x78+0x3dc>


    //check CRC for every frame from burst response:
    for(int i=0; i<nofFrames; i++){
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c96:	e06d      	b.n	8001d74 <readBurst0x78+0x66c>
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8001c98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	0011      	movs	r1, r2
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	0a14      	lsrs	r4, r2, #8
 8001cbe:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001cc0:	0613      	lsls	r3, r2, #24
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001cc8:	4623      	mov	r3, r4
 8001cca:	4303      	orrs	r3, r0
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	462b      	mov	r3, r5
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    	    		  ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8001cd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cd8:	789b      	ldrb	r3, [r3, #2]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	f04f 0000 	mov.w	r0, #0
 8001ce4:	f04f 0100 	mov.w	r1, #0
 8001ce8:	0419      	lsls	r1, r3, #16
 8001cea:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001cee:	0410      	lsls	r0, r2, #16
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8001cf0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	4303      	orrs	r3, r0
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	61fb      	str	r3, [r7, #28]
    	    		  ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8001d00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d04:	78db      	ldrb	r3, [r3, #3]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	f04f 0000 	mov.w	r0, #0
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	0219      	lsls	r1, r3, #8
 8001d16:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001d1a:	0210      	lsls	r0, r2, #8
 8001d1c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d20:	4623      	mov	r3, r4
 8001d22:	4303      	orrs	r3, r0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	462b      	mov	r3, r5
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d30:	791b      	ldrb	r3, [r3, #4]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	4629      	mov	r1, r5
 8001d44:	430b      	orrs	r3, r1
 8001d46:	60fb      	str	r3, [r7, #12]
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8001d48:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d4c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    	if(L9963_CrcVer8bitLookupTab(&frame_check)==0 && nOfTrials<10) goto TRANSACTION; //repeat process in case of error
 8001d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 f9ab 	bl	80040b0 <L9963_CrcVer8bitLookupTab>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d104      	bne.n	8001d6a <readBurst0x78+0x662>
 8001d60:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d800      	bhi.n	8001d6a <readBurst0x78+0x662>
 8001d68:	e6bc      	b.n	8001ae4 <readBurst0x78+0x3dc>
    for(int i=0; i<nofFrames; i++){
 8001d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001d74:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8001d78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	db8b      	blt.n	8001c98 <readBurst0x78+0x590>
            .
            .
            frame 18: burst_response_arr[85] --> burst_response_arr[89]
            frame 18 actual data: frame[87],frame[88], first 2 MSB's of burst_response_arr[89]
    */
    for(int i=1;i<=14;i++){
 8001d80:	2301      	movs	r3, #1
 8001d82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d86:	e06e      	b.n	8001e66 <readBurst0x78+0x75e>
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	40000000 	.word	0x40000000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	20000094 	.word	0x20000094
 8001d98:	200000bc 	.word	0x200000bc
 8001d9c:	200002c8 	.word	0x200002c8
 8001da0:	fcfffd08 	.word	0xfcfffd08
 8001da4:	fcfffcde 	.word	0xfcfffcde
 8001da8:	fcfffc87 	.word	0xfcfffc87
 8001dac:	fcfffc6c 	.word	0xfcfffc6c
        VCELL_EN[i]=burst_response_arr[(i-1)*5+2] >> 7;
 8001db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	09db      	lsrs	r3, r3, #7
 8001dc6:	b2d9      	uxtb	r1, r3
 8001dc8:	4a8f      	ldr	r2, [pc, #572]	; (8002008 <readBurst0x78+0x900>)
 8001dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dce:	4413      	add	r3, r2
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	701a      	strb	r2, [r3, #0]

        d_rdy_Vcell[i]=(burst_response_arr[(i-1)*5+2] >> 6) & 1; //&0b00000001, extract only LSB
 8001dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	4a86      	ldr	r2, [pc, #536]	; (800200c <readBurst0x78+0x904>)
 8001df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001df8:	4413      	add	r3, r2
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	701a      	strb	r2, [r3, #0]

        VCell[i]=(((burst_response_arr[(i-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(i-1)*5+3]) << 2
 8001dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e02:	1e5a      	subs	r2, r3, #1
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	f403 517c 	and.w	r1, r3, #16128	; 0x3f00
 8001e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3303      	adds	r3, #3
 8001e26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(i-1)*5+4]>>6);
 8001e30:	b219      	sxth	r1, r3
 8001e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	b299      	uxth	r1, r3
        VCell[i]=(((burst_response_arr[(i-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(i-1)*5+3]) << 2
 8001e52:	4a6f      	ldr	r2, [pc, #444]	; (8002010 <readBurst0x78+0x908>)
 8001e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=1;i<=14;i++){
 8001e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e6a:	2b0e      	cmp	r3, #14
 8001e6c:	dda0      	ble.n	8001db0 <readBurst0x78+0x6a8>
    }

    vsum_batt19_2 = (((burst_response_arr[(15-1)*5+2] << 8) | burst_response_arr[(15-1)*5+3]) << 2) | (burst_response_arr[(15-1)*5+4]>>6);
 8001e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e7c:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001e80:	4313      	orrs	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001e88:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8001e8c:	0992      	lsrs	r2, r2, #6
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4313      	orrs	r3, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <readBurst0x78+0x90c>)
 8001e96:	601a      	str	r2, [r3, #0]

    vsum_batt1_0 = burst_response_arr[(16-1)*5+2] >> 6;
 8001e98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e9c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <readBurst0x78+0x910>)
 8001ea6:	701a      	strb	r2, [r3, #0]
    VBATT_DIV = (((burst_response_arr[(16-1)*5+2] & 0b00111111) << 8 ) | burst_response_arr[(16-1)*5+3]) << 2 | (burst_response_arr[(16-1)*5+4]>>6);
 8001ea8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eac:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eba:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ec8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <readBurst0x78+0x914>)
 8001eda:	801a      	strh	r2, [r3, #0]

    data_ready_vsum = burst_response_arr[(17-1)*5+2] >>7;
 8001edc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ee0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001ee4:	09db      	lsrs	r3, r3, #7
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <readBurst0x78+0x918>)
 8001eea:	701a      	strb	r2, [r3, #0]
    data_ready_v_battdiv = (burst_response_arr[(17-1)*5+2] >> 6) & 1;
 8001eec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ef0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b49      	ldr	r3, [pc, #292]	; (8002024 <readBurst0x78+0x91c>)
 8001f00:	701a      	strb	r2, [r3, #0]
    SOC = (burst_response_arr[(17-1)*5+2] >> 5) & 1;
 8001f02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f06:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <readBurst0x78+0x920>)
 8001f16:	701a      	strb	r2, [r3, #0]
    OVR_LATCH = (burst_response_arr[(17-1)*5+2] >> 4) & 1;
 8001f18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f1c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <readBurst0x78+0x924>)
 8001f2c:	701a      	strb	r2, [r3, #0]
    CONF_CYCLIC_EN = (burst_response_arr[(17-1)*5+2] >> 3) & 1;
 8001f2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <readBurst0x78+0x928>)
 8001f42:	701a      	strb	r2, [r3, #0]
    DUTY_ON = (burst_response_arr[(17-1)*5+2] >> 2) & 1;
 8001f44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f48:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b37      	ldr	r3, [pc, #220]	; (8002034 <readBurst0x78+0x92c>)
 8001f58:	701a      	strb	r2, [r3, #0]
    VSUM_OV = (burst_response_arr[(17-1)*5+2] >> 1) & 1;
 8001f5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f5e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <readBurst0x78+0x930>)
 8001f6e:	701a      	strb	r2, [r3, #0]
    VSUM_UV = burst_response_arr[(17-1)*5+2]  & 1;
 8001f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f74:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <readBurst0x78+0x934>)
 8001f80:	701a      	strb	r2, [r3, #0]
    TimedBalacc = burst_response_arr[(17-1)*5+3] >> 7;
 8001f82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f86:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001f8a:	09db      	lsrs	r3, r3, #7
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <readBurst0x78+0x938>)
 8001f90:	701a      	strb	r2, [r3, #0]
    TimedBalTimer = burst_response_arr[(17-1)*5+3] & 0b01111111;
 8001f92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f96:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <readBurst0x78+0x93c>)
 8001fa2:	701a      	strb	r2, [r3, #0]
    bal_on = burst_response_arr[(17-1)*5+4] >> 7;
 8001fa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <readBurst0x78+0x940>)
 8001fb2:	701a      	strb	r2, [r3, #0]
    eof_bal = (burst_response_arr[(17-1)*5+4] >> 6) & 1;
 8001fb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fbc:	099b      	lsrs	r3, r3, #6
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <readBurst0x78+0x944>)
 8001fc8:	701a      	strb	r2, [r3, #0]

    CUR_INST_calib = (((burst_response_arr[(18-1)*5+2] <<8) | burst_response_arr[(18-1)*5+3]) << 2) | (burst_response_arr[(18-1)*5+4]>>6);
 8001fca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fce:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fd8:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fe4:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8001fe8:	0992      	lsrs	r2, r2, #6
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4313      	orrs	r3, r2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <readBurst0x78+0x948>)
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	46b5      	mov	sp, r6
 8001ff6:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 8001ffa:	bf00      	nop
 8001ffc:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002006:	bf00      	nop
 8002008:	20000194 	.word	0x20000194
 800200c:	20000170 	.word	0x20000170
 8002010:	2000028c 	.word	0x2000028c
 8002014:	200000a0 	.word	0x200000a0
 8002018:	2000014a 	.word	0x2000014a
 800201c:	20000212 	.word	0x20000212
 8002020:	2000015b 	.word	0x2000015b
 8002024:	200001e5 	.word	0x200001e5
 8002028:	200002cc 	.word	0x200002cc
 800202c:	200001e3 	.word	0x200001e3
 8002030:	20000155 	.word	0x20000155
 8002034:	200000b6 	.word	0x200000b6
 8002038:	20000115 	.word	0x20000115
 800203c:	200001af 	.word	0x200001af
 8002040:	2000014f 	.word	0x2000014f
 8002044:	20000114 	.word	0x20000114
 8002048:	200002c7 	.word	0x200002c7
 800204c:	200000b7 	.word	0x200000b7
 8002050:	2000021c 	.word	0x2000021c
 8002054:	00000000 	.word	0x00000000

08002058 <readBurst0x7A>:



void readBurst0x7A (){
 8002058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205c:	b0cb      	sub	sp, #300	; 0x12c
 800205e:	af02      	add	r7, sp, #8
 8002060:	466b      	mov	r3, sp
 8002062:	607b      	str	r3, [r7, #4]
	uint8_t command_data_arr[5]; //initial burst command data to be sent by MCU, 8 bit array form
	uint64_t command_data = 0; //initial burst command data to be sent by MCU
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	uint8_t nofFrames = 13; //number of frames received from burst command
 8002070:	230d      	movs	r3, #13
 8002072:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t data_burst_arr[nofFrames*5]; //dummy data sent by MCU during burst frame receival
 8002076:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	189c      	adds	r4, r3, r2
 8002080:	1e63      	subs	r3, r4, #1
 8002082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002086:	4623      	mov	r3, r4
 8002088:	461a      	mov	r2, r3
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f04f 0000 	mov.w	r0, #0
 8002092:	f04f 0100 	mov.w	r1, #0
 8002096:	00d9      	lsls	r1, r3, #3
 8002098:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800209c:	00d0      	lsls	r0, r2, #3
 800209e:	4623      	mov	r3, r4
 80020a0:	461a      	mov	r2, r3
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	f04f 0000 	mov.w	r0, #0
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020b4:	00d0      	lsls	r0, r2, #3
 80020b6:	4623      	mov	r3, r4
 80020b8:	3307      	adds	r3, #7
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	ebad 0d03 	sub.w	sp, sp, r3
 80020c2:	ab02      	add	r3, sp, #8
 80020c4:	3300      	adds	r3, #0
 80020c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i=0;i<nofFrames*5;i++) data_burst_arr[i]=0; //all zeroes as per manufacturer documentation
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80020d0:	e00b      	b.n	80020ea <readBurst0x7A+0x92>
 80020d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80020d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020da:	441a      	add	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	7013      	strb	r3, [r2, #0]
 80020e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020e4:	3301      	adds	r3, #1
 80020e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80020ea:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	441a      	add	r2, r3
 80020f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020f8:	4293      	cmp	r3, r2
 80020fa:	dbea      	blt.n	80020d2 <readBurst0x7A+0x7a>
	data_burst_arr[nofFrames*5-5]=0b10000010;
 80020fc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	1899      	adds	r1, r3, r2
 8002108:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800210c:	2382      	movs	r3, #130	; 0x82
 800210e:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-4]=0b00000100;
 8002110:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	1f19      	subs	r1, r3, #4
 800211c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002120:	2304      	movs	r3, #4
 8002122:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-3]=0b00000000;
 8002124:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	1ed9      	subs	r1, r3, #3
 8002130:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002134:	2300      	movs	r3, #0
 8002136:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-2]=0b00000000;
 8002138:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	1e99      	subs	r1, r3, #2
 8002144:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002148:	2300      	movs	r3, #0
 800214a:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-1]=0b00010111;
 800214c:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	1e59      	subs	r1, r3, #1
 8002158:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800215c:	2317      	movs	r3, #23
 800215e:	5453      	strb	r3, [r2, r1]
	uint8_t burst_response_arr[nofFrames*5]; // data received by MCU during burst response
 8002160:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	189c      	adds	r4, r3, r2
 800216a:	466b      	mov	r3, sp
 800216c:	461e      	mov	r6, r3
 800216e:	1e63      	subs	r3, r4, #1
 8002170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002174:	4623      	mov	r3, r4
 8002176:	461a      	mov	r2, r3
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	00d9      	lsls	r1, r3, #3
 8002186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800218a:	00d0      	lsls	r0, r2, #3
 800218c:	4623      	mov	r3, r4
 800218e:	461a      	mov	r2, r3
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	f04f 0100 	mov.w	r1, #0
 800219c:	00d9      	lsls	r1, r3, #3
 800219e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a2:	00d0      	lsls	r0, r2, #3
 80021a4:	4623      	mov	r3, r4
 80021a6:	3307      	adds	r3, #7
 80021a8:	08db      	lsrs	r3, r3, #3
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	ebad 0d03 	sub.w	sp, sp, r3
 80021b0:	ab02      	add	r3, sp, #8
 80021b2:	3300      	adds	r3, #0
 80021b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	char PA[2] = "1"; // 0 = MISO answer ; 1 = MOSI command
 80021b8:	2331      	movs	r3, #49	; 0x31
 80021ba:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
    char RW[2] = "0"; // 0 = read ; 1 = write
 80021be:	2330      	movs	r3, #48	; 0x30
 80021c0:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    char DevID[6] = "00001";
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <readBurst0x7A+0x318>)
 80021c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021ce:	6018      	str	r0, [r3, #0]
 80021d0:	3304      	adds	r3, #4
 80021d2:	8019      	strh	r1, [r3, #0]
	char Addr[8] = "1111010"; 	// 0x7A burst command
 80021d4:	4b67      	ldr	r3, [pc, #412]	; (8002374 <readBurst0x7A+0x31c>)
 80021d6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021de:	e882 0003 	stmia.w	r2, {r0, r1}
	char GSW[3] = "00"; // 0x = ok ; 1x = internal failure detected
 80021e2:	4b65      	ldr	r3, [pc, #404]	; (8002378 <readBurst0x7A+0x320>)
 80021e4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	460b      	mov	r3, r1
 80021ec:	8013      	strh	r3, [r2, #0]
 80021ee:	3202      	adds	r2, #2
 80021f0:	0c0b      	lsrs	r3, r1, #16
 80021f2:	7013      	strb	r3, [r2, #0]
	char data[19] = "111111111111111111";
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <readBurst0x7A+0x324>)
 80021f6:	f107 0590 	add.w	r5, r7, #144	; 0x90
 80021fa:	461c      	mov	r4, r3
 80021fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	802b      	strh	r3, [r5, #0]
 8002206:	3502      	adds	r5, #2
 8002208:	0c13      	lsrs	r3, r2, #16
 800220a:	702b      	strb	r3, [r5, #0]
	char CRC_code[7] = "000000";
 800220c:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <readBurst0x7A+0x328>)
 800220e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002212:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002216:	6010      	str	r0, [r2, #0]
 8002218:	3204      	adds	r2, #4
 800221a:	8011      	strh	r1, [r2, #0]
 800221c:	3202      	adds	r2, #2
 800221e:	0c0b      	lsrs	r3, r1, #16
 8002220:	7013      	strb	r3, [r2, #0]
	char frame[41];

	strcpy(frame, PA);
 8002222:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002226:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fafa 	bl	8005826 <strcpy>
	strcat(frame,RW);
 8002232:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8002236:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fae3 	bl	8005808 <strcat>
	strcat(frame,DevID);
 8002242:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002246:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fadb 	bl	8005808 <strcat>
	strcat(frame,Addr);
 8002252:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002256:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fad3 	bl	8005808 <strcat>
	strcat(frame,GSW);
 8002262:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002266:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f003 facb 	bl	8005808 <strcat>
	strcat(frame,data);
 8002272:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002276:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fac3 	bl	8005808 <strcat>
	strcat(frame,CRC_code);
 8002282:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002286:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f003 fabb 	bl	8005808 <strcat>

    //convert char array to 8 bit number array:
    for (int i=4;i>=0;i--){
 8002292:	2304      	movs	r3, #4
 8002294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002298:	e05e      	b.n	8002358 <readBurst0x7A+0x300>
    	command_data_arr[i]=0;
 800229a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800229e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a2:	441a      	add	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	7013      	strb	r3, [r2, #0]
    	for(int j=7;j>=0;j--){
 80022a8:	2307      	movs	r3, #7
 80022aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80022ae:	e04a      	b.n	8002346 <readBurst0x7A+0x2ee>
    		command_data_arr[i]=command_data_arr[i] + (frame[i*8+j]-48)*pow(2,7-j);
 80022b0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80022b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022b8:	4413      	add	r3, r2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f8e5 	bl	800048c <__aeabi_i2d>
 80022c2:	4680      	mov	r8, r0
 80022c4:	4689      	mov	r9, r1
 80022c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ca:	00da      	lsls	r2, r3, #3
 80022cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80022d0:	4413      	add	r3, r2
 80022d2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80022d6:	4413      	add	r3, r2
 80022d8:	f813 3cc4 	ldrb.w	r3, [r3, #-196]
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f8d4 	bl	800048c <__aeabi_i2d>
 80022e4:	4604      	mov	r4, r0
 80022e6:	460d      	mov	r5, r1
 80022e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80022ec:	f1c3 0307 	rsb	r3, r3, #7
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f8cb 	bl	800048c <__aeabi_i2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	ec43 2b11 	vmov	d1, r2, r3
 80022fe:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8002368 <readBurst0x7A+0x310>
 8002302:	f003 fa99 	bl	8005838 <pow>
 8002306:	ec53 2b10 	vmov	r2, r3, d0
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fe f927 	bl	8000560 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4640      	mov	r0, r8
 8002318:	4649      	mov	r1, r9
 800231a:	f7fd ff6b 	bl	80001f4 <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fbcb 	bl	8000ac0 <__aeabi_d2uiz>
 800232a:	4603      	mov	r3, r0
 800232c:	b2d9      	uxtb	r1, r3
 800232e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8002332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002336:	441a      	add	r2, r3
 8002338:	460b      	mov	r3, r1
 800233a:	7013      	strb	r3, [r2, #0]
    	for(int j=7;j>=0;j--){
 800233c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002340:	3b01      	subs	r3, #1
 8002342:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	dab0      	bge.n	80022b0 <readBurst0x7A+0x258>
    for (int i=4;i>=0;i--){
 800234e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002352:	3b01      	subs	r3, #1
 8002354:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235c:	2b00      	cmp	r3, #0
 800235e:	da9c      	bge.n	800229a <readBurst0x7A+0x242>
    	}
    }
    //convert char array to number:
    for (int i=39;i>=0;i--){
 8002360:	2327      	movs	r3, #39	; 0x27
 8002362:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002366:	e04b      	b.n	8002400 <readBurst0x7A+0x3a8>
 8002368:	00000000 	.word	0x00000000
 800236c:	40000000 	.word	0x40000000
 8002370:	0800680c 	.word	0x0800680c
 8002374:	0800687c 	.word	0x0800687c
 8002378:	080067ec 	.word	0x080067ec
 800237c:	08006868 	.word	0x08006868
 8002380:	08006840 	.word	0x08006840
    	command_data = command_data + (frame[i]-48)*pow(2,39-i);
 8002384:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe f8b2 	bl	80004f4 <__aeabi_ul2d>
 8002390:	4680      	mov	r8, r0
 8002392:	4689      	mov	r9, r1
 8002394:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	3b30      	subs	r3, #48	; 0x30
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f872 	bl	800048c <__aeabi_i2d>
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
 80023ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023b0:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f869 	bl	800048c <__aeabi_i2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	ec43 2b11 	vmov	d1, r2, r3
 80023c2:	ed9f 0bc5 	vldr	d0, [pc, #788]	; 80026d8 <readBurst0x7A+0x680>
 80023c6:	f003 fa37 	bl	8005838 <pow>
 80023ca:	ec53 2b10 	vmov	r2, r3, d0
 80023ce:	4620      	mov	r0, r4
 80023d0:	4629      	mov	r1, r5
 80023d2:	f7fe f8c5 	bl	8000560 <__aeabi_dmul>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4640      	mov	r0, r8
 80023dc:	4649      	mov	r1, r9
 80023de:	f7fd ff09 	bl	80001f4 <__adddf3>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fba1 	bl	8000b30 <__aeabi_d2ulz>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
    for (int i=39;i>=0;i--){
 80023f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023fa:	3b01      	subs	r3, #1
 80023fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002404:	2b00      	cmp	r3, #0
 8002406:	dabd      	bge.n	8002384 <readBurst0x7A+0x32c>
    }

    L9963_CrcCalc8bitLookupTab(&command_data); //compute CRC for command
 8002408:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800240c:	4618      	mov	r0, r3
 800240e:	f001 fdcd 	bl	8003fac <L9963_CrcCalc8bitLookupTab>
    command_data_arr[4]=command_data_arr[4] | (uint8_t)(command_data & 0b00111111);
 8002412:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8002416:	b259      	sxtb	r1, r3
 8002418:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800241c:	b253      	sxtb	r3, r2
 800241e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002422:	b25b      	sxtb	r3, r3
 8002424:	430b      	orrs	r3, r1
 8002426:	b25b      	sxtb	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    uint8_t nOfTrials=0;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    TRANSACTION: //for goto instruction in case there is a problem with sent/received data
	nOfTrials +=1;
 8002434:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8002438:	3301      	adds	r3, #1
 800243a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002444:	48a6      	ldr	r0, [pc, #664]	; (80026e0 <readBurst0x7A+0x688>)
 8002446:	f002 fa7b 	bl	8004940 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, command_data_arr, response_arr, 5, HAL_MAX_DELAY);
 800244a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2305      	movs	r3, #5
 8002456:	4aa3      	ldr	r2, [pc, #652]	; (80026e4 <readBurst0x7A+0x68c>)
 8002458:	48a3      	ldr	r0, [pc, #652]	; (80026e8 <readBurst0x7A+0x690>)
 800245a:	f002 ff28 	bl	80052ae <HAL_SPI_TransmitReceive>
 800245e:	4603      	mov	r3, r0
 8002460:	4aa2      	ldr	r2, [pc, #648]	; (80026ec <readBurst0x7A+0x694>)
 8002462:	7013      	strb	r3, [r2, #0]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 8002464:	bf00      	nop
 8002466:	48a0      	ldr	r0, [pc, #640]	; (80026e8 <readBurst0x7A+0x690>)
 8002468:	f003 f8c3 	bl	80055f2 <HAL_SPI_GetState>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d1f9      	bne.n	8002466 <readBurst0x7A+0x40e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002478:	4899      	ldr	r0, [pc, #612]	; (80026e0 <readBurst0x7A+0x688>)
 800247a:	f002 fa61 	bl	8004940 <HAL_GPIO_WritePin>

    HAL_Delay(4);
 800247e:	2004      	movs	r0, #4
 8002480:	f001 ffd0 	bl	8004424 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248a:	4895      	ldr	r0, [pc, #596]	; (80026e0 <readBurst0x7A+0x688>)
 800248c:	f002 fa58 	bl	8004940 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, data_burst_arr, burst_response_arr, nofFrames*5, HAL_MAX_DELAY);
 8002490:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002494:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8002498:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	460a      	mov	r2, r1
 80024b2:	4601      	mov	r1, r0
 80024b4:	488c      	ldr	r0, [pc, #560]	; (80026e8 <readBurst0x7A+0x690>)
 80024b6:	f002 fefa 	bl	80052ae <HAL_SPI_TransmitReceive>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a8b      	ldr	r2, [pc, #556]	; (80026ec <readBurst0x7A+0x694>)
 80024be:	7013      	strb	r3, [r2, #0]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 80024c0:	bf00      	nop
 80024c2:	4889      	ldr	r0, [pc, #548]	; (80026e8 <readBurst0x7A+0x690>)
 80024c4:	f003 f895 	bl	80055f2 <HAL_SPI_GetState>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d1f9      	bne.n	80024c2 <readBurst0x7A+0x46a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d4:	4882      	ldr	r0, [pc, #520]	; (80026e0 <readBurst0x7A+0x688>)
 80024d6:	f002 fa33 	bl	8004940 <HAL_GPIO_WritePin>

    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 80024da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	0011      	movs	r1, r2
 80024f0:	2000      	movs	r0, #0
 80024f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024f6:	785b      	ldrb	r3, [r3, #1]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	0a14      	lsrs	r4, r2, #8
 8002500:	64fc      	str	r4, [r7, #76]	; 0x4c
 8002502:	0613      	lsls	r3, r2, #24
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
 8002506:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800250a:	4623      	mov	r3, r4
 800250c:	4303      	orrs	r3, r0
 800250e:	643b      	str	r3, [r7, #64]	; 0x40
 8002510:	462b      	mov	r3, r5
 8002512:	430b      	orrs	r3, r1
 8002514:	647b      	str	r3, [r7, #68]	; 0x44
    					   ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8002516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800251a:	789b      	ldrb	r3, [r3, #2]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0419      	lsls	r1, r3, #16
 800252c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002530:	0410      	lsls	r0, r2, #16
    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8002532:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002536:	4623      	mov	r3, r4
 8002538:	4303      	orrs	r3, r0
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
 800253c:	462b      	mov	r3, r5
 800253e:	430b      	orrs	r3, r1
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
    					   ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8002542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002546:	78db      	ldrb	r3, [r3, #3]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0219      	lsls	r1, r3, #8
 8002558:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800255c:	0210      	lsls	r0, r2, #8
 800255e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002562:	4623      	mov	r3, r4
 8002564:	ea43 0a00 	orr.w	sl, r3, r0
 8002568:	462b      	mov	r3, r5
 800256a:	ea43 0b01 	orr.w	fp, r3, r1
 800256e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002572:	791b      	ldrb	r3, [r3, #4]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4a 0102 	orr.w	r1, sl, r2
 800257e:	6339      	str	r1, [r7, #48]	; 0x30
 8002580:	ea4b 0303 	orr.w	r3, fp, r3
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8002586:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800258a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    //check first frame (for special frames - documentation 4.2.4.4)
    if((frame_check == 0xC1FCFFFD08 || //CRC error frame
 800258e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002592:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <readBurst0x7A+0x698>)
 8002594:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 8002598:	4299      	cmp	r1, r3
 800259a:	bf08      	it	eq
 800259c:	4290      	cmpeq	r0, r2
 800259e:	d01a      	beq.n	80025d6 <readBurst0x7A+0x57e>
        frame_check == 0xC1FCFFFCDE || //Busy frame
 80025a0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    if((frame_check == 0xC1FCFFFD08 || //CRC error frame
 80025a4:	4a53      	ldr	r2, [pc, #332]	; (80026f4 <readBurst0x7A+0x69c>)
 80025a6:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 80025aa:	4299      	cmp	r1, r3
 80025ac:	bf08      	it	eq
 80025ae:	4290      	cmpeq	r0, r2
 80025b0:	d011      	beq.n	80025d6 <readBurst0x7A+0x57e>
	    frame_check == 0xC1FCFFFC87 || //Timeout frame
 80025b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
        frame_check == 0xC1FCFFFCDE || //Busy frame
 80025b6:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <readBurst0x7A+0x6a0>)
 80025b8:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 80025bc:	4299      	cmp	r1, r3
 80025be:	bf08      	it	eq
 80025c0:	4290      	cmpeq	r0, r2
 80025c2:	d008      	beq.n	80025d6 <readBurst0x7A+0x57e>
	    frame_check == 0xC1FCFFFC6C) && //Not Expected frame
 80025c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
	    frame_check == 0xC1FCFFFC87 || //Timeout frame
 80025c8:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <readBurst0x7A+0x6a4>)
 80025ca:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 80025ce:	4299      	cmp	r1, r3
 80025d0:	bf08      	it	eq
 80025d2:	4290      	cmpeq	r0, r2
 80025d4:	d104      	bne.n	80025e0 <readBurst0x7A+0x588>
	    frame_check == 0xC1FCFFFC6C) && //Not Expected frame
 80025d6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80025da:	2b09      	cmp	r3, #9
 80025dc:	d800      	bhi.n	80025e0 <readBurst0x7A+0x588>
	   nOfTrials<10)
    goto TRANSACTION; //repeat process in case of error
 80025de:	e729      	b.n	8002434 <readBurst0x7A+0x3dc>


    //check CRC for every frame from burst response:
    for(int i=0; i<nofFrames; i++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80025e6:	e06d      	b.n	80026c4 <readBurst0x7A+0x66c>
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 80025e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0011      	movs	r1, r2
 80025fe:	2000      	movs	r0, #0
 8002600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	0a14      	lsrs	r4, r2, #8
 800260e:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002610:	0613      	lsls	r3, r2, #24
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
 8002614:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002618:	4623      	mov	r3, r4
 800261a:	4303      	orrs	r3, r0
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	462b      	mov	r3, r5
 8002620:	430b      	orrs	r3, r1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    	    		  ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8002624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002628:	789b      	ldrb	r3, [r3, #2]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	0419      	lsls	r1, r3, #16
 800263a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800263e:	0410      	lsls	r0, r2, #16
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8002640:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002644:	4623      	mov	r3, r4
 8002646:	4303      	orrs	r3, r0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	462b      	mov	r3, r5
 800264c:	430b      	orrs	r3, r1
 800264e:	61fb      	str	r3, [r7, #28]
    	    		  ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8002650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002654:	78db      	ldrb	r3, [r3, #3]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f04f 0000 	mov.w	r0, #0
 8002660:	f04f 0100 	mov.w	r1, #0
 8002664:	0219      	lsls	r1, r3, #8
 8002666:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800266a:	0210      	lsls	r0, r2, #8
 800266c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002670:	4623      	mov	r3, r4
 8002672:	4303      	orrs	r3, r0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	462b      	mov	r3, r5
 8002678:	430b      	orrs	r3, r1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800268c:	4621      	mov	r1, r4
 800268e:	4311      	orrs	r1, r2
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4629      	mov	r1, r5
 8002694:	430b      	orrs	r3, r1
 8002696:	60fb      	str	r3, [r7, #12]
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8002698:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800269c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    	if(L9963_CrcVer8bitLookupTab(&frame_check)==0 && nOfTrials<10) goto TRANSACTION; //repeat process in case of error
 80026a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 fd03 	bl	80040b0 <L9963_CrcVer8bitLookupTab>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d104      	bne.n	80026ba <readBurst0x7A+0x662>
 80026b0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80026b4:	2b09      	cmp	r3, #9
 80026b6:	d800      	bhi.n	80026ba <readBurst0x7A+0x662>
 80026b8:	e6bc      	b.n	8002434 <readBurst0x7A+0x3dc>
    for(int i=0; i<nofFrames; i++){
 80026ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026be:	3301      	adds	r3, #1
 80026c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026c4:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80026c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026cc:	4293      	cmp	r3, r2
 80026ce:	db8b      	blt.n	80025e8 <readBurst0x7A+0x590>
            .
            .
            frame 18: burst_response_arr[85] --> burst_response_arr[89]
            frame 18 actual data: frame[87],frame[88], first 2 MSB's of burst_response_arr[89]
    */
    for (int i = 1; i <= 2; i++) {
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80026d6:	e053      	b.n	8002780 <readBurst0x7A+0x728>
 80026d8:	00000000 	.word	0x00000000
 80026dc:	40000000 	.word	0x40000000
 80026e0:	40020400 	.word	0x40020400
 80026e4:	20000094 	.word	0x20000094
 80026e8:	200000bc 	.word	0x200000bc
 80026ec:	200002c8 	.word	0x200002c8
 80026f0:	fcfffd08 	.word	0xfcfffd08
 80026f4:	fcfffcde 	.word	0xfcfffcde
 80026f8:	fcfffc87 	.word	0xfcfffc87
 80026fc:	fcfffc6c 	.word	0xfcfffc6c
        BAL_OPEN[i] = burst_response_arr[14] >> (8 - i) & 1;
 8002700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002704:	7b9b      	ldrb	r3, [r3, #14]
 8002706:	461a      	mov	r2, r3
 8002708:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800270c:	f1c3 0308 	rsb	r3, r3, #8
 8002710:	fa42 f303 	asr.w	r3, r2, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2d9      	uxtb	r1, r3
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <readBurst0x7A+0x800>)
 800271e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002722:	4413      	add	r3, r2
 8002724:	460a      	mov	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
        BAL_SHORT[i] = burst_response_arr[19] >> (8 - i) & 1;
 8002728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800272c:	7cdb      	ldrb	r3, [r3, #19]
 800272e:	461a      	mov	r2, r3
 8002730:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002734:	f1c3 0308 	rsb	r3, r3, #8
 8002738:	fa42 f303 	asr.w	r3, r2, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	b2d9      	uxtb	r1, r3
 8002744:	4a45      	ldr	r2, [pc, #276]	; (800285c <readBurst0x7A+0x804>)
 8002746:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800274a:	4413      	add	r3, r2
 800274c:	460a      	mov	r2, r1
 800274e:	701a      	strb	r2, [r3, #0]
        CELL_OPEN[i - 1] = burst_response_arr[24] >> (8 - i) & 1;
 8002750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002754:	7e1b      	ldrb	r3, [r3, #24]
 8002756:	461a      	mov	r2, r3
 8002758:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800275c:	f1c3 0308 	rsb	r3, r3, #8
 8002760:	fa42 f303 	asr.w	r3, r2, r3
 8002764:	b2da      	uxtb	r2, r3
 8002766:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800276a:	3b01      	subs	r3, #1
 800276c:	f002 0201 	and.w	r2, r2, #1
 8002770:	b2d1      	uxtb	r1, r2
 8002772:	4a3b      	ldr	r2, [pc, #236]	; (8002860 <readBurst0x7A+0x808>)
 8002774:	54d1      	strb	r1, [r2, r3]
    for (int i = 1; i <= 2; i++) {
 8002776:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800277a:	3301      	adds	r3, #1
 800277c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002780:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002784:	2b02      	cmp	r3, #2
 8002786:	ddbb      	ble.n	8002700 <readBurst0x7A+0x6a8>
    }

    for (int i = 3; i <= 10; i++) {
 8002788:	2303      	movs	r3, #3
 800278a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800278e:	e052      	b.n	8002836 <readBurst0x7A+0x7de>
        BAL_OPEN[i] = burst_response_arr[13] >> (i - 3) & 1;
 8002790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002794:	7b5b      	ldrb	r3, [r3, #13]
 8002796:	461a      	mov	r2, r3
 8002798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800279c:	3b03      	subs	r3, #3
 800279e:	fa42 f303 	asr.w	r3, r2, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	b2d9      	uxtb	r1, r3
 80027aa:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <readBurst0x7A+0x800>)
 80027ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b0:	4413      	add	r3, r2
 80027b2:	460a      	mov	r2, r1
 80027b4:	701a      	strb	r2, [r3, #0]
        BAL_SHORT[i] = burst_response_arr[18] >> (i - 3) & 1;
 80027b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ba:	7c9b      	ldrb	r3, [r3, #18]
 80027bc:	461a      	mov	r2, r3
 80027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c2:	3b03      	subs	r3, #3
 80027c4:	fa42 f303 	asr.w	r3, r2, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	b2d9      	uxtb	r1, r3
 80027d0:	4a22      	ldr	r2, [pc, #136]	; (800285c <readBurst0x7A+0x804>)
 80027d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d6:	4413      	add	r3, r2
 80027d8:	460a      	mov	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
        CELL_OPEN[i - 1] = burst_response_arr[23] >> (i - 3) & 1;
 80027dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027e0:	7ddb      	ldrb	r3, [r3, #23]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e8:	3b03      	subs	r3, #3
 80027ea:	fa42 f303 	asr.w	r3, r2, r3
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f4:	3b01      	subs	r3, #1
 80027f6:	f002 0201 	and.w	r2, r2, #1
 80027fa:	b2d1      	uxtb	r1, r2
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <readBurst0x7A+0x808>)
 80027fe:	54d1      	strb	r1, [r2, r3]
        if (i > 5)
 8002800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002804:	2b05      	cmp	r3, #5
 8002806:	dd11      	ble.n	800282c <readBurst0x7A+0x7d4>
            GPI_fastchg_OT[i - 2] = burst_response_arr[8] >> (i - 3) & 1;
 8002808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800280c:	7a1b      	ldrb	r3, [r3, #8]
 800280e:	461a      	mov	r2, r3
 8002810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002814:	3b03      	subs	r3, #3
 8002816:	fa42 f303 	asr.w	r3, r2, r3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002820:	3b02      	subs	r3, #2
 8002822:	f002 0201 	and.w	r2, r2, #1
 8002826:	b2d1      	uxtb	r1, r2
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <readBurst0x7A+0x80c>)
 800282a:	54d1      	strb	r1, [r2, r3]
    for (int i = 3; i <= 10; i++) {
 800282c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002830:	3301      	adds	r3, #1
 8002832:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800283a:	2b0a      	cmp	r3, #10
 800283c:	dda8      	ble.n	8002790 <readBurst0x7A+0x738>
    }

    GPI_fastchg_OT[9] = burst_response_arr[7] & 1;
 800283e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002842:	79db      	ldrb	r3, [r3, #7]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <readBurst0x7A+0x80c>)
 800284c:	725a      	strb	r2, [r3, #9]

    for (int i = 11; i <= 14; i++) {
 800284e:	230b      	movs	r3, #11
 8002850:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002854:	e045      	b.n	80028e2 <readBurst0x7A+0x88a>
 8002856:	bf00      	nop
 8002858:	20000184 	.word	0x20000184
 800285c:	20000138 	.word	0x20000138
 8002860:	2000011c 	.word	0x2000011c
 8002864:	200001e8 	.word	0x200001e8
        BAL_OPEN[i] = burst_response_arr[12] >> (i - 11) & 1;
 8002868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800286c:	7b1b      	ldrb	r3, [r3, #12]
 800286e:	461a      	mov	r2, r3
 8002870:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002874:	3b0b      	subs	r3, #11
 8002876:	fa42 f303 	asr.w	r3, r2, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	b2d9      	uxtb	r1, r3
 8002882:	4ab8      	ldr	r2, [pc, #736]	; (8002b64 <readBurst0x7A+0xb0c>)
 8002884:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002888:	4413      	add	r3, r2
 800288a:	460a      	mov	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
        BAL_SHORT[i] = burst_response_arr[17] >> (i - 11) & 1;
 800288e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002892:	7c5b      	ldrb	r3, [r3, #17]
 8002894:	461a      	mov	r2, r3
 8002896:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800289a:	3b0b      	subs	r3, #11
 800289c:	fa42 f303 	asr.w	r3, r2, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	b2d9      	uxtb	r1, r3
 80028a8:	4aaf      	ldr	r2, [pc, #700]	; (8002b68 <readBurst0x7A+0xb10>)
 80028aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80028ae:	4413      	add	r3, r2
 80028b0:	460a      	mov	r2, r1
 80028b2:	701a      	strb	r2, [r3, #0]
        CELL_OPEN[i - 1] = burst_response_arr[22] >> (i - 11) & 1;
 80028b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028b8:	7d9b      	ldrb	r3, [r3, #22]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80028c0:	3b0b      	subs	r3, #11
 80028c2:	fa42 f303 	asr.w	r3, r2, r3
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80028cc:	3b01      	subs	r3, #1
 80028ce:	f002 0201 	and.w	r2, r2, #1
 80028d2:	b2d1      	uxtb	r1, r2
 80028d4:	4aa5      	ldr	r2, [pc, #660]	; (8002b6c <readBurst0x7A+0xb14>)
 80028d6:	54d1      	strb	r1, [r2, r3]
    for (int i = 11; i <= 14; i++) {
 80028d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80028dc:	3301      	adds	r3, #1
 80028de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80028e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80028e6:	2b0e      	cmp	r3, #14
 80028e8:	ddbe      	ble.n	8002868 <readBurst0x7A+0x810>
    }

    CELL_OPEN[14] = burst_response_arr[22] >> 4 & 1;
 80028ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028ee:	7d9b      	ldrb	r3, [r3, #22]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b9c      	ldr	r3, [pc, #624]	; (8002b6c <readBurst0x7A+0xb14>)
 80028fc:	739a      	strb	r2, [r3, #14]

    OVR_LATCH = burst_response_arr[2] >> 7 & 1;
 80028fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002902:	789b      	ldrb	r3, [r3, #2]
 8002904:	09db      	lsrs	r3, r3, #7
 8002906:	b2da      	uxtb	r2, r3
 8002908:	4b99      	ldr	r3, [pc, #612]	; (8002b70 <readBurst0x7A+0xb18>)
 800290a:	701a      	strb	r2, [r3, #0]
    TCYCLE_OVFm = burst_response_arr[2] >> 6 & 1;
 800290c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002910:	789b      	ldrb	r3, [r3, #2]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b95      	ldr	r3, [pc, #596]	; (8002b74 <readBurst0x7A+0xb1c>)
 800291e:	701a      	strb	r2, [r3, #0]
    sense_plus_open = burst_response_arr[2] >> 5 & 1;
 8002920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002924:	789b      	ldrb	r3, [r3, #2]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <readBurst0x7A+0xb20>)
 8002932:	701a      	strb	r2, [r3, #0]
    sense_minus_open = burst_response_arr[2] >> 4 & 1;
 8002934:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <readBurst0x7A+0xb24>)
 8002946:	701a      	strb	r2, [r3, #0]
    Otchip = burst_response_arr[2] >> 3 & 1;
 8002948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800294c:	789b      	ldrb	r3, [r3, #2]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	b2da      	uxtb	r2, r3
 8002958:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <readBurst0x7A+0xb28>)
 800295a:	701a      	strb	r2, [r3, #0]
    VANA_OV = burst_response_arr[2] >> 2 & 1;
 800295c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002960:	789b      	ldrb	r3, [r3, #2]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <readBurst0x7A+0xb2c>)
 800296e:	701a      	strb	r2, [r3, #0]
    VDIG_OV = burst_response_arr[2] >> 1 & 1;
 8002970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002974:	789b      	ldrb	r3, [r3, #2]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <readBurst0x7A+0xb30>)
 8002982:	701a      	strb	r2, [r3, #0]
    VTREF_UV = burst_response_arr[2] & 1;
 8002984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002988:	789b      	ldrb	r3, [r3, #2]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b7e      	ldr	r3, [pc, #504]	; (8002b8c <readBurst0x7A+0xb34>)
 8002992:	701a      	strb	r2, [r3, #0]
    VTREF_OV = burst_response_arr[3] >> 7 & 1;
 8002994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002998:	78db      	ldrb	r3, [r3, #3]
 800299a:	09db      	lsrs	r3, r3, #7
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <readBurst0x7A+0xb38>)
 80029a0:	701a      	strb	r2, [r3, #0]
    VREG_UV = burst_response_arr[3] >> 6 & 1;
 80029a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029a6:	78db      	ldrb	r3, [r3, #3]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b78      	ldr	r3, [pc, #480]	; (8002b94 <readBurst0x7A+0xb3c>)
 80029b4:	701a      	strb	r2, [r3, #0]
    VREG_OV = burst_response_arr[3] >> 5 & 1;
 80029b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ba:	78db      	ldrb	r3, [r3, #3]
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b74      	ldr	r3, [pc, #464]	; (8002b98 <readBurst0x7A+0xb40>)
 80029c8:	701a      	strb	r2, [r3, #0]
    VCOM_OV = burst_response_arr[3] >> 4 & 1;
 80029ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ce:	78db      	ldrb	r3, [r3, #3]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <readBurst0x7A+0xb44>)
 80029dc:	701a      	strb	r2, [r3, #0]
    VCOM_UV = burst_response_arr[3] >> 3 & 1;
 80029de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029e2:	78db      	ldrb	r3, [r3, #3]
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <readBurst0x7A+0xb48>)
 80029f0:	701a      	strb	r2, [r3, #0]
    wu_gpio7 = burst_response_arr[3] >> 2 & 1;
 80029f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029f6:	78db      	ldrb	r3, [r3, #3]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <readBurst0x7A+0xb4c>)
 8002a04:	701a      	strb	r2, [r3, #0]
    wu_spi = burst_response_arr[3] >> 1 & 1;
 8002a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a0a:	78db      	ldrb	r3, [r3, #3]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <readBurst0x7A+0xb50>)
 8002a18:	701a      	strb	r2, [r3, #0]
    wu_isoline = burst_response_arr[3] & 1;
 8002a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b61      	ldr	r3, [pc, #388]	; (8002bac <readBurst0x7A+0xb54>)
 8002a28:	701a      	strb	r2, [r3, #0]
    wu_faulth = burst_response_arr[4] >> 6 & 1;
 8002a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	; (8002bb0 <readBurst0x7A+0xb58>)
 8002a3c:	701a      	strb	r2, [r3, #0]
    wu_cyc_wup = burst_response_arr[4] >> 7 & 1;
 8002a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	09db      	lsrs	r3, r3, #7
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <readBurst0x7A+0xb5c>)
 8002a4a:	701a      	strb	r2, [r3, #0]


    loss_agnd = burst_response_arr[7] >> 7 & 1;
 8002a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a50:	79db      	ldrb	r3, [r3, #7]
 8002a52:	09db      	lsrs	r3, r3, #7
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b58      	ldr	r3, [pc, #352]	; (8002bb8 <readBurst0x7A+0xb60>)
 8002a58:	701a      	strb	r2, [r3, #0]
    loss_dgnd = burst_response_arr[7] >> 6 & 1;
 8002a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a5e:	79db      	ldrb	r3, [r3, #7]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <readBurst0x7A+0xb64>)
 8002a6c:	701a      	strb	r2, [r3, #0]
    loss_cgnd = burst_response_arr[7] >> 5 & 1;
 8002a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a72:	79db      	ldrb	r3, [r3, #7]
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <readBurst0x7A+0xb68>)
 8002a80:	701a      	strb	r2, [r3, #0]
    loss_gndref = burst_response_arr[7] >> 4 & 1;
 8002a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a86:	79db      	ldrb	r3, [r3, #7]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <readBurst0x7A+0xb6c>)
 8002a94:	701a      	strb	r2, [r3, #0]
    TrimmCalOk = burst_response_arr[7] >> 3 & 1;
 8002a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a9a:	79db      	ldrb	r3, [r3, #7]
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <readBurst0x7A+0xb70>)
 8002aa8:	701a      	strb	r2, [r3, #0]
    CoCouOvF = burst_response_arr[7] >> 2 & 1;
 8002aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aae:	79db      	ldrb	r3, [r3, #7]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <readBurst0x7A+0xb74>)
 8002abc:	701a      	strb	r2, [r3, #0]
    EoBtimeerror = burst_response_arr[7] >> 1 & 1;
 8002abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ac2:	79db      	ldrb	r3, [r3, #7]
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <readBurst0x7A+0xb78>)
 8002ad0:	701a      	strb	r2, [r3, #0]
    GPI_OPEN[9] = burst_response_arr[(2 - 1) * 5 + 3] >> 1 & 1;
 8002ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad6:	7a1b      	ldrb	r3, [r3, #8]
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002ae4:	725a      	strb	r2, [r3, #9]
    GPI_OPEN[8] = burst_response_arr[(2 - 1) * 5 + 3] & 1;
 8002ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aea:	7a1b      	ldrb	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002af4:	721a      	strb	r2, [r3, #8]
    GPI_OPEN[7] = burst_response_arr[(2 - 1) * 5 + 4] >> 6 & 1;
 8002af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002afa:	7a5b      	ldrb	r3, [r3, #9]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002b08:	71da      	strb	r2, [r3, #7]
    GPI_OPEN[6] = burst_response_arr[(2 - 1) * 5 + 4] >> 7 & 1;
 8002b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b0e:	7a5b      	ldrb	r3, [r3, #9]
 8002b10:	09db      	lsrs	r3, r3, #7
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002b16:	719a      	strb	r2, [r3, #6]

    GPI_OPEN[5] = burst_response_arr[12] >> 7 & 1;
 8002b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b1c:	7b1b      	ldrb	r3, [r3, #12]
 8002b1e:	09db      	lsrs	r3, r3, #7
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002b24:	715a      	strb	r2, [r3, #5]
    GPI_OPEN[4] = burst_response_arr[12] >> 6 & 1;
 8002b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b2a:	7b1b      	ldrb	r3, [r3, #12]
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002b38:	711a      	strb	r2, [r3, #4]
    GPI_OPEN[3] = burst_response_arr[12] >> 5 & 1;
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <readBurst0x7A+0xb7c>)
 8002b4c:	70da      	strb	r2, [r3, #3]
    EEPROM_DWNLD_DONE = burst_response_arr[12] >> 4 & 1;
 8002b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b52:	7b1b      	ldrb	r3, [r3, #12]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <readBurst0x7A+0xb80>)
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e03b      	b.n	8002bdc <readBurst0x7A+0xb84>
 8002b64:	20000184 	.word	0x20000184
 8002b68:	20000138 	.word	0x20000138
 8002b6c:	2000011c 	.word	0x2000011c
 8002b70:	200001e3 	.word	0x200001e3
 8002b74:	2000020e 	.word	0x2000020e
 8002b78:	20000148 	.word	0x20000148
 8002b7c:	2000014b 	.word	0x2000014b
 8002b80:	20000193 	.word	0x20000193
 8002b84:	2000014e 	.word	0x2000014e
 8002b88:	200000b4 	.word	0x200000b4
 8002b8c:	20000133 	.word	0x20000133
 8002b90:	200002aa 	.word	0x200002aa
 8002b94:	20000134 	.word	0x20000134
 8002b98:	200001e4 	.word	0x200001e4
 8002b9c:	20000210 	.word	0x20000210
 8002ba0:	20000289 	.word	0x20000289
 8002ba4:	20000132 	.word	0x20000132
 8002ba8:	200002ab 	.word	0x200002ab
 8002bac:	200000b9 	.word	0x200000b9
 8002bb0:	200001f8 	.word	0x200001f8
 8002bb4:	200001d1 	.word	0x200001d1
 8002bb8:	200000a5 	.word	0x200000a5
 8002bbc:	200001f9 	.word	0x200001f9
 8002bc0:	20000215 	.word	0x20000215
 8002bc4:	200000a6 	.word	0x200000a6
 8002bc8:	20000214 	.word	0x20000214
 8002bcc:	200001f2 	.word	0x200001f2
 8002bd0:	20000147 	.word	0x20000147
 8002bd4:	200002ac 	.word	0x200002ac
 8002bd8:	2000021a 	.word	0x2000021a

    VBAT_COMP_BIST_FAIL = burst_response_arr[(4 - 1) * 5 + 2] >> 7 & 1;
 8002bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002be0:	7c5b      	ldrb	r3, [r3, #17]
 8002be2:	09db      	lsrs	r3, r3, #7
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <readBurst0x7A+0xdb0>)
 8002be8:	701a      	strb	r2, [r3, #0]
    VREG_COMP_BIST_FAIL = burst_response_arr[(4 - 1) * 5 + 2] >> 6 & 1;
 8002bea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bee:	7c5b      	ldrb	r3, [r3, #17]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <readBurst0x7A+0xdb4>)
 8002bfc:	701a      	strb	r2, [r3, #0]
    VCOM_COMP_BIST_FAIL = burst_response_arr[(4 - 1) * 5 + 2] >> 5 & 1;
 8002bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c02:	7c5b      	ldrb	r3, [r3, #17]
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <readBurst0x7A+0xdb8>)
 8002c10:	701a      	strb	r2, [r3, #0]
    VTREF_COMP_BIST_FAIL = burst_response_arr[(4 - 1) * 5 + 2] >> 4 & 1;
 8002c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c16:	7c5b      	ldrb	r3, [r3, #17]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b7c      	ldr	r3, [pc, #496]	; (8002e14 <readBurst0x7A+0xdbc>)
 8002c24:	701a      	strb	r2, [r3, #0]

    EEPROM_CRC_ERR_CAL_FF = burst_response_arr[(5 - 1) * 5 + 2] >> 7 & 1;
 8002c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2a:	7d9b      	ldrb	r3, [r3, #22]
 8002c2c:	09db      	lsrs	r3, r3, #7
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <readBurst0x7A+0xdc0>)
 8002c32:	701a      	strb	r2, [r3, #0]
    HWSC_DONE = burst_response_arr[(5 - 1) * 5 + 2] >> 6 & 1;
 8002c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c38:	7d9b      	ldrb	r3, [r3, #22]
 8002c3a:	099b      	lsrs	r3, r3, #6
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b75      	ldr	r3, [pc, #468]	; (8002e1c <readBurst0x7A+0xdc4>)
 8002c46:	701a      	strb	r2, [r3, #0]
    VBAT_OPEN = burst_response_arr[(5 - 1) * 5 + 2] >> 5 & 1;
 8002c48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c4c:	7d9b      	ldrb	r3, [r3, #22]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	4b71      	ldr	r3, [pc, #452]	; (8002e20 <readBurst0x7A+0xdc8>)
 8002c5a:	701a      	strb	r2, [r3, #0]

    for (int i = 1; i <= 2; i++) {
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c62:	e056      	b.n	8002d12 <readBurst0x7A+0xcba>
        VCELL_UV[i] = burst_response_arr[(6 - 1) * 5 + 4] >> (8 - i) & 1;
 8002c64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c68:	7f5b      	ldrb	r3, [r3, #29]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c70:	f1c3 0308 	rsb	r3, r3, #8
 8002c74:	fa42 f303 	asr.w	r3, r2, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	b2d9      	uxtb	r1, r3
 8002c80:	4a68      	ldr	r2, [pc, #416]	; (8002e24 <readBurst0x7A+0xdcc>)
 8002c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c86:	4413      	add	r3, r2
 8002c88:	460a      	mov	r2, r1
 8002c8a:	701a      	strb	r2, [r3, #0]
        VCELL_OV[i] = burst_response_arr[(7 - 1) * 5 + 4] >> (8 - i) & 1;
 8002c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c90:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002c94:	461a      	mov	r2, r3
 8002c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c9a:	f1c3 0308 	rsb	r3, r3, #8
 8002c9e:	fa42 f303 	asr.w	r3, r2, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	b2d9      	uxtb	r1, r3
 8002caa:	4a5f      	ldr	r2, [pc, #380]	; (8002e28 <readBurst0x7A+0xdd0>)
 8002cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
        VCELL_BAL_UV[i] = burst_response_arr[(9 - 1) * 5 + 4] >> (8 - i) & 1;
 8002cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cc4:	f1c3 0308 	rsb	r3, r3, #8
 8002cc8:	fa42 f303 	asr.w	r3, r2, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	b2d9      	uxtb	r1, r3
 8002cd4:	4a55      	ldr	r2, [pc, #340]	; (8002e2c <readBurst0x7A+0xdd4>)
 8002cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cda:	4413      	add	r3, r2
 8002cdc:	460a      	mov	r2, r1
 8002cde:	701a      	strb	r2, [r3, #0]
        GPIO_UT[i + 2] = burst_response_arr[(8 - 1) * 5 + 4] >> (8 - i) & 1;
 8002ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cee:	f1c3 0308 	rsb	r3, r3, #8
 8002cf2:	fa42 f303 	asr.w	r3, r2, r3
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f002 0201 	and.w	r2, r2, #1
 8002d02:	b2d1      	uxtb	r1, r2
 8002d04:	4a4a      	ldr	r2, [pc, #296]	; (8002e30 <readBurst0x7A+0xdd8>)
 8002d06:	54d1      	strb	r1, [r2, r3]
    for (int i = 1; i <= 2; i++) {
 8002d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	dda4      	ble.n	8002c64 <readBurst0x7A+0xc0c>
    }

    for (int i = 3; i <= 10; i++) {
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d20:	e06a      	b.n	8002df8 <readBurst0x7A+0xda0>
        VCELL_UV[i] = burst_response_arr[(6 - 1) * 5 + 3] >> (i - 3) & 1;
 8002d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d26:	7f1b      	ldrb	r3, [r3, #28]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2e:	3b03      	subs	r3, #3
 8002d30:	fa42 f303 	asr.w	r3, r2, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	b2d9      	uxtb	r1, r3
 8002d3c:	4a39      	ldr	r2, [pc, #228]	; (8002e24 <readBurst0x7A+0xdcc>)
 8002d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d42:	4413      	add	r3, r2
 8002d44:	460a      	mov	r2, r1
 8002d46:	701a      	strb	r2, [r3, #0]
        VCELL_OV[i] = burst_response_arr[(7 - 1) * 5 + 3] >> (i - 3) & 1;
 8002d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d50:	461a      	mov	r2, r3
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	3b03      	subs	r3, #3
 8002d58:	fa42 f303 	asr.w	r3, r2, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	b2d9      	uxtb	r1, r3
 8002d64:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <readBurst0x7A+0xdd0>)
 8002d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
        VCELL_BAL_UV[i] = burst_response_arr[(9 - 1) * 5 + 3] >> (i - 3) & 1;
 8002d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d74:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7e:	3b03      	subs	r3, #3
 8002d80:	fa42 f303 	asr.w	r3, r2, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	b2d9      	uxtb	r1, r3
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <readBurst0x7A+0xdd4>)
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	4413      	add	r3, r2
 8002d94:	460a      	mov	r2, r1
 8002d96:	701a      	strb	r2, [r3, #0]

        if (i <= 7)
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9c:	2b07      	cmp	r3, #7
 8002d9e:	dc13      	bgt.n	8002dc8 <readBurst0x7A+0xd70>
            GPIO_UT[i + 2] = burst_response_arr[(8 - 1) * 5 + 3] >> (i - 3) & 1;
 8002da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002da4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002da8:	461a      	mov	r2, r3
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	3b03      	subs	r3, #3
 8002db0:	fa42 f303 	asr.w	r3, r2, r3
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f002 0201 	and.w	r2, r2, #1
 8002dc0:	b2d1      	uxtb	r1, r2
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <readBurst0x7A+0xdd8>)
 8002dc4:	54d1      	strb	r1, [r2, r3]
 8002dc6:	e012      	b.n	8002dee <readBurst0x7A+0xd96>
        else
            GPIO_OT[i - 5] = burst_response_arr[(8 - 1) * 5 + 3] >> (i - 3) & 1;
 8002dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dcc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd6:	3b03      	subs	r3, #3
 8002dd8:	fa42 f303 	asr.w	r3, r2, r3
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de2:	3b05      	subs	r3, #5
 8002de4:	f002 0201 	and.w	r2, r2, #1
 8002de8:	b2d1      	uxtb	r1, r2
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <readBurst0x7A+0xddc>)
 8002dec:	54d1      	strb	r1, [r2, r3]
    for (int i = 3; i <= 10; i++) {
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	3301      	adds	r3, #1
 8002df4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	2b0a      	cmp	r3, #10
 8002dfe:	dd90      	ble.n	8002d22 <readBurst0x7A+0xcca>
    }

    for (int i = 11; i <= 14; i++) {
 8002e00:	230b      	movs	r3, #11
 8002e02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002e06:	e06a      	b.n	8002ede <readBurst0x7A+0xe86>
 8002e08:	2000020f 	.word	0x2000020f
 8002e0c:	20000288 	.word	0x20000288
 8002e10:	200001cf 	.word	0x200001cf
 8002e14:	200001a8 	.word	0x200001a8
 8002e18:	20000154 	.word	0x20000154
 8002e1c:	2000014d 	.word	0x2000014d
 8002e20:	200000b2 	.word	0x200000b2
 8002e24:	200002b8 	.word	0x200002b8
 8002e28:	200001d4 	.word	0x200001d4
 8002e2c:	200001fc 	.word	0x200001fc
 8002e30:	20000164 	.word	0x20000164
 8002e34:	200000a8 	.word	0x200000a8
        VCELL_UV[i] = burst_response_arr[(6 - 1) * 5 + 2] >> (i - 11) & 1;
 8002e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e3c:	7edb      	ldrb	r3, [r3, #27]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e44:	3b0b      	subs	r3, #11
 8002e46:	fa42 f303 	asr.w	r3, r2, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	b2d9      	uxtb	r1, r3
 8002e52:	4a87      	ldr	r2, [pc, #540]	; (8003070 <readBurst0x7A+0x1018>)
 8002e54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e58:	4413      	add	r3, r2
 8002e5a:	460a      	mov	r2, r1
 8002e5c:	701a      	strb	r2, [r3, #0]
        VCELL_OV[i] = burst_response_arr[(7 - 1) * 5 + 2] >> (i - 11) & 1;
 8002e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e6c:	3b0b      	subs	r3, #11
 8002e6e:	fa42 f303 	asr.w	r3, r2, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	b2d9      	uxtb	r1, r3
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	; (8003074 <readBurst0x7A+0x101c>)
 8002e7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e80:	4413      	add	r3, r2
 8002e82:	460a      	mov	r2, r1
 8002e84:	701a      	strb	r2, [r3, #0]
        VCELL_BAL_UV[i] = burst_response_arr[(9 - 1) * 5 + 2] >> (i - 11) & 1;
 8002e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e8a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002e94:	3b0b      	subs	r3, #11
 8002e96:	fa42 f303 	asr.w	r3, r2, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	b2d9      	uxtb	r1, r3
 8002ea2:	4a75      	ldr	r2, [pc, #468]	; (8003078 <readBurst0x7A+0x1020>)
 8002ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ea8:	4413      	add	r3, r2
 8002eaa:	460a      	mov	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
        GPIO_OT[i - 5] = burst_response_arr[(8 - 1) * 5 + 2] >> (i - 11) & 1;
 8002eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ebc:	3b0b      	subs	r3, #11
 8002ebe:	fa42 f303 	asr.w	r3, r2, r3
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ec8:	3b05      	subs	r3, #5
 8002eca:	f002 0201 	and.w	r2, r2, #1
 8002ece:	b2d1      	uxtb	r1, r2
 8002ed0:	4a6a      	ldr	r2, [pc, #424]	; (800307c <readBurst0x7A+0x1024>)
 8002ed2:	54d1      	strb	r1, [r2, r3]
    for (int i = 11; i <= 14; i++) {
 8002ed4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ed8:	3301      	adds	r3, #1
 8002eda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ede:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ee2:	2b0e      	cmp	r3, #14
 8002ee4:	dda8      	ble.n	8002e38 <readBurst0x7A+0xde0>
    }

    EEPROM_CRC_ERR_SECT_0 = burst_response_arr[(6 - 1) * 5 + 2] >> 7 & 1;
 8002ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eea:	7edb      	ldrb	r3, [r3, #27]
 8002eec:	09db      	lsrs	r3, r3, #7
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b63      	ldr	r3, [pc, #396]	; (8003080 <readBurst0x7A+0x1028>)
 8002ef2:	701a      	strb	r2, [r3, #0]
    Comm_timeout_flt = burst_response_arr[(6 - 1) * 5 + 2] >> 6 & 1;
 8002ef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ef8:	7edb      	ldrb	r3, [r3, #27]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <readBurst0x7A+0x102c>)
 8002f06:	701a      	strb	r2, [r3, #0]
    EEPROM_CRC_ERR_CAL_RAM = burst_response_arr[(6 - 1) * 5 + 2] >> 5 & 1;
 8002f08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f0c:	7edb      	ldrb	r3, [r3, #27]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <readBurst0x7A+0x1030>)
 8002f1a:	701a      	strb	r2, [r3, #0]
    RAM_CRC_ERR = burst_response_arr[(6 - 1) * 5 + 2] >> 4 & 1;
 8002f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f20:	7edb      	ldrb	r3, [r3, #27]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b57      	ldr	r3, [pc, #348]	; (800308c <readBurst0x7A+0x1034>)
 8002f2e:	701a      	strb	r2, [r3, #0]

    VBATT_WRN_OV = burst_response_arr[(7 - 1) * 5 + 2] >> 7 & 1;
 8002f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f38:	09db      	lsrs	r3, r3, #7
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <readBurst0x7A+0x1038>)
 8002f3e:	701a      	strb	r2, [r3, #0]
    VBATT_WRN_UV = burst_response_arr[(7 - 1) * 5 + 2] >> 6 & 1;
 8002f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b50      	ldr	r3, [pc, #320]	; (8003094 <readBurst0x7A+0x103c>)
 8002f54:	701a      	strb	r2, [r3, #0]
    VBATTCRIT_UV = burst_response_arr[(7 - 1) * 5 + 2] >> 5 & 1;
 8002f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <readBurst0x7A+0x1040>)
 8002f6a:	701a      	strb	r2, [r3, #0]
    VSUM_UV = burst_response_arr[(7 - 1) * 5 + 2] >> 4 & 1;
 8002f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <readBurst0x7A+0x1044>)
 8002f80:	701a      	strb	r2, [r3, #0]

    bal_on = burst_response_arr[(8 - 1) * 5 + 2] >> 7 & 1;
 8002f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f8a:	09db      	lsrs	r3, r3, #7
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b44      	ldr	r3, [pc, #272]	; (80030a0 <readBurst0x7A+0x1048>)
 8002f90:	701a      	strb	r2, [r3, #0]
    eof_bal = burst_response_arr[(8 - 1) * 5 + 2] >> 6 & 1;
 8002f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <readBurst0x7A+0x104c>)
 8002fa6:	701a      	strb	r2, [r3, #0]
    VBATTCRIT_OV = burst_response_arr[(8 - 1) * 5 + 2] >> 5 & 1;
 8002fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <readBurst0x7A+0x1050>)
 8002fbc:	701a      	strb	r2, [r3, #0]
    VSUM_OV = burst_response_arr[(8 - 1) * 5 + 2] >> 4 & 1;
 8002fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <readBurst0x7A+0x1054>)
 8002fd2:	701a      	strb	r2, [r3, #0]

    for (int i = 17; i > 13; i--) {
 8002fd4:	2311      	movs	r3, #17
 8002fd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002fda:	e017      	b.n	800300c <readBurst0x7A+0xfb4>
        GPOon[i - 11] = burst_response_arr[(9 - 1) * 5 + 2] >> (i - 10) & 1;
 8002fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fe0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002fea:	3b0a      	subs	r3, #10
 8002fec:	fa42 f303 	asr.w	r3, r2, r3
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002ff6:	3b0b      	subs	r3, #11
 8002ff8:	f002 0201 	and.w	r2, r2, #1
 8002ffc:	b2d1      	uxtb	r1, r2
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	; (80030b0 <readBurst0x7A+0x1058>)
 8003000:	54d1      	strb	r1, [r2, r3]
    for (int i = 17; i > 13; i--) {
 8003002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003006:	3b01      	subs	r3, #1
 8003008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800300c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003010:	2b0d      	cmp	r3, #13
 8003012:	dce3      	bgt.n	8002fdc <readBurst0x7A+0xf84>
    }

    Fault_L_line_status = burst_response_arr[(10 - 1) * 5 + 2] >> 7 & 1;
 8003014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003018:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800301c:	09db      	lsrs	r3, r3, #7
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <readBurst0x7A+0x105c>)
 8003022:	701a      	strb	r2, [r3, #0]
    GPOon[9] = burst_response_arr[(10 - 1) * 5 + 2] >> 6 & 1;
 8003024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003028:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <readBurst0x7A+0x1058>)
 8003038:	725a      	strb	r2, [r3, #9]
    GPOon[8] = burst_response_arr[(10 - 1) * 5 + 2] >> 5 & 1;
 800303a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800303e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <readBurst0x7A+0x1058>)
 800304e:	721a      	strb	r2, [r3, #8]
    GPOon[7] = burst_response_arr[(10 - 1) * 5 + 2] >> 4 & 1;
 8003050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003054:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <readBurst0x7A+0x1058>)
 8003064:	71da      	strb	r2, [r3, #7]

    for (int i = 13; i > 9; i--) {
 8003066:	230d      	movs	r3, #13
 8003068:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800306c:	e03c      	b.n	80030e8 <readBurst0x7A+0x1090>
 800306e:	bf00      	nop
 8003070:	200002b8 	.word	0x200002b8
 8003074:	200001d4 	.word	0x200001d4
 8003078:	200001fc 	.word	0x200001fc
 800307c:	200000a8 	.word	0x200000a8
 8003080:	20000220 	.word	0x20000220
 8003084:	20000150 	.word	0x20000150
 8003088:	200000b3 	.word	0x200000b3
 800308c:	200000b8 	.word	0x200000b8
 8003090:	2000012b 	.word	0x2000012b
 8003094:	2000015e 	.word	0x2000015e
 8003098:	20000287 	.word	0x20000287
 800309c:	200001af 	.word	0x200001af
 80030a0:	200002c7 	.word	0x200002c7
 80030a4:	200000b7 	.word	0x200000b7
 80030a8:	200001d3 	.word	0x200001d3
 80030ac:	20000115 	.word	0x20000115
 80030b0:	200001b4 	.word	0x200001b4
 80030b4:	20000156 	.word	0x20000156
        GPOshort[i - 4] = burst_response_arr[(10 - 1) * 5 + 2] >> (i - 10) & 1;
 80030b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80030c0:	461a      	mov	r2, r3
 80030c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030c6:	3b0a      	subs	r3, #10
 80030c8:	fa42 f303 	asr.w	r3, r2, r3
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030d2:	3b04      	subs	r3, #4
 80030d4:	f002 0201 	and.w	r2, r2, #1
 80030d8:	b2d1      	uxtb	r1, r2
 80030da:	4a8b      	ldr	r2, [pc, #556]	; (8003308 <readBurst0x7A+0x12b0>)
 80030dc:	54d1      	strb	r1, [r2, r3]
    for (int i = 13; i > 9; i--) {
 80030de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030ec:	2b09      	cmp	r3, #9
 80030ee:	dce3      	bgt.n	80030b8 <readBurst0x7A+0x1060>
    }
    GPOshort[5] = burst_response_arr[(10 - 1) * 5 + 3] >> 7 & 1;
 80030f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f8:	09db      	lsrs	r3, r3, #7
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b82      	ldr	r3, [pc, #520]	; (8003308 <readBurst0x7A+0x12b0>)
 80030fe:	715a      	strb	r2, [r3, #5]
    GPOshort[4] = burst_response_arr[(10 - 1) * 5 + 3] >> 6 & 1;
 8003100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4b7d      	ldr	r3, [pc, #500]	; (8003308 <readBurst0x7A+0x12b0>)
 8003114:	711a      	strb	r2, [r3, #4]
    GPOshort[3] = burst_response_arr[(10 - 1) * 5 + 3] >> 5 & 1;
 8003116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800311a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b77      	ldr	r3, [pc, #476]	; (8003308 <readBurst0x7A+0x12b0>)
 800312a:	70da      	strb	r2, [r3, #3]

    HeartBeat_fault = burst_response_arr[(11 - 1) * 5 + 2] >> 7 & 1;
 800312c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003134:	09db      	lsrs	r3, r3, #7
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b74      	ldr	r3, [pc, #464]	; (800330c <readBurst0x7A+0x12b4>)
 800313a:	701a      	strb	r2, [r3, #0]
    FaultHline_fault = burst_response_arr[(11 - 1) * 5 + 2] >> 6 & 1;
 800313c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b70      	ldr	r3, [pc, #448]	; (8003310 <readBurst0x7A+0x12b8>)
 8003150:	701a      	strb	r2, [r3, #0]
    FaultH_EN = burst_response_arr[(11 - 1) * 5 + 2] >> 5 & 1;
 8003152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b6b      	ldr	r3, [pc, #428]	; (8003314 <readBurst0x7A+0x12bc>)
 8003166:	701a      	strb	r2, [r3, #0]
    HeartBeat_En = burst_response_arr[(11 - 1) * 5 + 2] >> 4 & 1;
 8003168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800316c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <readBurst0x7A+0x12c0>)
 800317c:	701a      	strb	r2, [r3, #0]

    MUX_BIST_FAIL = (((burst_response_arr[(11 - 1) * 5 + 4] >> 6) & 0b00000011) | (burst_response_arr[(11 - 1) * 5 + 3] << 2)) | ((burst_response_arr[(11 - 1) * 5 + 2] & 0b00001111) << 8);
 800317e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003182:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003186:	099b      	lsrs	r3, r3, #6
 8003188:	b2db      	uxtb	r3, r3
 800318a:	b21b      	sxth	r3, r3
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	b21a      	sxth	r2, r3
 8003192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	b21b      	sxth	r3, r3
 800319e:	4313      	orrs	r3, r2
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b58      	ldr	r3, [pc, #352]	; (800331c <readBurst0x7A+0x12c4>)
 80031bc:	801a      	strh	r2, [r3, #0]

    GPIO_BIST_FAIL = ((burst_response_arr[(10 - 1) * 5 + 4] >> 6) & 0b00000011) | ((burst_response_arr[(11 - 1) * 5 + 3] & 0b00011111) << 2);
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	b25a      	sxtb	r2, r3
 80031cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	4313      	orrs	r3, r2
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	4b4e      	ldr	r3, [pc, #312]	; (8003320 <readBurst0x7A+0x12c8>)
 80031e6:	701a      	strb	r2, [r3, #0]

    curr_sense_ovc_sleep = burst_response_arr[(12 - 1) * 5 + 2] >> 7 & 1;
 80031e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031f0:	09db      	lsrs	r3, r3, #7
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <readBurst0x7A+0x12cc>)
 80031f6:	701a      	strb	r2, [r3, #0]
    HeartBeatCycle = burst_response_arr[(12 - 1) * 5 + 2] >> 4 & 0b00000111;
 80031f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	b2db      	uxtb	r3, r3
 8003204:	b29b      	uxth	r3, r3
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	b29a      	uxth	r2, r3
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <readBurst0x7A+0x12d0>)
 800320e:	801a      	strh	r2, [r3, #0]
    BIST_BAL_COMP_HS_FAIL = ((burst_response_arr[(12 - 1) * 5 + 2] & 0b00001111) << 3) | ((burst_response_arr[(12 - 1) * 5 + 3] >> 5) & 0b00000111);
 8003210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	b21b      	sxth	r3, r3
 800321c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003220:	b21a      	sxth	r2, r3
 8003222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003226:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	b2db      	uxtb	r3, r3
 800322e:	b21b      	sxth	r3, r3
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	b21b      	sxth	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b21b      	sxth	r3, r3
 800323a:	b29a      	uxth	r2, r3
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <readBurst0x7A+0x12d4>)
 800323e:	801a      	strh	r2, [r3, #0]
    BIST_BAL_COMP_LS_FAIL = ((burst_response_arr[(12 - 1) * 5 + 3] & 0b00011111) << 2) | (burst_response_arr[(12 - 1) * 5 + 4] >> 6);
 8003240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003244:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	b21b      	sxth	r3, r3
 800324c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003250:	b21a      	sxth	r2, r3
 8003252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003256:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	b2db      	uxtb	r3, r3
 800325e:	b21b      	sxth	r3, r3
 8003260:	4313      	orrs	r3, r2
 8003262:	b21b      	sxth	r3, r3
 8003264:	b29a      	uxth	r2, r3
 8003266:	4b32      	ldr	r3, [pc, #200]	; (8003330 <readBurst0x7A+0x12d8>)
 8003268:	801a      	strh	r2, [r3, #0]

    curr_sense_ovc_norm = burst_response_arr[(13 - 1) * 5 + 2] >> 7 & 1;
 800326a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	09db      	lsrs	r3, r3, #7
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <readBurst0x7A+0x12dc>)
 8003278:	701a      	strb	r2, [r3, #0]
    OSCFail = burst_response_arr[(13 - 1) * 5 + 2] >> 6 & 1;
 800327a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800327e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <readBurst0x7A+0x12e0>)
 800328e:	701a      	strb	r2, [r3, #0]
    clk_mon_en = burst_response_arr[(13 - 1) * 5 + 2] >> 5 & 1;
 8003290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <readBurst0x7A+0x12e4>)
 80032a4:	701a      	strb	r2, [r3, #0]
    clk_mon_init_done = burst_response_arr[(13 - 1) * 5 + 2] >> 4 & 1;
 80032a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4b21      	ldr	r3, [pc, #132]	; (8003340 <readBurst0x7A+0x12e8>)
 80032ba:	701a      	strb	r2, [r3, #0]

    OPEN_BIST_FAIL = (((burst_response_arr[(13 - 1) * 5 + 3] & 0b00001111) << 8) | (burst_response_arr[(13 - 1) * 5 + 3] << 2)) | (burst_response_arr[(13 - 1) * 5 + 4] >> 6);
 80032bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	b21b      	sxth	r3, r3
 80032c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032cc:	b21a      	sxth	r2, r3
 80032ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	b21b      	sxth	r3, r3
 80032da:	4313      	orrs	r3, r2
 80032dc:	b21a      	sxth	r2, r3
 80032de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	b21b      	sxth	r3, r3
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <readBurst0x7A+0x12ec>)
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	46b5      	mov	sp, r6
 80032f8:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 80032fc:	bf00      	nop
 80032fe:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003308:	200001c0 	.word	0x200001c0
 800330c:	200001f4 	.word	0x200001f4
 8003310:	2000015a 	.word	0x2000015a
 8003314:	200001cd 	.word	0x200001cd
 8003318:	2000012c 	.word	0x2000012c
 800331c:	20000284 	.word	0x20000284
 8003320:	2000028a 	.word	0x2000028a
 8003324:	200001ce 	.word	0x200001ce
 8003328:	20000158 	.word	0x20000158
 800332c:	200001f6 	.word	0x200001f6
 8003330:	20000218 	.word	0x20000218
 8003334:	20000149 	.word	0x20000149
 8003338:	2000014c 	.word	0x2000014c
 800333c:	200001a6 	.word	0x200001a6
 8003340:	2000020b 	.word	0x2000020b
 8003344:	200001ca 	.word	0x200001ca

08003348 <readBurst0x7B>:

void readBurst0x7B()
{
 8003348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334c:	b0c3      	sub	sp, #268	; 0x10c
 800334e:	af02      	add	r7, sp, #8
 8003350:	466b      	mov	r3, sp
 8003352:	607b      	str	r3, [r7, #4]
	uint8_t command_data_arr[5]; //initial burst command data to be sent by MCU, 8 bit array form
	uint64_t command_data = 0; //initial burst command data to be sent by MCU
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	uint8_t nofFrames = 14; //number of frames received from burst command
 8003360:	230e      	movs	r3, #14
 8003362:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t data_burst_arr[nofFrames*5]; //dummy data sent by MCU during burst frame receival
 8003366:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	189c      	adds	r4, r3, r2
 8003370:	1e63      	subs	r3, r4, #1
 8003372:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003376:	4623      	mov	r3, r4
 8003378:	461a      	mov	r2, r3
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	00d9      	lsls	r1, r3, #3
 8003388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800338c:	00d0      	lsls	r0, r2, #3
 800338e:	4623      	mov	r3, r4
 8003390:	461a      	mov	r2, r3
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0000 	mov.w	r0, #0
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	00d9      	lsls	r1, r3, #3
 80033a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033a4:	00d0      	lsls	r0, r2, #3
 80033a6:	4623      	mov	r3, r4
 80033a8:	3307      	adds	r3, #7
 80033aa:	08db      	lsrs	r3, r3, #3
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	ebad 0d03 	sub.w	sp, sp, r3
 80033b2:	ab02      	add	r3, sp, #8
 80033b4:	3300      	adds	r3, #0
 80033b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i=0;i<nofFrames*5;i++) data_burst_arr[i]=0; //all zeroes as per manufacturer documentation
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033c0:	e00b      	b.n	80033da <readBurst0x7B+0x92>
 80033c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80033c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033ca:	441a      	add	r2, r3
 80033cc:	2300      	movs	r3, #0
 80033ce:	7013      	strb	r3, [r2, #0]
 80033d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033d4:	3301      	adds	r3, #1
 80033d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033da:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80033e8:	4293      	cmp	r3, r2
 80033ea:	dbea      	blt.n	80033c2 <readBurst0x7B+0x7a>
	data_burst_arr[nofFrames*5-5]=0b10000010;
 80033ec:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	1899      	adds	r1, r3, r2
 80033f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80033fc:	2382      	movs	r3, #130	; 0x82
 80033fe:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-4]=0b00000100;
 8003400:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	1f19      	subs	r1, r3, #4
 800340c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003410:	2304      	movs	r3, #4
 8003412:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-3]=0b00000000;
 8003414:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	1ed9      	subs	r1, r3, #3
 8003420:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003424:	2300      	movs	r3, #0
 8003426:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-2]=0b00000000;
 8003428:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	1e99      	subs	r1, r3, #2
 8003434:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003438:	2300      	movs	r3, #0
 800343a:	5453      	strb	r3, [r2, r1]
	data_burst_arr[nofFrames*5-1]=0b00010111;
 800343c:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	1e59      	subs	r1, r3, #1
 8003448:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800344c:	2317      	movs	r3, #23
 800344e:	5453      	strb	r3, [r2, r1]
	uint8_t burst_response_arr[nofFrames*5]; // data received by MCU during burst response
 8003450:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	189c      	adds	r4, r3, r2
 800345a:	466b      	mov	r3, sp
 800345c:	461e      	mov	r6, r3
 800345e:	1e63      	subs	r3, r4, #1
 8003460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003464:	4623      	mov	r3, r4
 8003466:	461a      	mov	r2, r3
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	f04f 0000 	mov.w	r0, #0
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	00d9      	lsls	r1, r3, #3
 8003476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800347a:	00d0      	lsls	r0, r2, #3
 800347c:	4623      	mov	r3, r4
 800347e:	461a      	mov	r2, r3
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	00d9      	lsls	r1, r3, #3
 800348e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003492:	00d0      	lsls	r0, r2, #3
 8003494:	4623      	mov	r3, r4
 8003496:	3307      	adds	r3, #7
 8003498:	08db      	lsrs	r3, r3, #3
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	ebad 0d03 	sub.w	sp, sp, r3
 80034a0:	ab02      	add	r3, sp, #8
 80034a2:	3300      	adds	r3, #0
 80034a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	char PA[2] = "1"; // 0 = MISO answer ; 1 = MOSI command
 80034a8:	2331      	movs	r3, #49	; 0x31
 80034aa:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
    char RW[2] = "0"; // 0 = read ; 1 = write
 80034ae:	2330      	movs	r3, #48	; 0x30
 80034b0:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    char DevID[6] = "00001";
 80034b4:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <readBurst0x7B+0x318>)
 80034b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80034ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034be:	6018      	str	r0, [r3, #0]
 80034c0:	3304      	adds	r3, #4
 80034c2:	8019      	strh	r1, [r3, #0]
	char Addr[8] = "1111011"; 	// 0x7B burst command
 80034c4:	4b67      	ldr	r3, [pc, #412]	; (8003664 <readBurst0x7B+0x31c>)
 80034c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80034ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034ce:	e882 0003 	stmia.w	r2, {r0, r1}
	char GSW[3] = "00"; // 0x = ok ; 1x = internal failure detected
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <readBurst0x7B+0x320>)
 80034d4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	460b      	mov	r3, r1
 80034dc:	8013      	strh	r3, [r2, #0]
 80034de:	3202      	adds	r2, #2
 80034e0:	0c0b      	lsrs	r3, r1, #16
 80034e2:	7013      	strb	r3, [r2, #0]
	char data[19] = "111111111111111111";
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <readBurst0x7B+0x324>)
 80034e6:	f107 0590 	add.w	r5, r7, #144	; 0x90
 80034ea:	461c      	mov	r4, r3
 80034ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	802b      	strh	r3, [r5, #0]
 80034f6:	3502      	adds	r5, #2
 80034f8:	0c13      	lsrs	r3, r2, #16
 80034fa:	702b      	strb	r3, [r5, #0]
	char CRC_code[7] = "000000";
 80034fc:	4b5c      	ldr	r3, [pc, #368]	; (8003670 <readBurst0x7B+0x328>)
 80034fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003502:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003506:	6010      	str	r0, [r2, #0]
 8003508:	3204      	adds	r2, #4
 800350a:	8011      	strh	r1, [r2, #0]
 800350c:	3202      	adds	r2, #2
 800350e:	0c0b      	lsrs	r3, r1, #16
 8003510:	7013      	strb	r3, [r2, #0]
	char frame[41];

	strcpy(frame, PA);
 8003512:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8003516:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f002 f982 	bl	8005826 <strcpy>
	strcat(frame,RW);
 8003522:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003526:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f002 f96b 	bl	8005808 <strcat>
	strcat(frame,DevID);
 8003532:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003536:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f963 	bl	8005808 <strcat>
	strcat(frame,Addr);
 8003542:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003546:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f002 f95b 	bl	8005808 <strcat>
	strcat(frame,GSW);
 8003552:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003556:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f002 f953 	bl	8005808 <strcat>
	strcat(frame,data);
 8003562:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003566:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f002 f94b 	bl	8005808 <strcat>
	strcat(frame,CRC_code);
 8003572:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003576:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f002 f943 	bl	8005808 <strcat>

    //convert char array to 8 bit number array:
    for (int i=4;i>=0;i--){
 8003582:	2304      	movs	r3, #4
 8003584:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003588:	e05e      	b.n	8003648 <readBurst0x7B+0x300>
    	command_data_arr[i]=0;
 800358a:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800358e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003592:	441a      	add	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	7013      	strb	r3, [r2, #0]
    	for(int j=7;j>=0;j--){
 8003598:	2307      	movs	r3, #7
 800359a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800359e:	e04a      	b.n	8003636 <readBurst0x7B+0x2ee>
    		command_data_arr[i]=command_data_arr[i] + (frame[i*8+j]-48)*pow(2,7-j);
 80035a0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80035a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035a8:	4413      	add	r3, r2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ff6d 	bl	800048c <__aeabi_i2d>
 80035b2:	4680      	mov	r8, r0
 80035b4:	4689      	mov	r9, r1
 80035b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035ba:	00da      	lsls	r2, r3, #3
 80035bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035c0:	4413      	add	r3, r2
 80035c2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80035c6:	4413      	add	r3, r2
 80035c8:	f813 3ca4 	ldrb.w	r3, [r3, #-164]
 80035cc:	3b30      	subs	r3, #48	; 0x30
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ff5c 	bl	800048c <__aeabi_i2d>
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035dc:	f1c3 0307 	rsb	r3, r3, #7
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc ff53 	bl	800048c <__aeabi_i2d>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	ec43 2b11 	vmov	d1, r2, r3
 80035ee:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8003658 <readBurst0x7B+0x310>
 80035f2:	f002 f921 	bl	8005838 <pow>
 80035f6:	ec53 2b10 	vmov	r2, r3, d0
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7fc ffaf 	bl	8000560 <__aeabi_dmul>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4640      	mov	r0, r8
 8003608:	4649      	mov	r1, r9
 800360a:	f7fc fdf3 	bl	80001f4 <__adddf3>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd fa53 	bl	8000ac0 <__aeabi_d2uiz>
 800361a:	4603      	mov	r3, r0
 800361c:	b2d9      	uxtb	r1, r3
 800361e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8003622:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003626:	441a      	add	r2, r3
 8003628:	460b      	mov	r3, r1
 800362a:	7013      	strb	r3, [r2, #0]
    	for(int j=7;j>=0;j--){
 800362c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003630:	3b01      	subs	r3, #1
 8003632:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003636:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800363a:	2b00      	cmp	r3, #0
 800363c:	dab0      	bge.n	80035a0 <readBurst0x7B+0x258>
    for (int i=4;i>=0;i--){
 800363e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003642:	3b01      	subs	r3, #1
 8003644:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800364c:	2b00      	cmp	r3, #0
 800364e:	da9c      	bge.n	800358a <readBurst0x7B+0x242>
    	}
    }
    //convert char array to number:
    for (int i=39;i>=0;i--){
 8003650:	2327      	movs	r3, #39	; 0x27
 8003652:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003656:	e04b      	b.n	80036f0 <readBurst0x7B+0x3a8>
 8003658:	00000000 	.word	0x00000000
 800365c:	40000000 	.word	0x40000000
 8003660:	0800680c 	.word	0x0800680c
 8003664:	08006884 	.word	0x08006884
 8003668:	080067ec 	.word	0x080067ec
 800366c:	08006868 	.word	0x08006868
 8003670:	08006840 	.word	0x08006840
    	command_data = command_data + (frame[i]-48)*pow(2,39-i);
 8003674:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f7fc ff3a 	bl	80004f4 <__aeabi_ul2d>
 8003680:	4680      	mov	r8, r0
 8003682:	4689      	mov	r9, r1
 8003684:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	3b30      	subs	r3, #48	; 0x30
 8003692:	4618      	mov	r0, r3
 8003694:	f7fc fefa 	bl	800048c <__aeabi_i2d>
 8003698:	4604      	mov	r4, r0
 800369a:	460d      	mov	r5, r1
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc fef1 	bl	800048c <__aeabi_i2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	ec43 2b11 	vmov	d1, r2, r3
 80036b2:	ed9f 0bbf 	vldr	d0, [pc, #764]	; 80039b0 <readBurst0x7B+0x668>
 80036b6:	f002 f8bf 	bl	8005838 <pow>
 80036ba:	ec53 2b10 	vmov	r2, r3, d0
 80036be:	4620      	mov	r0, r4
 80036c0:	4629      	mov	r1, r5
 80036c2:	f7fc ff4d 	bl	8000560 <__aeabi_dmul>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4640      	mov	r0, r8
 80036cc:	4649      	mov	r1, r9
 80036ce:	f7fc fd91 	bl	80001f4 <__adddf3>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd fa29 	bl	8000b30 <__aeabi_d2ulz>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
    for (int i=39;i>=0;i--){
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dabd      	bge.n	8003674 <readBurst0x7B+0x32c>
    }

    L9963_CrcCalc8bitLookupTab(&command_data); //compute CRC for command
 80036f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fc55 	bl	8003fac <L9963_CrcCalc8bitLookupTab>
    command_data_arr[4]=command_data_arr[4] | (uint8_t)(command_data & 0b00111111);
 8003702:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8003706:	b259      	sxtb	r1, r3
 8003708:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800370c:	b253      	sxtb	r3, r2
 800370e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003712:	b25b      	sxtb	r3, r3
 8003714:	430b      	orrs	r3, r1
 8003716:	b25b      	sxtb	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0

    uint8_t nOfTrials=0;
 800371e:	2300      	movs	r3, #0
 8003720:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
    TRANSACTION: //for goto instruction in case there is a problem with sent/received data
	nOfTrials+=1;
 8003724:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8003728:	3301      	adds	r3, #1
 800372a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 800372e:	2200      	movs	r2, #0
 8003730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003734:	48a0      	ldr	r0, [pc, #640]	; (80039b8 <readBurst0x7B+0x670>)
 8003736:	f001 f903 	bl	8004940 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, command_data_arr, response_arr, 5, HAL_MAX_DELAY);
 800373a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2305      	movs	r3, #5
 8003746:	4a9d      	ldr	r2, [pc, #628]	; (80039bc <readBurst0x7B+0x674>)
 8003748:	489d      	ldr	r0, [pc, #628]	; (80039c0 <readBurst0x7B+0x678>)
 800374a:	f001 fdb0 	bl	80052ae <HAL_SPI_TransmitReceive>
 800374e:	4603      	mov	r3, r0
 8003750:	4a9c      	ldr	r2, [pc, #624]	; (80039c4 <readBurst0x7B+0x67c>)
 8003752:	7013      	strb	r3, [r2, #0]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 8003754:	bf00      	nop
 8003756:	489a      	ldr	r0, [pc, #616]	; (80039c0 <readBurst0x7B+0x678>)
 8003758:	f001 ff4b 	bl	80055f2 <HAL_SPI_GetState>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d1f9      	bne.n	8003756 <readBurst0x7B+0x40e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 8003762:	2201      	movs	r2, #1
 8003764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003768:	4893      	ldr	r0, [pc, #588]	; (80039b8 <readBurst0x7B+0x670>)
 800376a:	f001 f8e9 	bl	8004940 <HAL_GPIO_WritePin>

    HAL_Delay(4);
 800376e:	2004      	movs	r0, #4
 8003770:	f000 fe58 	bl	8004424 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // NCS low
 8003774:	2200      	movs	r2, #0
 8003776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800377a:	488f      	ldr	r0, [pc, #572]	; (80039b8 <readBurst0x7B+0x670>)
 800377c:	f001 f8e0 	bl	8004940 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, data_burst_arr, burst_response_arr, nofFrames*5, HAL_MAX_DELAY);
 8003780:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003784:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8003788:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	b29a      	uxth	r2, r3
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	460a      	mov	r2, r1
 80037a2:	4601      	mov	r1, r0
 80037a4:	4886      	ldr	r0, [pc, #536]	; (80039c0 <readBurst0x7B+0x678>)
 80037a6:	f001 fd82 	bl	80052ae <HAL_SPI_TransmitReceive>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4a85      	ldr	r2, [pc, #532]	; (80039c4 <readBurst0x7B+0x67c>)
 80037ae:	7013      	strb	r3, [r2, #0]
    while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY){};	//wait for transaction to end
 80037b0:	bf00      	nop
 80037b2:	4883      	ldr	r0, [pc, #524]	; (80039c0 <readBurst0x7B+0x678>)
 80037b4:	f001 ff1d 	bl	80055f2 <HAL_SPI_GetState>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d1f9      	bne.n	80037b2 <readBurst0x7B+0x46a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET); // NCS High
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037c4:	487c      	ldr	r0, [pc, #496]	; (80039b8 <readBurst0x7B+0x670>)
 80037c6:	f001 f8bb 	bl	8004940 <HAL_GPIO_WritePin>

    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 80037ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0011      	movs	r1, r2
 80037e0:	2000      	movs	r0, #0
 80037e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	0a14      	lsrs	r4, r2, #8
 80037f0:	64fc      	str	r4, [r7, #76]	; 0x4c
 80037f2:	0613      	lsls	r3, r2, #24
 80037f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80037fa:	4623      	mov	r3, r4
 80037fc:	4303      	orrs	r3, r0
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003800:	462b      	mov	r3, r5
 8003802:	430b      	orrs	r3, r1
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
    					   ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8003806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800380a:	789b      	ldrb	r3, [r3, #2]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	0419      	lsls	r1, r3, #16
 800381c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003820:	0410      	lsls	r0, r2, #16
    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8003822:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8003826:	4623      	mov	r3, r4
 8003828:	4303      	orrs	r3, r0
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
 800382c:	462b      	mov	r3, r5
 800382e:	430b      	orrs	r3, r1
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
    					   ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003836:	78db      	ldrb	r3, [r3, #3]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f04f 0000 	mov.w	r0, #0
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	0219      	lsls	r1, r3, #8
 8003848:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800384c:	0210      	lsls	r0, r2, #8
 800384e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8003852:	4623      	mov	r3, r4
 8003854:	ea43 0a00 	orr.w	sl, r3, r0
 8003858:	462b      	mov	r3, r5
 800385a:	ea43 0b01 	orr.w	fp, r3, r1
 800385e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	ea4a 0102 	orr.w	r1, sl, r2
 800386e:	6339      	str	r1, [r7, #48]	; 0x30
 8003870:	ea4b 0303 	orr.w	r3, fp, r3
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
    uint64_t frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8003876:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800387a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

    //check first frame (for special frames - documentation 4.2.4.4)
    if((frame_check == 0xC1FCFFFD08 || //CRC error frame
 800387e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003882:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <readBurst0x7B+0x680>)
 8003884:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 8003888:	4299      	cmp	r1, r3
 800388a:	bf08      	it	eq
 800388c:	4290      	cmpeq	r0, r2
 800388e:	d01a      	beq.n	80038c6 <readBurst0x7B+0x57e>
        frame_check == 0xC1FCFFFCDE || //Busy frame
 8003890:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    if((frame_check == 0xC1FCFFFD08 || //CRC error frame
 8003894:	4a4d      	ldr	r2, [pc, #308]	; (80039cc <readBurst0x7B+0x684>)
 8003896:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 800389a:	4299      	cmp	r1, r3
 800389c:	bf08      	it	eq
 800389e:	4290      	cmpeq	r0, r2
 80038a0:	d011      	beq.n	80038c6 <readBurst0x7B+0x57e>
	    frame_check == 0xC1FCFFFC87 || //Timeout frame
 80038a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
        frame_check == 0xC1FCFFFCDE || //Busy frame
 80038a6:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <readBurst0x7B+0x688>)
 80038a8:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 80038ac:	4299      	cmp	r1, r3
 80038ae:	bf08      	it	eq
 80038b0:	4290      	cmpeq	r0, r2
 80038b2:	d008      	beq.n	80038c6 <readBurst0x7B+0x57e>
	   frame_check == 0xC1FCFFFC6C) && //Not Expected frame
 80038b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
	    frame_check == 0xC1FCFFFC87 || //Timeout frame
 80038b8:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <readBurst0x7B+0x68c>)
 80038ba:	f04f 03c1 	mov.w	r3, #193	; 0xc1
 80038be:	4299      	cmp	r1, r3
 80038c0:	bf08      	it	eq
 80038c2:	4290      	cmpeq	r0, r2
 80038c4:	d104      	bne.n	80038d0 <readBurst0x7B+0x588>
	   frame_check == 0xC1FCFFFC6C) && //Not Expected frame
 80038c6:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80038ca:	2b09      	cmp	r3, #9
 80038cc:	d800      	bhi.n	80038d0 <readBurst0x7B+0x588>
       nOfTrials<10)
    goto TRANSACTION; //repeat process in case of error
 80038ce:	e729      	b.n	8003724 <readBurst0x7B+0x3dc>


    //check CRC for every frame from burst response:
    for(int i=0; i<nofFrames; i++){
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038d6:	e084      	b.n	80039e2 <readBurst0x7B+0x69a>
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 80038d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f04f 0100 	mov.w	r1, #0
 80038ec:	0011      	movs	r1, r2
 80038ee:	2000      	movs	r0, #0
 80038f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	0a14      	lsrs	r4, r2, #8
 80038fe:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003900:	0613      	lsls	r3, r2, #24
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
 8003904:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003908:	4623      	mov	r3, r4
 800390a:	4303      	orrs	r3, r0
 800390c:	623b      	str	r3, [r7, #32]
 800390e:	462b      	mov	r3, r5
 8003910:	430b      	orrs	r3, r1
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
    	    		  ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8003914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003918:	789b      	ldrb	r3, [r3, #2]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f04f 0000 	mov.w	r0, #0
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	0419      	lsls	r1, r3, #16
 800392a:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800392e:	0410      	lsls	r0, r2, #16
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8003930:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003934:	4623      	mov	r3, r4
 8003936:	4303      	orrs	r3, r0
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	462b      	mov	r3, r5
 800393c:	430b      	orrs	r3, r1
 800393e:	61fb      	str	r3, [r7, #28]
    	    		  ((uint64_t)burst_response_arr[2]<<16) | ((uint64_t)burst_response_arr[3]<<8) | (uint64_t)burst_response_arr[4];
 8003940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003944:	78db      	ldrb	r3, [r3, #3]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	f04f 0000 	mov.w	r0, #0
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	0219      	lsls	r1, r3, #8
 8003956:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800395a:	0210      	lsls	r0, r2, #8
 800395c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003960:	4623      	mov	r3, r4
 8003962:	4303      	orrs	r3, r0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	462b      	mov	r3, r5
 8003968:	430b      	orrs	r3, r1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003970:	791b      	ldrb	r3, [r3, #4]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800397c:	4621      	mov	r1, r4
 800397e:	4311      	orrs	r1, r2
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	4629      	mov	r1, r5
 8003984:	430b      	orrs	r3, r1
 8003986:	60fb      	str	r3, [r7, #12]
    	frame_check = ((uint64_t)burst_response_arr[0]<<32) | ((uint64_t)burst_response_arr[1]<<24)|
 8003988:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800398c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    	if(L9963_CrcVer8bitLookupTab(&frame_check)==0 && nOfTrials<10) goto TRANSACTION; //repeat process in case of error
 8003990:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fb8b 	bl	80040b0 <L9963_CrcVer8bitLookupTab>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11b      	bne.n	80039d8 <readBurst0x7B+0x690>
 80039a0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d817      	bhi.n	80039d8 <readBurst0x7B+0x690>
 80039a8:	e6bc      	b.n	8003724 <readBurst0x7B+0x3dc>
 80039aa:	bf00      	nop
 80039ac:	f3af 8000 	nop.w
 80039b0:	00000000 	.word	0x00000000
 80039b4:	40000000 	.word	0x40000000
 80039b8:	40020400 	.word	0x40020400
 80039bc:	20000094 	.word	0x20000094
 80039c0:	200000bc 	.word	0x200000bc
 80039c4:	200002c8 	.word	0x200002c8
 80039c8:	fcfffd08 	.word	0xfcfffd08
 80039cc:	fcfffcde 	.word	0xfcfffcde
 80039d0:	fcfffc87 	.word	0xfcfffc87
 80039d4:	fcfffc6c 	.word	0xfcfffc6c
    for(int i=0; i<nofFrames; i++){
 80039d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039dc:	3301      	adds	r3, #1
 80039de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80039e2:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80039e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f6ff af74 	blt.w	80038d8 <readBurst0x7B+0x590>
            frame 15: burst_response_arr[65] --> burst_response_arr[69]
            frame 18 actual data: frame[67],frame[68], first 2 MSB's of burst_response_arr[69]
    */

    //frame1 0-4
     CoulombCounter_en = burst_response_arr[2] >> 7;
 80039f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039f4:	789b      	ldrb	r3, [r3, #2]
 80039f6:	09db      	lsrs	r3, r3, #7
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	4bbd      	ldr	r3, [pc, #756]	; (8003cf0 <readBurst0x7B+0x9a8>)
 80039fc:	701a      	strb	r2, [r3, #0]
    CoCouOvF = (burst_response_arr[2] >> 6) & 1;
 80039fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a02:	789b      	ldrb	r3, [r3, #2]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4bb9      	ldr	r3, [pc, #740]	; (8003cf4 <readBurst0x7B+0x9ac>)
 8003a10:	701a      	strb	r2, [r3, #0]

    CoulombCntTime= (((burst_response_arr[(1-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(1-1)*5+3]) << 2
 8003a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a16:	789b      	ldrb	r3, [r3, #2]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003a1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003a22:	78d2      	ldrb	r2, [r2, #3]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(1-1)*5+4]>>6);
 8003a28:	b21a      	sxth	r2, r3
 8003a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a2e:	791b      	ldrb	r3, [r3, #4]
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	b21b      	sxth	r3, r3
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b21b      	sxth	r3, r3
 8003a3a:	b29a      	uxth	r2, r3
    CoulombCntTime= (((burst_response_arr[(1-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(1-1)*5+3]) << 2
 8003a3c:	4bae      	ldr	r3, [pc, #696]	; (8003cf8 <readBurst0x7B+0x9b0>)
 8003a3e:	801a      	strh	r2, [r3, #0]

     //frame2 5-9
      sense_plus_open = burst_response_arr[(2-1)*5+2] >> 7;
 8003a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a44:	79db      	ldrb	r3, [r3, #7]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4bac      	ldr	r3, [pc, #688]	; (8003cfc <readBurst0x7B+0x9b4>)
 8003a4c:	701a      	strb	r2, [r3, #0]
    sense_minus_open = (burst_response_arr[(2-1)*5+2] >> 6) & 1;
 8003a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a52:	79db      	ldrb	r3, [r3, #7]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4ba8      	ldr	r3, [pc, #672]	; (8003d00 <readBurst0x7B+0x9b8>)
 8003a60:	701a      	strb	r2, [r3, #0]
    CoulombCounter_msb= (((burst_response_arr[(2-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(2-1)*5+3]) << 2
 8003a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a66:	79db      	ldrb	r3, [r3, #7]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003a6e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003a72:	7a12      	ldrb	r2, [r2, #8]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(2-1)*5+4]>>6);
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a7e:	7a5b      	ldrb	r3, [r3, #9]
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	4313      	orrs	r3, r2
 8003a88:	b21b      	sxth	r3, r3
 8003a8a:	b29a      	uxth	r2, r3
    CoulombCounter_msb= (((burst_response_arr[(2-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(2-1)*5+3]) << 2
 8003a8c:	4b9d      	ldr	r3, [pc, #628]	; (8003d04 <readBurst0x7B+0x9bc>)
 8003a8e:	801a      	strh	r2, [r3, #0]
     //frame3 10-14
    curr_sense_ovc_sleep = burst_response_arr[(3-1)*5+2] >> 7;
 8003a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a94:	7b1b      	ldrb	r3, [r3, #12]
 8003a96:	09db      	lsrs	r3, r3, #7
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b9b      	ldr	r3, [pc, #620]	; (8003d08 <readBurst0x7B+0x9c0>)
 8003a9c:	701a      	strb	r2, [r3, #0]
    curr_sense_ovc_norm = (burst_response_arr[(3-1)*5+2] >> 6) & 1;
 8003a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aa2:	7b1b      	ldrb	r3, [r3, #12]
 8003aa4:	099b      	lsrs	r3, r3, #6
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b97      	ldr	r3, [pc, #604]	; (8003d0c <readBurst0x7B+0x9c4>)
 8003ab0:	701a      	strb	r2, [r3, #0]

    CoulombCounter_lsb= (((burst_response_arr[(3-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(3-1)*5+3]) << 2
 8003ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ab6:	7b1b      	ldrb	r3, [r3, #12]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003abe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003ac2:	7b52      	ldrb	r2, [r2, #13]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(3-1)*5+4]>>6);
 8003ac8:	b21a      	sxth	r2, r3
 8003aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ace:	7b9b      	ldrb	r3, [r3, #14]
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	b21b      	sxth	r3, r3
 8003ada:	b29a      	uxth	r2, r3
    CoulombCounter_lsb= (((burst_response_arr[(3-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(3-1)*5+3]) << 2
 8003adc:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <readBurst0x7B+0x9c8>)
 8003ade:	801a      	strh	r2, [r3, #0]

     //frame4 15-19
    CUR_INST_synch = (((burst_response_arr[(4-1)*5+2] << 8) | (burst_response_arr[(4-1)*5+3]) << 2) | burst_response_arr[(4-1)*5+4]>>6);
 8003ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae4:	7c5b      	ldrb	r3, [r3, #17]
 8003ae6:	021a      	lsls	r2, r3, #8
 8003ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aec:	7c9b      	ldrb	r3, [r3, #18]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003af6:	7cd2      	ldrb	r2, [r2, #19]
 8003af8:	0992      	lsrs	r2, r2, #6
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	4313      	orrs	r3, r2
 8003afe:	461a      	mov	r2, r3
 8003b00:	4b84      	ldr	r3, [pc, #528]	; (8003d14 <readBurst0x7B+0x9cc>)
 8003b02:	601a      	str	r2, [r3, #0]
     //frame5 20-24
    CUR_INST_calib = (((burst_response_arr[(5-1)*5+2] << 8) | (burst_response_arr[(5-1)*5+3]) << 2) | burst_response_arr[(5-1)*5+4]>>6);
 8003b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b08:	7d9b      	ldrb	r3, [r3, #22]
 8003b0a:	021a      	lsls	r2, r3, #8
 8003b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b10:	7ddb      	ldrb	r3, [r3, #23]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003b1a:	7e12      	ldrb	r2, [r2, #24]
 8003b1c:	0992      	lsrs	r2, r2, #6
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	4313      	orrs	r3, r2
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <readBurst0x7B+0x9d0>)
 8003b26:	601a      	str	r2, [r3, #0]

     //frame6 25-29
     GPIO3_OT = burst_response_arr[(6-1)*5+2] >> 7;
 8003b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b2c:	7edb      	ldrb	r3, [r3, #27]
 8003b2e:	09db      	lsrs	r3, r3, #7
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4b7a      	ldr	r3, [pc, #488]	; (8003d1c <readBurst0x7B+0x9d4>)
 8003b34:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio3 = (burst_response_arr[(6-1)*5+2] >> 6) & 1;
 8003b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b3a:	7edb      	ldrb	r3, [r3, #27]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <readBurst0x7B+0x9d8>)
 8003b48:	701a      	strb	r2, [r3, #0]

     GPIO3_MEAS= (((burst_response_arr[(6-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(6-1)*5+3]) << 2
 8003b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b4e:	7edb      	ldrb	r3, [r3, #27]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003b56:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003b5a:	7f12      	ldrb	r2, [r2, #28]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(6-1)*5+4]>>6);
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b66:	7f5b      	ldrb	r3, [r3, #29]
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	b21b      	sxth	r3, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	b21b      	sxth	r3, r3
 8003b72:	b29a      	uxth	r2, r3
     GPIO3_MEAS= (((burst_response_arr[(6-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(6-1)*5+3]) << 2
 8003b74:	4b6b      	ldr	r3, [pc, #428]	; (8003d24 <readBurst0x7B+0x9dc>)
 8003b76:	801a      	strh	r2, [r3, #0]
     //frame7 30-34
     GPIO4_OT = burst_response_arr[(7-1)*5+2] >> 7;
 8003b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b80:	09db      	lsrs	r3, r3, #7
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <readBurst0x7B+0x9e0>)
 8003b86:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio4 = (burst_response_arr[(7-1)*5+2] >> 6) & 1;
 8003b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <readBurst0x7B+0x9e4>)
 8003b9c:	701a      	strb	r2, [r3, #0]

     GPIO4_MEAS= (((burst_response_arr[(7-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(7-1)*5+3]) << 2
 8003b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003bac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003bb0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(7-1)*5+4]>>6);
 8003bb8:	b21a      	sxth	r2, r3
 8003bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	b29a      	uxth	r2, r3
     GPIO4_MEAS= (((burst_response_arr[(7-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(7-1)*5+3]) << 2
 8003bce:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <readBurst0x7B+0x9e8>)
 8003bd0:	801a      	strh	r2, [r3, #0]

     //frame8 35-39
     GPIO5_OT = burst_response_arr[(8-1)*5+2] >> 7;
 8003bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bda:	09db      	lsrs	r3, r3, #7
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b55      	ldr	r3, [pc, #340]	; (8003d34 <readBurst0x7B+0x9ec>)
 8003be0:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio5 = (burst_response_arr[(8-1)*5+2] >> 6) & 1;
 8003be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003be6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <readBurst0x7B+0x9f0>)
 8003bf6:	701a      	strb	r2, [r3, #0]
     GPIO5_MEAS= (((burst_response_arr[(8-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(8-1)*5+3]) << 2
 8003bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003c06:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003c0a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(8-1)*5+4]>>6);
 8003c12:	b21a      	sxth	r2, r3
 8003c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c18:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c1c:	099b      	lsrs	r3, r3, #6
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	4313      	orrs	r3, r2
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	b29a      	uxth	r2, r3
     GPIO5_MEAS= (((burst_response_arr[(8-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(8-1)*5+3]) << 2
 8003c28:	4b44      	ldr	r3, [pc, #272]	; (8003d3c <readBurst0x7B+0x9f4>)
 8003c2a:	801a      	strh	r2, [r3, #0]

     //frame9 40-44
     GPIO6_OT = burst_response_arr[(9-1)*5+2] >> 7;
 8003c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c30:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c34:	09db      	lsrs	r3, r3, #7
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <readBurst0x7B+0x9f8>)
 8003c3a:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio6 =(burst_response_arr[(9-1)*5+2] >> 6) & 1;
 8003c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c40:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <readBurst0x7B+0x9fc>)
 8003c50:	701a      	strb	r2, [r3, #0]
     GPIO6_MEAS= (((burst_response_arr[(9-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(9-1)*5+3]) << 2
 8003c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c56:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003c60:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003c64:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(9-1)*5+4]>>6);
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	b21b      	sxth	r3, r3
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	b29a      	uxth	r2, r3
     GPIO6_MEAS= (((burst_response_arr[(9-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(9-1)*5+3]) << 2
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <readBurst0x7B+0xa00>)
 8003c84:	801a      	strh	r2, [r3, #0]

     //frame10 45-49
     GPIO7_OT = burst_response_arr[(10-1)*5+2] >> 7;
 8003c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c8e:	09db      	lsrs	r3, r3, #7
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <readBurst0x7B+0xa04>)
 8003c94:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio7 =(burst_response_arr[(10-1)*5+2] >> 6) & 1;
 8003c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <readBurst0x7B+0xa08>)
 8003caa:	701a      	strb	r2, [r3, #0]
     GPIO7_MEAS= (((burst_response_arr[(10-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(10-1)*5+3]) << 2
 8003cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003cba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003cbe:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(10-1)*5+4]>>6);
 8003cc6:	b21a      	sxth	r2, r3
 8003cc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ccc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	b21b      	sxth	r3, r3
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	b21b      	sxth	r3, r3
 8003cda:	b29a      	uxth	r2, r3
     GPIO7_MEAS= (((burst_response_arr[(10-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(10-1)*5+3]) << 2
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <readBurst0x7B+0xa0c>)
 8003cde:	801a      	strh	r2, [r3, #0]

     //frame11 50-54
     GPIO8_OT = burst_response_arr[(11-1)*5+2] >> 7;
 8003ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ce4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ce8:	09db      	lsrs	r3, r3, #7
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	e034      	b.n	8003d58 <readBurst0x7B+0xa10>
 8003cee:	bf00      	nop
 8003cf0:	20000118 	.word	0x20000118
 8003cf4:	200001f2 	.word	0x200001f2
 8003cf8:	20000216 	.word	0x20000216
 8003cfc:	20000148 	.word	0x20000148
 8003d00:	2000014b 	.word	0x2000014b
 8003d04:	200001a4 	.word	0x200001a4
 8003d08:	200001ce 	.word	0x200001ce
 8003d0c:	20000149 	.word	0x20000149
 8003d10:	2000012e 	.word	0x2000012e
 8003d14:	20000180 	.word	0x20000180
 8003d18:	2000021c 	.word	0x2000021c
 8003d1c:	200001ac 	.word	0x200001ac
 8003d20:	200001ad 	.word	0x200001ad
 8003d24:	2000020c 	.word	0x2000020c
 8003d28:	200000a4 	.word	0x200000a4
 8003d2c:	20000153 	.word	0x20000153
 8003d30:	20000160 	.word	0x20000160
 8003d34:	200001cc 	.word	0x200001cc
 8003d38:	2000009d 	.word	0x2000009d
 8003d3c:	2000015c 	.word	0x2000015c
 8003d40:	200001d0 	.word	0x200001d0
 8003d44:	20000152 	.word	0x20000152
 8003d48:	20000222 	.word	0x20000222
 8003d4c:	200001a3 	.word	0x200001a3
 8003d50:	200001f5 	.word	0x200001f5
 8003d54:	20000130 	.word	0x20000130
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <readBurst0x7B+0xc14>)
 8003d5a:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio8 = (burst_response_arr[(11-1)*5+2] >> 6) & 1;
 8003d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <readBurst0x7B+0xc18>)
 8003d70:	701a      	strb	r2, [r3, #0]
     GPIO8_MEAS= (((burst_response_arr[(11-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(11-1)*5+3]) << 2
 8003d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003d80:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003d84:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(11-1)*5+4]>>6);
 8003d8c:	b21a      	sxth	r2, r3
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d92:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	b21b      	sxth	r3, r3
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b21b      	sxth	r3, r3
 8003da0:	b29a      	uxth	r2, r3
     GPIO8_MEAS= (((burst_response_arr[(11-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(11-1)*5+3]) << 2
 8003da2:	4b70      	ldr	r3, [pc, #448]	; (8003f64 <readBurst0x7B+0xc1c>)
 8003da4:	801a      	strh	r2, [r3, #0]

    //frame12 55-59
     GPIO9_OT = burst_response_arr[(12-1)*5+2] >> 7;
 8003da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003daa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dae:	09db      	lsrs	r3, r3, #7
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <readBurst0x7B+0xc20>)
 8003db4:	701a      	strb	r2, [r3, #0]
     d_rdy_gpio9 =( burst_response_arr[(12-1)*5+2] >> 6) & 1;
 8003db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <readBurst0x7B+0xc24>)
 8003dca:	701a      	strb	r2, [r3, #0]
     GPIO9_MEAS= (((burst_response_arr[(12-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(12-1)*5+3]) << 2
 8003dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003dda:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003dde:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8003de2:	4313      	orrs	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(12-1)*5+4]>>6);
 8003de6:	b21a      	sxth	r2, r3
 8003de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dec:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003df0:	099b      	lsrs	r3, r3, #6
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	b21b      	sxth	r3, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b21b      	sxth	r3, r3
 8003dfa:	b29a      	uxth	r2, r3
     GPIO9_MEAS= (((burst_response_arr[(12-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(12-1)*5+3]) << 2
 8003dfc:	4b5c      	ldr	r3, [pc, #368]	; (8003f70 <readBurst0x7B+0xc28>)
 8003dfe:	801a      	strh	r2, [r3, #0]


     //frame13 60-64
       TrimmCalOk = burst_response_arr[(13-1)*5+2] >> 7;
 8003e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e08:	09db      	lsrs	r3, r3, #7
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <readBurst0x7B+0xc2c>)
 8003e0e:	701a      	strb	r2, [r3, #0]
     d_rdy_vtref = (burst_response_arr[(13-1)*5+2] >> 6) & 1;
 8003e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <readBurst0x7B+0xc30>)
 8003e24:	701a      	strb	r2, [r3, #0]
     VTREF_MEAS= (((burst_response_arr[(13-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(13-1)*5+3]) << 2
 8003e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003e38:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
                    | (burst_response_arr[(13-1)*5+4]>>6);
 8003e40:	b21a      	sxth	r2, r3
 8003e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4a:	099b      	lsrs	r3, r3, #6
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	b29a      	uxth	r2, r3
     VTREF_MEAS= (((burst_response_arr[(13-1)*5+2] & 0b00111111) << 8) | burst_response_arr[(13-1)*5+3]) << 2
 8003e56:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <readBurst0x7B+0xc34>)
 8003e58:	801a      	strh	r2, [r3, #0]

     //frame14 65-69


      GPIO3_UT= burst_response_arr[(14-1)*5+2] >>7;
 8003e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e62:	09db      	lsrs	r3, r3, #7
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <readBurst0x7B+0xc38>)
 8003e68:	701a      	strb	r2, [r3, #0]

      GPIO4_UT = (burst_response_arr[(14-1)*5+2] >> 6) & 1;
 8003e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <readBurst0x7B+0xc3c>)
 8003e7e:	701a      	strb	r2, [r3, #0]
      GPIO5_UT = (burst_response_arr[(14-1)*5+2] >> 5) & 1;
 8003e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <readBurst0x7B+0xc40>)
 8003e94:	701a      	strb	r2, [r3, #0]
      GPIO6_UT = (burst_response_arr[(14-1)*5+2] >> 4) & 1;
 8003e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <readBurst0x7B+0xc44>)
 8003eaa:	701a      	strb	r2, [r3, #0]
      GPIO7_UT = (burst_response_arr[(14-1)*5+2] >> 3) & 1;
 8003eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <readBurst0x7B+0xc48>)
 8003ec0:	701a      	strb	r2, [r3, #0]
      GPIO8_UT = (burst_response_arr[(14-1)*5+2] >> 2) & 1;
 8003ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b2f      	ldr	r3, [pc, #188]	; (8003f94 <readBurst0x7B+0xc4c>)
 8003ed6:	701a      	strb	r2, [r3, #0]
      GPIO9_UT = (burst_response_arr[(14-1)*5+2] >> 1) & 1;
 8003ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003edc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <readBurst0x7B+0xc50>)
 8003eec:	701a      	strb	r2, [r3, #0]
      bal_on  = burst_response_arr[(14-1)*5+2]  & 1;
 8003eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <readBurst0x7B+0xc54>)
 8003efe:	701a      	strb	r2, [r3, #0]
      eof_bal = burst_response_arr[(14-1)*5+3] >> 7;
 8003f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f08:	09db      	lsrs	r3, r3, #7
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <readBurst0x7B+0xc58>)
 8003f0e:	701a      	strb	r2, [r3, #0]
      OTchip = (burst_response_arr[(14-1)*5+3] >> 6) & 1;
 8003f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <readBurst0x7B+0xc5c>)
 8003f24:	701a      	strb	r2, [r3, #0]
      TempChip =(((burst_response_arr[(14-1)*5+3]) << 2) | (burst_response_arr[(14-1)*5+4]>>6));
 8003f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	b25a      	sxtb	r2, r3
 8003f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f3a:	099b      	lsrs	r3, r3, #6
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	b25b      	sxtb	r3, r3
 8003f40:	4313      	orrs	r3, r2
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <readBurst0x7B+0xc60>)
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	46b5      	mov	sp, r6
 8003f4c:	f8d7 d004 	ldr.w	sp, [r7, #4]

}
 8003f50:	bf00      	nop
 8003f52:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8003f56:	46bd      	mov	sp, r7
 8003f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f5c:	200001be 	.word	0x200001be
 8003f60:	200001d2 	.word	0x200001d2
 8003f64:	20000116 	.word	0x20000116
 8003f68:	200001a7 	.word	0x200001a7
 8003f6c:	2000009c 	.word	0x2000009c
 8003f70:	200001aa 	.word	0x200001aa
 8003f74:	20000214 	.word	0x20000214
 8003f78:	20000151 	.word	0x20000151
 8003f7c:	200002ca 	.word	0x200002ca
 8003f80:	200002b6 	.word	0x200002b6
 8003f84:	20000283 	.word	0x20000283
 8003f88:	200001ae 	.word	0x200001ae
 8003f8c:	20000286 	.word	0x20000286
 8003f90:	200001f3 	.word	0x200001f3
 8003f94:	2000015f 	.word	0x2000015f
 8003f98:	200001b0 	.word	0x200001b0
 8003f9c:	200002c7 	.word	0x200002c7
 8003fa0:	200000b7 	.word	0x200000b7
 8003fa4:	200001a9 	.word	0x200001a9
 8003fa8:	200000b5 	.word	0x200000b5

08003fac <L9963_CrcCalc8bitLookupTab>:
//              FRAME_LENGTH  40 (could not be changed)
//              CRC_LENGTH     6 (could not be changed)
//              POLYNOM     0x59 (if changed the crcTable must be recalculated)
//              seed value is defined by  SEED_VALUE
// ****************************************************************************
void L9963_CrcCalc8bitLookupTab (uint64_t * frame){
 8003fac:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]

    const uint8_t * crcTable_p = crcTable;
 8003fb6:	493d      	ldr	r1, [pc, #244]	; (80040ac <L9963_CrcCalc8bitLookupTab+0x100>)
 8003fb8:	6139      	str	r1, [r7, #16]
    uint8_t dataout;
    *frame &= (uint64_t)0xFFFFFFFFFF<<CRC_LENGTH;
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fc0:	f06f 083f 	mvn.w	r8, #63	; 0x3f
 8003fc4:	f643 79ff 	movw	r9, #16383	; 0x3fff
 8003fc8:	ea00 0208 	and.w	r2, r0, r8
 8003fcc:	ea01 0309 	and.w	r3, r1, r9
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	e9c1 2300 	strd	r2, r3, [r1]
    uint8_t tabPointer = (uint8_t)((*frame>>(4*8)) ^ ((uint32_t)SEED_VALUE<<2)); //highest 8bits (bit 32..39)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	000a      	movs	r2, r1
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	b2d3      	uxtb	r3, r2
 8003fea:	f083 031f 	eor.w	r3, r3, #31
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	75fb      	strb	r3, [r7, #23]

    tabPointer =  (uint8_t)((uint32_t)dataout ^ (((uint32_t)*frame)>>(3*8)));   //next  8bits (bit 24..31);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	4613      	mov	r3, r2
 8004004:	0e1b      	lsrs	r3, r3, #24
 8004006:	b2da      	uxtb	r2, r3
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	4053      	eors	r3, r2
 800400c:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	75fb      	strb	r3, [r7, #23]

    tabPointer =  (uint8_t)((uint32_t)dataout ^ (((uint32_t)*frame)>>(2*8)));   //next  8bits (bit 16..23);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	4613      	mov	r3, r2
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	b2da      	uxtb	r2, r3
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	4053      	eors	r3, r2
 8004028:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	75fb      	strb	r3, [r7, #23]

    tabPointer =  (uint8_t)((uint32_t)dataout ^ (((uint32_t)*frame)>>(1*8)));   //next  8bits (bit 8..15);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	4613      	mov	r3, r2
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	b2da      	uxtb	r2, r3
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	4053      	eors	r3, r2
 8004044:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	75fb      	strb	r3, [r7, #23]

    dataout =  (uint8_t)((uint32_t)dataout ^ ((uint32_t)*frame));          //next  8bits (bit 0..7);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	4053      	eors	r3, r2
 800405c:	75fb      	strb	r3, [r7, #23]

    if(0x80 & dataout ){                     //bit 7
 800405e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	da04      	bge.n	8004070 <L9963_CrcCalc8bitLookupTab+0xc4>
        dataout = dataout ^ POLYNOM<<1;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
 8004068:	f083 034d 	eor.w	r3, r3, #77	; 0x4d
 800406c:	43db      	mvns	r3, r3
 800406e:	75fb      	strb	r3, [r7, #23]
    }
    if(0x40 & dataout ){                     //last bit 6, so the rest is bit 0..5
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <L9963_CrcCalc8bitLookupTab+0xd8>
        dataout = dataout ^ POLYNOM;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	f083 0359 	eor.w	r3, r3, #89	; 0x59
 8004082:	75fb      	strb	r3, [r7, #23]
    }
    *frame |= (uint64_t)dataout;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800408a:	7dfa      	ldrb	r2, [r7, #23]
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	ea40 0402 	orr.w	r4, r0, r2
 8004094:	ea41 0503 	orr.w	r5, r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	e9c3 4500 	strd	r4, r5, [r3]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	080068a4 	.word	0x080068a4

080040b0 <L9963_CrcVer8bitLookupTab>:
//              FRAME_LENGTH  40 (could not be changed)
//              CRC_LENGTH     6 (could not be changed)
//              POLYNOM     0x59 (if changed the crcTable must be recalculated)
//              seed value is defined by  SEED_VALUE
// ****************************************************************************
uint16_t L9963_CrcVer8bitLookupTab (uint64_t * frame){
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    const uint8_t * crcTable_p = crcTable;
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <L9963_CrcVer8bitLookupTab+0xd4>)
 80040ba:	613b      	str	r3, [r7, #16]
    uint8_t dataout;
    uint8_t tabPointer = (uint8_t)((*frame>>(4*8)) ^ ((uint32_t)SEED_VALUE<<2)); //highest 8bits (bit 32..39)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	000a      	movs	r2, r1
 80040cc:	2300      	movs	r3, #0
 80040ce:	b2d3      	uxtb	r3, r2
 80040d0:	f083 031f 	eor.w	r3, r3, #31
 80040d4:	43db      	mvns	r3, r3
 80040d6:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4413      	add	r3, r2
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	75fb      	strb	r3, [r7, #23]

    tabPointer =  (uint8_t)((uint32_t)dataout ^ (((uint32_t)*frame)>>(3*8)));   //next  8bits (bit 24..31);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	4613      	mov	r3, r2
 80040ea:	0e1b      	lsrs	r3, r3, #24
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
 80040f0:	4053      	eors	r3, r2
 80040f2:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	75fb      	strb	r3, [r7, #23]

    tabPointer =  (uint8_t)((uint32_t)dataout ^ (((uint32_t)*frame)>>(2*8)));   //next  8bits (bit 16..23);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	4613      	mov	r3, r2
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	b2da      	uxtb	r2, r3
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	4053      	eors	r3, r2
 800410e:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	75fb      	strb	r3, [r7, #23]

    tabPointer =  (uint8_t)((uint32_t)dataout ^ (((uint32_t)*frame)>>(1*8)));   //next  8bits (bit 8..15);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	4613      	mov	r3, r2
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b2da      	uxtb	r2, r3
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	4053      	eors	r3, r2
 800412a:	73fb      	strb	r3, [r7, #15]
    dataout =  crcTable_p[tabPointer];
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4413      	add	r3, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	75fb      	strb	r3, [r7, #23]

    dataout =  (uint8_t)((uint32_t)dataout ^ ((uint32_t)*frame));          //next  8bits (bit 0..7);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	4053      	eors	r3, r2
 8004142:	75fb      	strb	r3, [r7, #23]

    if(0x80 & dataout ){                     //bit 7
 8004144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da04      	bge.n	8004156 <L9963_CrcVer8bitLookupTab+0xa6>
        dataout = dataout ^ POLYNOM<<1;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	f083 034d 	eor.w	r3, r3, #77	; 0x4d
 8004152:	43db      	mvns	r3, r3
 8004154:	75fb      	strb	r3, [r7, #23]
    }
    if(0x40 & dataout ){                     //last bit 6, so the rest is bit 0..5
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <L9963_CrcVer8bitLookupTab+0xba>
        dataout = dataout ^ POLYNOM;
 8004162:	7dfb      	ldrb	r3, [r7, #23]
 8004164:	f083 0359 	eor.w	r3, r3, #89	; 0x59
 8004168:	75fb      	strb	r3, [r7, #23]
    }
    if(0 == dataout){
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <L9963_CrcVer8bitLookupTab+0xc4>
        return 0;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <L9963_CrcVer8bitLookupTab+0xc6>
    }
    else{
        return 1;
 8004174:	2301      	movs	r3, #1
    }
}
 8004176:	4618      	mov	r0, r3
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	080068a4 	.word	0x080068a4

08004188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800418c:	b672      	cpsid	i
}
 800418e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004190:	e7fe      	b.n	8004190 <Error_Handler+0x8>
	...

08004194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_MspInit+0x4c>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4a0f      	ldr	r2, [pc, #60]	; (80041e0 <HAL_MspInit+0x4c>)
 80041a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a8:	6453      	str	r3, [r2, #68]	; 0x44
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_MspInit+0x4c>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_MspInit+0x4c>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <HAL_MspInit+0x4c>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6413      	str	r3, [r2, #64]	; 0x40
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_MspInit+0x4c>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800

080041e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_SPI_MspInit+0x84>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d12c      	bne.n	8004260 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <HAL_SPI_MspInit+0x88>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a17      	ldr	r2, [pc, #92]	; (800426c <HAL_SPI_MspInit+0x88>)
 8004210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_SPI_MspInit+0x88>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <HAL_SPI_MspInit+0x88>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_SPI_MspInit+0x88>)
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	6313      	str	r3, [r2, #48]	; 0x30
 8004232:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_SPI_MspInit+0x88>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800423e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004244:	2302      	movs	r3, #2
 8004246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424c:	2303      	movs	r3, #3
 800424e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004250:	2305      	movs	r3, #5
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4619      	mov	r1, r3
 800425a:	4805      	ldr	r0, [pc, #20]	; (8004270 <HAL_SPI_MspInit+0x8c>)
 800425c:	f000 f9ec 	bl	8004638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40003800 	.word	0x40003800
 800426c:	40023800 	.word	0x40023800
 8004270:	40020400 	.word	0x40020400

08004274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <NMI_Handler+0x4>

0800427a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <HardFault_Handler+0x4>

08004280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <MemManage_Handler+0x4>

08004286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800428a:	e7fe      	b.n	800428a <BusFault_Handler+0x4>

0800428c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004290:	e7fe      	b.n	8004290 <UsageFault_Handler+0x4>

08004292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c0:	f000 f890 	bl	80043e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <SystemInit+0x20>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <SystemInit+0x20>)
 80042d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042f0:	480d      	ldr	r0, [pc, #52]	; (8004328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042f2:	490e      	ldr	r1, [pc, #56]	; (800432c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f8:	e002      	b.n	8004300 <LoopCopyDataInit>

080042fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042fe:	3304      	adds	r3, #4

08004300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004304:	d3f9      	bcc.n	80042fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004306:	4a0b      	ldr	r2, [pc, #44]	; (8004334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004308:	4c0b      	ldr	r4, [pc, #44]	; (8004338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800430a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800430c:	e001      	b.n	8004312 <LoopFillZerobss>

0800430e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800430e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004310:	3204      	adds	r2, #4

08004312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004314:	d3fb      	bcc.n	800430e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004316:	f7ff ffd7 	bl	80042c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800431a:	f001 fa49 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800431e:	f7fc fd89 	bl	8000e34 <main>
  bx  lr    
 8004322:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800432c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004330:	08006a08 	.word	0x08006a08
  ldr r2, =_sbss
 8004334:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004338:	200002d4 	.word	0x200002d4

0800433c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800433c:	e7fe      	b.n	800433c <ADC_IRQHandler>
	...

08004340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <HAL_Init+0x40>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <HAL_Init+0x40>)
 800434a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_Init+0x40>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <HAL_Init+0x40>)
 8004356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_Init+0x40>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a07      	ldr	r2, [pc, #28]	; (8004380 <HAL_Init+0x40>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004368:	2003      	movs	r0, #3
 800436a:	f000 f931 	bl	80045d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800436e:	200f      	movs	r0, #15
 8004370:	f000 f808 	bl	8004384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004374:	f7ff ff0e 	bl	8004194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023c00 	.word	0x40023c00

08004384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_InitTick+0x54>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_InitTick+0x58>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	4619      	mov	r1, r3
 8004396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439a:	fbb3 f3f1 	udiv	r3, r3, r1
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f93b 	bl	800461e <HAL_SYSTICK_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00e      	b.n	80043d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b0f      	cmp	r3, #15
 80043b6:	d80a      	bhi.n	80043ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043b8:	2200      	movs	r2, #0
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f000 f911 	bl	80045e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043c4:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <HAL_InitTick+0x5c>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000000 	.word	0x20000000
 80043dc:	20000008 	.word	0x20000008
 80043e0:	20000004 	.word	0x20000004

080043e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_IncTick+0x20>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_IncTick+0x24>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_IncTick+0x24>)
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000008 	.word	0x20000008
 8004408:	200002d0 	.word	0x200002d0

0800440c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return uwTick;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_GetTick+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200002d0 	.word	0x200002d0

08004424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7ff ffee 	bl	800440c <HAL_GetTick>
 8004430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d005      	beq.n	800444a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HAL_Delay+0x44>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800444a:	bf00      	nop
 800444c:	f7ff ffde 	bl	800440c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	429a      	cmp	r2, r3
 800445a:	d8f7      	bhi.n	800444c <HAL_Delay+0x28>
  {
  }
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000008 	.word	0x20000008

0800446c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <__NVIC_SetPriorityGrouping+0x44>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004488:	4013      	ands	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <__NVIC_SetPriorityGrouping+0x44>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	60d3      	str	r3, [r2, #12]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <__NVIC_GetPriorityGrouping+0x18>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f003 0307 	and.w	r3, r3, #7
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	6039      	str	r1, [r7, #0]
 80044da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	db0a      	blt.n	80044fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	490c      	ldr	r1, [pc, #48]	; (800451c <__NVIC_SetPriority+0x4c>)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	0112      	lsls	r2, r2, #4
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	440b      	add	r3, r1
 80044f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044f8:	e00a      	b.n	8004510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4908      	ldr	r1, [pc, #32]	; (8004520 <__NVIC_SetPriority+0x50>)
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	3b04      	subs	r3, #4
 8004508:	0112      	lsls	r2, r2, #4
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	440b      	add	r3, r1
 800450e:	761a      	strb	r2, [r3, #24]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000e100 	.word	0xe000e100
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f1c3 0307 	rsb	r3, r3, #7
 800453e:	2b04      	cmp	r3, #4
 8004540:	bf28      	it	cs
 8004542:	2304      	movcs	r3, #4
 8004544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	3304      	adds	r3, #4
 800454a:	2b06      	cmp	r3, #6
 800454c:	d902      	bls.n	8004554 <NVIC_EncodePriority+0x30>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3b03      	subs	r3, #3
 8004552:	e000      	b.n	8004556 <NVIC_EncodePriority+0x32>
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004558:	f04f 32ff 	mov.w	r2, #4294967295
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43da      	mvns	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	401a      	ands	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800456c:	f04f 31ff 	mov.w	r1, #4294967295
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	43d9      	mvns	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800457c:	4313      	orrs	r3, r2
         );
}
 800457e:	4618      	mov	r0, r3
 8004580:	3724      	adds	r7, #36	; 0x24
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800459c:	d301      	bcc.n	80045a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800459e:	2301      	movs	r3, #1
 80045a0:	e00f      	b.n	80045c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <SysTick_Config+0x40>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045aa:	210f      	movs	r1, #15
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	f7ff ff8e 	bl	80044d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <SysTick_Config+0x40>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ba:	4b04      	ldr	r3, [pc, #16]	; (80045cc <SysTick_Config+0x40>)
 80045bc:	2207      	movs	r2, #7
 80045be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	e000e010 	.word	0xe000e010

080045d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff47 	bl	800446c <__NVIC_SetPriorityGrouping>
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	4603      	mov	r3, r0
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045f8:	f7ff ff5c 	bl	80044b4 <__NVIC_GetPriorityGrouping>
 80045fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff8e 	bl	8004524 <NVIC_EncodePriority>
 8004608:	4602      	mov	r2, r0
 800460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff5d 	bl	80044d0 <__NVIC_SetPriority>
}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ffb0 	bl	800458c <SysTick_Config>
 800462c:	4603      	mov	r3, r0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	e159      	b.n	8004908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004654:	2201      	movs	r2, #1
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	429a      	cmp	r2, r3
 800466e:	f040 8148 	bne.w	8004902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d005      	beq.n	800468a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004686:	2b02      	cmp	r3, #2
 8004688:	d130      	bne.n	80046ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4013      	ands	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c0:	2201      	movs	r2, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 0201 	and.w	r2, r3, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d017      	beq.n	8004728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	2203      	movs	r2, #3
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d123      	bne.n	800477c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	08da      	lsrs	r2, r3, #3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3208      	adds	r2, #8
 800473c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	220f      	movs	r2, #15
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	08da      	lsrs	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3208      	adds	r2, #8
 8004776:	69b9      	ldr	r1, [r7, #24]
 8004778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 0203 	and.w	r2, r3, #3
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a2 	beq.w	8004902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	4b57      	ldr	r3, [pc, #348]	; (8004920 <HAL_GPIO_Init+0x2e8>)
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	4a56      	ldr	r2, [pc, #344]	; (8004920 <HAL_GPIO_Init+0x2e8>)
 80047c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047cc:	6453      	str	r3, [r2, #68]	; 0x44
 80047ce:	4b54      	ldr	r3, [pc, #336]	; (8004920 <HAL_GPIO_Init+0x2e8>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047da:	4a52      	ldr	r2, [pc, #328]	; (8004924 <HAL_GPIO_Init+0x2ec>)
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	3302      	adds	r3, #2
 80047e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a49      	ldr	r2, [pc, #292]	; (8004928 <HAL_GPIO_Init+0x2f0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d019      	beq.n	800483a <HAL_GPIO_Init+0x202>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a48      	ldr	r2, [pc, #288]	; (800492c <HAL_GPIO_Init+0x2f4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0x1fe>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_GPIO_Init+0x2f8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <HAL_GPIO_Init+0x1fa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a46      	ldr	r2, [pc, #280]	; (8004934 <HAL_GPIO_Init+0x2fc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <HAL_GPIO_Init+0x1f6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a45      	ldr	r2, [pc, #276]	; (8004938 <HAL_GPIO_Init+0x300>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_GPIO_Init+0x1f2>
 8004826:	2304      	movs	r3, #4
 8004828:	e008      	b.n	800483c <HAL_GPIO_Init+0x204>
 800482a:	2307      	movs	r3, #7
 800482c:	e006      	b.n	800483c <HAL_GPIO_Init+0x204>
 800482e:	2303      	movs	r3, #3
 8004830:	e004      	b.n	800483c <HAL_GPIO_Init+0x204>
 8004832:	2302      	movs	r3, #2
 8004834:	e002      	b.n	800483c <HAL_GPIO_Init+0x204>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <HAL_GPIO_Init+0x204>
 800483a:	2300      	movs	r3, #0
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	f002 0203 	and.w	r2, r2, #3
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	4093      	lsls	r3, r2
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800484c:	4935      	ldr	r1, [pc, #212]	; (8004924 <HAL_GPIO_Init+0x2ec>)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	089b      	lsrs	r3, r3, #2
 8004852:	3302      	adds	r3, #2
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_GPIO_Init+0x304>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <HAL_GPIO_Init+0x304>)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_GPIO_Init+0x304>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048a8:	4a24      	ldr	r2, [pc, #144]	; (800493c <HAL_GPIO_Init+0x304>)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_GPIO_Init+0x304>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048d2:	4a1a      	ldr	r2, [pc, #104]	; (800493c <HAL_GPIO_Init+0x304>)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048d8:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_GPIO_Init+0x304>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <HAL_GPIO_Init+0x304>)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	f67f aea2 	bls.w	8004654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3724      	adds	r7, #36	; 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40013800 	.word	0x40013800
 8004928:	40020000 	.word	0x40020000
 800492c:	40020400 	.word	0x40020400
 8004930:	40020800 	.word	0x40020800
 8004934:	40020c00 	.word	0x40020c00
 8004938:	40021000 	.word	0x40021000
 800493c:	40013c00 	.word	0x40013c00

08004940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
 800494c:	4613      	mov	r3, r2
 800494e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004950:	787b      	ldrb	r3, [r7, #1]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004956:	887a      	ldrh	r2, [r7, #2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800495c:	e003      	b.n	8004966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800495e:	887b      	ldrh	r3, [r7, #2]
 8004960:	041a      	lsls	r2, r3, #16
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	619a      	str	r2, [r3, #24]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e264      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d075      	beq.n	8004a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004992:	4ba3      	ldr	r3, [pc, #652]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b04      	cmp	r3, #4
 800499c:	d00c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4ba0      	ldr	r3, [pc, #640]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049aa:	4b9d      	ldr	r3, [pc, #628]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4b99      	ldr	r3, [pc, #612]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d05b      	beq.n	8004a7c <HAL_RCC_OscConfig+0x108>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d157      	bne.n	8004a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e23f      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x74>
 80049da:	4b91      	ldr	r3, [pc, #580]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a90      	ldr	r2, [pc, #576]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x98>
 80049f2:	4b8b      	ldr	r3, [pc, #556]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a8a      	ldr	r2, [pc, #552]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a87      	ldr	r2, [pc, #540]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xb0>
 8004a0c:	4b84      	ldr	r3, [pc, #528]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a83      	ldr	r2, [pc, #524]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a80      	ldr	r2, [pc, #512]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7ff fcee 	bl	800440c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a34:	f7ff fcea 	bl	800440c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e204      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b76      	ldr	r3, [pc, #472]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xc0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a54:	f7ff fcda 	bl	800440c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7ff fcd6 	bl	800440c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1f0      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	4b6c      	ldr	r3, [pc, #432]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0xe8>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d063      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d11c      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa2:	4b5f      	ldr	r3, [pc, #380]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d116      	bne.n	8004adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aae:	4b5c      	ldr	r3, [pc, #368]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e1c4      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac6:	4b56      	ldr	r3, [pc, #344]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4952      	ldr	r1, [pc, #328]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	e03a      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae4:	4b4f      	ldr	r3, [pc, #316]	; (8004c24 <HAL_RCC_OscConfig+0x2b0>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aea:	f7ff fc8f 	bl	800440c <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af2:	f7ff fc8b 	bl	800440c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e1a5      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	4b46      	ldr	r3, [pc, #280]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b43      	ldr	r3, [pc, #268]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4940      	ldr	r1, [pc, #256]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	e015      	b.n	8004b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b26:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <HAL_RCC_OscConfig+0x2b0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7ff fc6e 	bl	800440c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b34:	f7ff fc6a 	bl	800440c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e184      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d030      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <HAL_RCC_OscConfig+0x2b4>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7ff fc4e 	bl	800440c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b74:	f7ff fc4a 	bl	800440c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e164      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x200>
 8004b92:	e015      	b.n	8004bc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HAL_RCC_OscConfig+0x2b4>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9a:	f7ff fc37 	bl	800440c <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7ff fc33 	bl	800440c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e14d      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb4:	4b1a      	ldr	r3, [pc, #104]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f0      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a0 	beq.w	8004d0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10f      	bne.n	8004bfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6413      	str	r3, [r2, #64]	; 0x40
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCC_OscConfig+0x2ac>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	60bb      	str	r3, [r7, #8]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_OscConfig+0x2b8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d121      	bne.n	8004c4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_RCC_OscConfig+0x2b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <HAL_RCC_OscConfig+0x2b8>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c16:	f7ff fbf9 	bl	800440c <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1c:	e011      	b.n	8004c42 <HAL_RCC_OscConfig+0x2ce>
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	42470000 	.word	0x42470000
 8004c28:	42470e80 	.word	0x42470e80
 8004c2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c30:	f7ff fbec 	bl	800440c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e106      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b85      	ldr	r3, [pc, #532]	; (8004e58 <HAL_RCC_OscConfig+0x4e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d106      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2f0>
 8004c56:	4b81      	ldr	r3, [pc, #516]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4a80      	ldr	r2, [pc, #512]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
 8004c62:	e01c      	b.n	8004c9e <HAL_RCC_OscConfig+0x32a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b05      	cmp	r3, #5
 8004c6a:	d10c      	bne.n	8004c86 <HAL_RCC_OscConfig+0x312>
 8004c6c:	4b7b      	ldr	r3, [pc, #492]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a7a      	ldr	r2, [pc, #488]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c72:	f043 0304 	orr.w	r3, r3, #4
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	4b78      	ldr	r3, [pc, #480]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a77      	ldr	r2, [pc, #476]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
 8004c84:	e00b      	b.n	8004c9e <HAL_RCC_OscConfig+0x32a>
 8004c86:	4b75      	ldr	r3, [pc, #468]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a74      	ldr	r2, [pc, #464]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70
 8004c92:	4b72      	ldr	r3, [pc, #456]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a71      	ldr	r2, [pc, #452]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004c98:	f023 0304 	bic.w	r3, r3, #4
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d015      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7ff fbb1 	bl	800440c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7ff fbad 	bl	800440c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e0c5      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc4:	4b65      	ldr	r3, [pc, #404]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ee      	beq.n	8004cae <HAL_RCC_OscConfig+0x33a>
 8004cd0:	e014      	b.n	8004cfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7ff fb9b 	bl	800440c <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7ff fb97 	bl	800440c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0af      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf0:	4b5a      	ldr	r3, [pc, #360]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1ee      	bne.n	8004cda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cfc:	7dfb      	ldrb	r3, [r7, #23]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d02:	4b56      	ldr	r3, [pc, #344]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a55      	ldr	r2, [pc, #340]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 809b 	beq.w	8004e4e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d18:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d05c      	beq.n	8004dde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d141      	bne.n	8004db0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7ff fb6b 	bl	800440c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7ff fb67 	bl	800440c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e081      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4c:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	019b      	lsls	r3, r3, #6
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	3b01      	subs	r3, #1
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	4937      	ldr	r1, [pc, #220]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7ff fb40 	bl	800440c <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d90:	f7ff fb3c 	bl	800440c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e056      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x41c>
 8004dae:	e04e      	b.n	8004e4e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db0:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCC_OscConfig+0x4ec>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7ff fb29 	bl	800440c <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7ff fb25 	bl	800440c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e03f      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd0:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x44a>
 8004ddc:	e037      	b.n	8004e4e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e032      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d028      	beq.n	8004e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d121      	bne.n	8004e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d11a      	bne.n	8004e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e20:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d111      	bne.n	8004e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	3b01      	subs	r3, #1
 8004e34:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d001      	beq.n	8004e4e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	42470060 	.word	0x42470060

08004e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0cc      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e78:	4b68      	ldr	r3, [pc, #416]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d90c      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b65      	ldr	r3, [pc, #404]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b63      	ldr	r3, [pc, #396]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0b8      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb8:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed0:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004edc:	4b50      	ldr	r3, [pc, #320]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	494d      	ldr	r1, [pc, #308]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d044      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d119      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e07f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f22:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e06f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f32:	4b3b      	ldr	r3, [pc, #236]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e067      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4934      	ldr	r1, [pc, #208]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f54:	f7ff fa5a 	bl	800440c <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7ff fa56 	bl	800440c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e04f      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d20c      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f92:	4b22      	ldr	r3, [pc, #136]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b20      	ldr	r3, [pc, #128]	; (800501c <HAL_RCC_ClockConfig+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e032      	b.n	8005012 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4916      	ldr	r1, [pc, #88]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490e      	ldr	r1, [pc, #56]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fea:	f000 f821 	bl	8005030 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490a      	ldr	r1, [pc, #40]	; (8005024 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1c8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff f9ba 	bl	8004384 <HAL_InitTick>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023c00 	.word	0x40023c00
 8005020:	40023800 	.word	0x40023800
 8005024:	080069a4 	.word	0x080069a4
 8005028:	20000000 	.word	0x20000000
 800502c:	20000004 	.word	0x20000004

08005030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005030:	b5b0      	push	{r4, r5, r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005036:	2100      	movs	r1, #0
 8005038:	6079      	str	r1, [r7, #4]
 800503a:	2100      	movs	r1, #0
 800503c:	60f9      	str	r1, [r7, #12]
 800503e:	2100      	movs	r1, #0
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005042:	2100      	movs	r1, #0
 8005044:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005046:	4952      	ldr	r1, [pc, #328]	; (8005190 <HAL_RCC_GetSysClockFreq+0x160>)
 8005048:	6889      	ldr	r1, [r1, #8]
 800504a:	f001 010c 	and.w	r1, r1, #12
 800504e:	2908      	cmp	r1, #8
 8005050:	d00d      	beq.n	800506e <HAL_RCC_GetSysClockFreq+0x3e>
 8005052:	2908      	cmp	r1, #8
 8005054:	f200 8094 	bhi.w	8005180 <HAL_RCC_GetSysClockFreq+0x150>
 8005058:	2900      	cmp	r1, #0
 800505a:	d002      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0x32>
 800505c:	2904      	cmp	r1, #4
 800505e:	d003      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0x38>
 8005060:	e08e      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005062:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <HAL_RCC_GetSysClockFreq+0x164>)
 8005064:	60bb      	str	r3, [r7, #8]
       break;
 8005066:	e08e      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005068:	4b4b      	ldr	r3, [pc, #300]	; (8005198 <HAL_RCC_GetSysClockFreq+0x168>)
 800506a:	60bb      	str	r3, [r7, #8]
      break;
 800506c:	e08b      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506e:	4948      	ldr	r1, [pc, #288]	; (8005190 <HAL_RCC_GetSysClockFreq+0x160>)
 8005070:	6849      	ldr	r1, [r1, #4]
 8005072:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005076:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005078:	4945      	ldr	r1, [pc, #276]	; (8005190 <HAL_RCC_GetSysClockFreq+0x160>)
 800507a:	6849      	ldr	r1, [r1, #4]
 800507c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005080:	2900      	cmp	r1, #0
 8005082:	d024      	beq.n	80050ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005084:	4942      	ldr	r1, [pc, #264]	; (8005190 <HAL_RCC_GetSysClockFreq+0x160>)
 8005086:	6849      	ldr	r1, [r1, #4]
 8005088:	0989      	lsrs	r1, r1, #6
 800508a:	4608      	mov	r0, r1
 800508c:	f04f 0100 	mov.w	r1, #0
 8005090:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005094:	f04f 0500 	mov.w	r5, #0
 8005098:	ea00 0204 	and.w	r2, r0, r4
 800509c:	ea01 0305 	and.w	r3, r1, r5
 80050a0:	493d      	ldr	r1, [pc, #244]	; (8005198 <HAL_RCC_GetSysClockFreq+0x168>)
 80050a2:	fb01 f003 	mul.w	r0, r1, r3
 80050a6:	2100      	movs	r1, #0
 80050a8:	fb01 f102 	mul.w	r1, r1, r2
 80050ac:	1844      	adds	r4, r0, r1
 80050ae:	493a      	ldr	r1, [pc, #232]	; (8005198 <HAL_RCC_GetSysClockFreq+0x168>)
 80050b0:	fba2 0101 	umull	r0, r1, r2, r1
 80050b4:	1863      	adds	r3, r4, r1
 80050b6:	4619      	mov	r1, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	f7fb fd1e 	bl	8000b00 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4613      	mov	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e04a      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ce:	4b30      	ldr	r3, [pc, #192]	; (8005190 <HAL_RCC_GetSysClockFreq+0x160>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	099b      	lsrs	r3, r3, #6
 80050d4:	461a      	mov	r2, r3
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	ea02 0400 	and.w	r4, r2, r0
 80050e6:	ea03 0501 	and.w	r5, r3, r1
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	014b      	lsls	r3, r1, #5
 80050f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050fc:	0142      	lsls	r2, r0, #5
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	1b00      	subs	r0, r0, r4
 8005104:	eb61 0105 	sbc.w	r1, r1, r5
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	018b      	lsls	r3, r1, #6
 8005112:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005116:	0182      	lsls	r2, r0, #6
 8005118:	1a12      	subs	r2, r2, r0
 800511a:	eb63 0301 	sbc.w	r3, r3, r1
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	00d9      	lsls	r1, r3, #3
 8005128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512c:	00d0      	lsls	r0, r2, #3
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	1912      	adds	r2, r2, r4
 8005134:	eb45 0303 	adc.w	r3, r5, r3
 8005138:	f04f 0000 	mov.w	r0, #0
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	0299      	lsls	r1, r3, #10
 8005142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005146:	0290      	lsls	r0, r2, #10
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	461a      	mov	r2, r3
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	f7fb fcd2 	bl	8000b00 <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4613      	mov	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_GetSysClockFreq+0x160>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	3301      	adds	r3, #1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	60bb      	str	r3, [r7, #8]
      break;
 800517e:	e002      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <HAL_RCC_GetSysClockFreq+0x164>)
 8005182:	60bb      	str	r3, [r7, #8]
      break;
 8005184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005186:	68bb      	ldr	r3, [r7, #8]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bdb0      	pop	{r4, r5, r7, pc}
 8005190:	40023800 	.word	0x40023800
 8005194:	00f42400 	.word	0x00f42400
 8005198:	017d7840 	.word	0x017d7840

0800519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e07b      	b.n	80052a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d108      	bne.n	80051c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051be:	d009      	beq.n	80051d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	e005      	b.n	80051d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fe fff8 	bl	80041e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005258:	ea42 0103 	orr.w	r1, r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0104 	and.w	r1, r3, #4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	f003 0210 	and.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08c      	sub	sp, #48	; 0x30
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052bc:	2301      	movs	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x26>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e18a      	b.n	80055ea <HAL_SPI_TransmitReceive+0x33c>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052dc:	f7ff f896 	bl	800440c <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d00f      	beq.n	800531e <HAL_SPI_TransmitReceive+0x70>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005304:	d107      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x68>
 800530e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005312:	2b04      	cmp	r3, #4
 8005314:	d003      	beq.n	800531e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005316:	2302      	movs	r3, #2
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800531c:	e15b      	b.n	80055d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x82>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x82>
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005336:	e14e      	b.n	80055d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b04      	cmp	r3, #4
 8005342:	d003      	beq.n	800534c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2205      	movs	r2, #5
 8005348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	887a      	ldrh	r2, [r7, #2]
 8005362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	887a      	ldrh	r2, [r7, #2]
 800536e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a8:	d178      	bne.n	800549c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x10a>
 80053b2:	8b7b      	ldrh	r3, [r7, #26]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d166      	bne.n	8005486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053dc:	e053      	b.n	8005486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d11b      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x176>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x176>
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d113      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	881a      	ldrh	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	1c9a      	adds	r2, r3, #2
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d119      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1b8>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d014      	beq.n	8005466 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	b292      	uxth	r2, r2
 8005448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005462:	2301      	movs	r3, #1
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005466:	f7fe ffd1 	bl	800440c <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005472:	429a      	cmp	r2, r3
 8005474:	d807      	bhi.n	8005486 <HAL_SPI_TransmitReceive+0x1d8>
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d003      	beq.n	8005486 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005484:	e0a7      	b.n	80055d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1a6      	bne.n	80053de <HAL_SPI_TransmitReceive+0x130>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1a1      	bne.n	80053de <HAL_SPI_TransmitReceive+0x130>
 800549a:	e07c      	b.n	8005596 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x1fc>
 80054a4:	8b7b      	ldrh	r3, [r7, #26]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d16b      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	7812      	ldrb	r2, [r2, #0]
 80054b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d0:	e057      	b.n	8005582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d11c      	bne.n	800551a <HAL_SPI_TransmitReceive+0x26c>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d017      	beq.n	800551a <HAL_SPI_TransmitReceive+0x26c>
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d114      	bne.n	800551a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	7812      	ldrb	r2, [r2, #0]
 80054fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b01      	cmp	r3, #1
 8005526:	d119      	bne.n	800555c <HAL_SPI_TransmitReceive+0x2ae>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d014      	beq.n	800555c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005558:	2301      	movs	r3, #1
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800555c:	f7fe ff56 	bl	800440c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005568:	429a      	cmp	r2, r3
 800556a:	d803      	bhi.n	8005574 <HAL_SPI_TransmitReceive+0x2c6>
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d102      	bne.n	800557a <HAL_SPI_TransmitReceive+0x2cc>
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005580:	e029      	b.n	80055d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1a2      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x224>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d19d      	bne.n	80054d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f8c0 	bl	8005720 <SPI_EndRxTxTransaction>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d006      	beq.n	80055b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055b2:	e010      	b.n	80055d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	e000      	b.n	80055d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3730      	adds	r7, #48	; 0x30
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005600:	b2db      	uxtb	r3, r3
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005620:	f7fe fef4 	bl	800440c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	4413      	add	r3, r2
 800562e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005630:	f7fe feec 	bl	800440c <HAL_GetTick>
 8005634:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005636:	4b39      	ldr	r3, [pc, #228]	; (800571c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	015b      	lsls	r3, r3, #5
 800563c:	0d1b      	lsrs	r3, r3, #20
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	fb02 f303 	mul.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005646:	e054      	b.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564e:	d050      	beq.n	80056f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005650:	f7fe fedc 	bl	800440c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	429a      	cmp	r2, r3
 800565e:	d902      	bls.n	8005666 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d13d      	bne.n	80056e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005674:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567e:	d111      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005688:	d004      	beq.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005692:	d107      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ac:	d10f      	bne.n	80056ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e017      	b.n	8005712 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	429a      	cmp	r2, r3
 800570e:	d19b      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000000 	.word	0x20000000

08005720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800572c:	4b1b      	ldr	r3, [pc, #108]	; (800579c <SPI_EndRxTxTransaction+0x7c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <SPI_EndRxTxTransaction+0x80>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	0d5b      	lsrs	r3, r3, #21
 8005738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800573c:	fb02 f303 	mul.w	r3, r2, r3
 8005740:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574a:	d112      	bne.n	8005772 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff ff5a 	bl	8005610 <SPI_WaitFlagStateUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e00f      	b.n	8005792 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	3b01      	subs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b80      	cmp	r3, #128	; 0x80
 800578a:	d0f2      	beq.n	8005772 <SPI_EndRxTxTransaction+0x52>
 800578c:	e000      	b.n	8005790 <SPI_EndRxTxTransaction+0x70>
        break;
 800578e:	bf00      	nop
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000000 	.word	0x20000000
 80057a0:	165e9f81 	.word	0x165e9f81

080057a4 <__errno>:
 80057a4:	4b01      	ldr	r3, [pc, #4]	; (80057ac <__errno+0x8>)
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000000c 	.word	0x2000000c

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4d0d      	ldr	r5, [pc, #52]	; (80057e8 <__libc_init_array+0x38>)
 80057b4:	4c0d      	ldr	r4, [pc, #52]	; (80057ec <__libc_init_array+0x3c>)
 80057b6:	1b64      	subs	r4, r4, r5
 80057b8:	10a4      	asrs	r4, r4, #2
 80057ba:	2600      	movs	r6, #0
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	4d0b      	ldr	r5, [pc, #44]	; (80057f0 <__libc_init_array+0x40>)
 80057c2:	4c0c      	ldr	r4, [pc, #48]	; (80057f4 <__libc_init_array+0x44>)
 80057c4:	f000 ffee 	bl	80067a4 <_init>
 80057c8:	1b64      	subs	r4, r4, r5
 80057ca:	10a4      	asrs	r4, r4, #2
 80057cc:	2600      	movs	r6, #0
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08006a00 	.word	0x08006a00
 80057ec:	08006a00 	.word	0x08006a00
 80057f0:	08006a00 	.word	0x08006a00
 80057f4:	08006a04 	.word	0x08006a04

080057f8 <memset>:
 80057f8:	4402      	add	r2, r0
 80057fa:	4603      	mov	r3, r0
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d100      	bne.n	8005802 <memset+0xa>
 8005800:	4770      	bx	lr
 8005802:	f803 1b01 	strb.w	r1, [r3], #1
 8005806:	e7f9      	b.n	80057fc <memset+0x4>

08005808 <strcat>:
 8005808:	b510      	push	{r4, lr}
 800580a:	4602      	mov	r2, r0
 800580c:	7814      	ldrb	r4, [r2, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	3201      	adds	r2, #1
 8005812:	2c00      	cmp	r4, #0
 8005814:	d1fa      	bne.n	800580c <strcat+0x4>
 8005816:	3b01      	subs	r3, #1
 8005818:	f811 2b01 	ldrb.w	r2, [r1], #1
 800581c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005820:	2a00      	cmp	r2, #0
 8005822:	d1f9      	bne.n	8005818 <strcat+0x10>
 8005824:	bd10      	pop	{r4, pc}

08005826 <strcpy>:
 8005826:	4603      	mov	r3, r0
 8005828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800582c:	f803 2b01 	strb.w	r2, [r3], #1
 8005830:	2a00      	cmp	r2, #0
 8005832:	d1f9      	bne.n	8005828 <strcpy+0x2>
 8005834:	4770      	bx	lr
	...

08005838 <pow>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	ec59 8b10 	vmov	r8, r9, d0
 8005840:	ec57 6b11 	vmov	r6, r7, d1
 8005844:	f000 f8a8 	bl	8005998 <__ieee754_pow>
 8005848:	4b4e      	ldr	r3, [pc, #312]	; (8005984 <pow+0x14c>)
 800584a:	f993 3000 	ldrsb.w	r3, [r3]
 800584e:	3301      	adds	r3, #1
 8005850:	ec55 4b10 	vmov	r4, r5, d0
 8005854:	d015      	beq.n	8005882 <pow+0x4a>
 8005856:	4632      	mov	r2, r6
 8005858:	463b      	mov	r3, r7
 800585a:	4630      	mov	r0, r6
 800585c:	4639      	mov	r1, r7
 800585e:	f7fb f919 	bl	8000a94 <__aeabi_dcmpun>
 8005862:	b970      	cbnz	r0, 8005882 <pow+0x4a>
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fb f912 	bl	8000a94 <__aeabi_dcmpun>
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	b148      	cbz	r0, 800588a <pow+0x52>
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	f7fb f8d9 	bl	8000a30 <__aeabi_dcmpeq>
 800587e:	2800      	cmp	r0, #0
 8005880:	d17d      	bne.n	800597e <pow+0x146>
 8005882:	ec45 4b10 	vmov	d0, r4, r5
 8005886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800588a:	4640      	mov	r0, r8
 800588c:	4649      	mov	r1, r9
 800588e:	f7fb f8cf 	bl	8000a30 <__aeabi_dcmpeq>
 8005892:	b1e0      	cbz	r0, 80058ce <pow+0x96>
 8005894:	2200      	movs	r2, #0
 8005896:	2300      	movs	r3, #0
 8005898:	4630      	mov	r0, r6
 800589a:	4639      	mov	r1, r7
 800589c:	f7fb f8c8 	bl	8000a30 <__aeabi_dcmpeq>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d16c      	bne.n	800597e <pow+0x146>
 80058a4:	ec47 6b10 	vmov	d0, r6, r7
 80058a8:	f000 fe55 	bl	8006556 <finite>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0e8      	beq.n	8005882 <pow+0x4a>
 80058b0:	2200      	movs	r2, #0
 80058b2:	2300      	movs	r3, #0
 80058b4:	4630      	mov	r0, r6
 80058b6:	4639      	mov	r1, r7
 80058b8:	f7fb f8c4 	bl	8000a44 <__aeabi_dcmplt>
 80058bc:	2800      	cmp	r0, #0
 80058be:	d0e0      	beq.n	8005882 <pow+0x4a>
 80058c0:	f7ff ff70 	bl	80057a4 <__errno>
 80058c4:	2321      	movs	r3, #33	; 0x21
 80058c6:	6003      	str	r3, [r0, #0]
 80058c8:	2400      	movs	r4, #0
 80058ca:	4d2f      	ldr	r5, [pc, #188]	; (8005988 <pow+0x150>)
 80058cc:	e7d9      	b.n	8005882 <pow+0x4a>
 80058ce:	ec45 4b10 	vmov	d0, r4, r5
 80058d2:	f000 fe40 	bl	8006556 <finite>
 80058d6:	bbb8      	cbnz	r0, 8005948 <pow+0x110>
 80058d8:	ec49 8b10 	vmov	d0, r8, r9
 80058dc:	f000 fe3b 	bl	8006556 <finite>
 80058e0:	b390      	cbz	r0, 8005948 <pow+0x110>
 80058e2:	ec47 6b10 	vmov	d0, r6, r7
 80058e6:	f000 fe36 	bl	8006556 <finite>
 80058ea:	b368      	cbz	r0, 8005948 <pow+0x110>
 80058ec:	4622      	mov	r2, r4
 80058ee:	462b      	mov	r3, r5
 80058f0:	4620      	mov	r0, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	f7fb f8ce 	bl	8000a94 <__aeabi_dcmpun>
 80058f8:	b160      	cbz	r0, 8005914 <pow+0xdc>
 80058fa:	f7ff ff53 	bl	80057a4 <__errno>
 80058fe:	2321      	movs	r3, #33	; 0x21
 8005900:	6003      	str	r3, [r0, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	2300      	movs	r3, #0
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	f7fa ff53 	bl	80007b4 <__aeabi_ddiv>
 800590e:	4604      	mov	r4, r0
 8005910:	460d      	mov	r5, r1
 8005912:	e7b6      	b.n	8005882 <pow+0x4a>
 8005914:	f7ff ff46 	bl	80057a4 <__errno>
 8005918:	2322      	movs	r3, #34	; 0x22
 800591a:	6003      	str	r3, [r0, #0]
 800591c:	2200      	movs	r2, #0
 800591e:	2300      	movs	r3, #0
 8005920:	4640      	mov	r0, r8
 8005922:	4649      	mov	r1, r9
 8005924:	f7fb f88e 	bl	8000a44 <__aeabi_dcmplt>
 8005928:	2400      	movs	r4, #0
 800592a:	b158      	cbz	r0, 8005944 <pow+0x10c>
 800592c:	ec47 6b10 	vmov	d0, r6, r7
 8005930:	f000 fe26 	bl	8006580 <rint>
 8005934:	4632      	mov	r2, r6
 8005936:	ec51 0b10 	vmov	r0, r1, d0
 800593a:	463b      	mov	r3, r7
 800593c:	f7fb f878 	bl	8000a30 <__aeabi_dcmpeq>
 8005940:	2800      	cmp	r0, #0
 8005942:	d0c2      	beq.n	80058ca <pow+0x92>
 8005944:	4d11      	ldr	r5, [pc, #68]	; (800598c <pow+0x154>)
 8005946:	e79c      	b.n	8005882 <pow+0x4a>
 8005948:	2200      	movs	r2, #0
 800594a:	2300      	movs	r3, #0
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fb f86e 	bl	8000a30 <__aeabi_dcmpeq>
 8005954:	2800      	cmp	r0, #0
 8005956:	d094      	beq.n	8005882 <pow+0x4a>
 8005958:	ec49 8b10 	vmov	d0, r8, r9
 800595c:	f000 fdfb 	bl	8006556 <finite>
 8005960:	2800      	cmp	r0, #0
 8005962:	d08e      	beq.n	8005882 <pow+0x4a>
 8005964:	ec47 6b10 	vmov	d0, r6, r7
 8005968:	f000 fdf5 	bl	8006556 <finite>
 800596c:	2800      	cmp	r0, #0
 800596e:	d088      	beq.n	8005882 <pow+0x4a>
 8005970:	f7ff ff18 	bl	80057a4 <__errno>
 8005974:	2322      	movs	r3, #34	; 0x22
 8005976:	6003      	str	r3, [r0, #0]
 8005978:	2400      	movs	r4, #0
 800597a:	2500      	movs	r5, #0
 800597c:	e781      	b.n	8005882 <pow+0x4a>
 800597e:	4d04      	ldr	r5, [pc, #16]	; (8005990 <pow+0x158>)
 8005980:	2400      	movs	r4, #0
 8005982:	e77e      	b.n	8005882 <pow+0x4a>
 8005984:	20000070 	.word	0x20000070
 8005988:	fff00000 	.word	0xfff00000
 800598c:	7ff00000 	.word	0x7ff00000
 8005990:	3ff00000 	.word	0x3ff00000
 8005994:	00000000 	.word	0x00000000

08005998 <__ieee754_pow>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	ed2d 8b06 	vpush	{d8-d10}
 80059a0:	b08d      	sub	sp, #52	; 0x34
 80059a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80059a6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80059aa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80059ae:	ea56 0100 	orrs.w	r1, r6, r0
 80059b2:	ec53 2b10 	vmov	r2, r3, d0
 80059b6:	f000 84d1 	beq.w	800635c <__ieee754_pow+0x9c4>
 80059ba:	497f      	ldr	r1, [pc, #508]	; (8005bb8 <__ieee754_pow+0x220>)
 80059bc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80059c0:	428c      	cmp	r4, r1
 80059c2:	ee10 8a10 	vmov	r8, s0
 80059c6:	4699      	mov	r9, r3
 80059c8:	dc09      	bgt.n	80059de <__ieee754_pow+0x46>
 80059ca:	d103      	bne.n	80059d4 <__ieee754_pow+0x3c>
 80059cc:	b97a      	cbnz	r2, 80059ee <__ieee754_pow+0x56>
 80059ce:	42a6      	cmp	r6, r4
 80059d0:	dd02      	ble.n	80059d8 <__ieee754_pow+0x40>
 80059d2:	e00c      	b.n	80059ee <__ieee754_pow+0x56>
 80059d4:	428e      	cmp	r6, r1
 80059d6:	dc02      	bgt.n	80059de <__ieee754_pow+0x46>
 80059d8:	428e      	cmp	r6, r1
 80059da:	d110      	bne.n	80059fe <__ieee754_pow+0x66>
 80059dc:	b178      	cbz	r0, 80059fe <__ieee754_pow+0x66>
 80059de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80059e2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80059e6:	ea54 0308 	orrs.w	r3, r4, r8
 80059ea:	f000 84b7 	beq.w	800635c <__ieee754_pow+0x9c4>
 80059ee:	4873      	ldr	r0, [pc, #460]	; (8005bbc <__ieee754_pow+0x224>)
 80059f0:	b00d      	add	sp, #52	; 0x34
 80059f2:	ecbd 8b06 	vpop	{d8-d10}
 80059f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fa:	f000 bdb9 	b.w	8006570 <nan>
 80059fe:	f1b9 0f00 	cmp.w	r9, #0
 8005a02:	da36      	bge.n	8005a72 <__ieee754_pow+0xda>
 8005a04:	496e      	ldr	r1, [pc, #440]	; (8005bc0 <__ieee754_pow+0x228>)
 8005a06:	428e      	cmp	r6, r1
 8005a08:	dc51      	bgt.n	8005aae <__ieee754_pow+0x116>
 8005a0a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005a0e:	428e      	cmp	r6, r1
 8005a10:	f340 84af 	ble.w	8006372 <__ieee754_pow+0x9da>
 8005a14:	1531      	asrs	r1, r6, #20
 8005a16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005a1a:	2914      	cmp	r1, #20
 8005a1c:	dd0f      	ble.n	8005a3e <__ieee754_pow+0xa6>
 8005a1e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005a22:	fa20 fc01 	lsr.w	ip, r0, r1
 8005a26:	fa0c f101 	lsl.w	r1, ip, r1
 8005a2a:	4281      	cmp	r1, r0
 8005a2c:	f040 84a1 	bne.w	8006372 <__ieee754_pow+0x9da>
 8005a30:	f00c 0c01 	and.w	ip, ip, #1
 8005a34:	f1cc 0102 	rsb	r1, ip, #2
 8005a38:	9100      	str	r1, [sp, #0]
 8005a3a:	b180      	cbz	r0, 8005a5e <__ieee754_pow+0xc6>
 8005a3c:	e059      	b.n	8005af2 <__ieee754_pow+0x15a>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d155      	bne.n	8005aee <__ieee754_pow+0x156>
 8005a42:	f1c1 0114 	rsb	r1, r1, #20
 8005a46:	fa46 fc01 	asr.w	ip, r6, r1
 8005a4a:	fa0c f101 	lsl.w	r1, ip, r1
 8005a4e:	42b1      	cmp	r1, r6
 8005a50:	f040 848c 	bne.w	800636c <__ieee754_pow+0x9d4>
 8005a54:	f00c 0c01 	and.w	ip, ip, #1
 8005a58:	f1cc 0102 	rsb	r1, ip, #2
 8005a5c:	9100      	str	r1, [sp, #0]
 8005a5e:	4959      	ldr	r1, [pc, #356]	; (8005bc4 <__ieee754_pow+0x22c>)
 8005a60:	428e      	cmp	r6, r1
 8005a62:	d12d      	bne.n	8005ac0 <__ieee754_pow+0x128>
 8005a64:	2f00      	cmp	r7, #0
 8005a66:	da79      	bge.n	8005b5c <__ieee754_pow+0x1c4>
 8005a68:	4956      	ldr	r1, [pc, #344]	; (8005bc4 <__ieee754_pow+0x22c>)
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f7fa fea2 	bl	80007b4 <__aeabi_ddiv>
 8005a70:	e016      	b.n	8005aa0 <__ieee754_pow+0x108>
 8005a72:	2100      	movs	r1, #0
 8005a74:	9100      	str	r1, [sp, #0]
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d13b      	bne.n	8005af2 <__ieee754_pow+0x15a>
 8005a7a:	494f      	ldr	r1, [pc, #316]	; (8005bb8 <__ieee754_pow+0x220>)
 8005a7c:	428e      	cmp	r6, r1
 8005a7e:	d1ee      	bne.n	8005a5e <__ieee754_pow+0xc6>
 8005a80:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005a84:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005a88:	ea53 0308 	orrs.w	r3, r3, r8
 8005a8c:	f000 8466 	beq.w	800635c <__ieee754_pow+0x9c4>
 8005a90:	4b4d      	ldr	r3, [pc, #308]	; (8005bc8 <__ieee754_pow+0x230>)
 8005a92:	429c      	cmp	r4, r3
 8005a94:	dd0d      	ble.n	8005ab2 <__ieee754_pow+0x11a>
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	f280 8464 	bge.w	8006364 <__ieee754_pow+0x9cc>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	ec41 0b10 	vmov	d0, r0, r1
 8005aa4:	b00d      	add	sp, #52	; 0x34
 8005aa6:	ecbd 8b06 	vpop	{d8-d10}
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	2102      	movs	r1, #2
 8005ab0:	e7e0      	b.n	8005a74 <__ieee754_pow+0xdc>
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	daf2      	bge.n	8005a9c <__ieee754_pow+0x104>
 8005ab6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005aba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005abe:	e7ef      	b.n	8005aa0 <__ieee754_pow+0x108>
 8005ac0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005ac4:	d104      	bne.n	8005ad0 <__ieee754_pow+0x138>
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	f7fa fd49 	bl	8000560 <__aeabi_dmul>
 8005ace:	e7e7      	b.n	8005aa0 <__ieee754_pow+0x108>
 8005ad0:	493e      	ldr	r1, [pc, #248]	; (8005bcc <__ieee754_pow+0x234>)
 8005ad2:	428f      	cmp	r7, r1
 8005ad4:	d10d      	bne.n	8005af2 <__ieee754_pow+0x15a>
 8005ad6:	f1b9 0f00 	cmp.w	r9, #0
 8005ada:	db0a      	blt.n	8005af2 <__ieee754_pow+0x15a>
 8005adc:	ec43 2b10 	vmov	d0, r2, r3
 8005ae0:	b00d      	add	sp, #52	; 0x34
 8005ae2:	ecbd 8b06 	vpop	{d8-d10}
 8005ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aea:	f000 bc77 	b.w	80063dc <__ieee754_sqrt>
 8005aee:	2100      	movs	r1, #0
 8005af0:	9100      	str	r1, [sp, #0]
 8005af2:	ec43 2b10 	vmov	d0, r2, r3
 8005af6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005afa:	f000 fd23 	bl	8006544 <fabs>
 8005afe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b02:	ec51 0b10 	vmov	r0, r1, d0
 8005b06:	f1b8 0f00 	cmp.w	r8, #0
 8005b0a:	d12a      	bne.n	8005b62 <__ieee754_pow+0x1ca>
 8005b0c:	b12c      	cbz	r4, 8005b1a <__ieee754_pow+0x182>
 8005b0e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005bc4 <__ieee754_pow+0x22c>
 8005b12:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005b16:	45e6      	cmp	lr, ip
 8005b18:	d123      	bne.n	8005b62 <__ieee754_pow+0x1ca>
 8005b1a:	2f00      	cmp	r7, #0
 8005b1c:	da05      	bge.n	8005b2a <__ieee754_pow+0x192>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	2000      	movs	r0, #0
 8005b24:	4927      	ldr	r1, [pc, #156]	; (8005bc4 <__ieee754_pow+0x22c>)
 8005b26:	f7fa fe45 	bl	80007b4 <__aeabi_ddiv>
 8005b2a:	f1b9 0f00 	cmp.w	r9, #0
 8005b2e:	dab7      	bge.n	8005aa0 <__ieee754_pow+0x108>
 8005b30:	9b00      	ldr	r3, [sp, #0]
 8005b32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005b36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005b3a:	4323      	orrs	r3, r4
 8005b3c:	d108      	bne.n	8005b50 <__ieee754_pow+0x1b8>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	f7fa fb53 	bl	80001f0 <__aeabi_dsub>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	e78d      	b.n	8005a6c <__ieee754_pow+0xd4>
 8005b50:	9b00      	ldr	r3, [sp, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d1a4      	bne.n	8005aa0 <__ieee754_pow+0x108>
 8005b56:	4602      	mov	r2, r0
 8005b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	4619      	mov	r1, r3
 8005b60:	e79e      	b.n	8005aa0 <__ieee754_pow+0x108>
 8005b62:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005b66:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005b6a:	950a      	str	r5, [sp, #40]	; 0x28
 8005b6c:	9d00      	ldr	r5, [sp, #0]
 8005b6e:	46ac      	mov	ip, r5
 8005b70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005b72:	ea5c 0505 	orrs.w	r5, ip, r5
 8005b76:	d0e4      	beq.n	8005b42 <__ieee754_pow+0x1aa>
 8005b78:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <__ieee754_pow+0x238>)
 8005b7a:	429e      	cmp	r6, r3
 8005b7c:	f340 80fc 	ble.w	8005d78 <__ieee754_pow+0x3e0>
 8005b80:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005b84:	429e      	cmp	r6, r3
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <__ieee754_pow+0x230>)
 8005b88:	dd07      	ble.n	8005b9a <__ieee754_pow+0x202>
 8005b8a:	429c      	cmp	r4, r3
 8005b8c:	dc0a      	bgt.n	8005ba4 <__ieee754_pow+0x20c>
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	da84      	bge.n	8005a9c <__ieee754_pow+0x104>
 8005b92:	a307      	add	r3, pc, #28	; (adr r3, 8005bb0 <__ieee754_pow+0x218>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	e795      	b.n	8005ac6 <__ieee754_pow+0x12e>
 8005b9a:	429c      	cmp	r4, r3
 8005b9c:	dbf7      	blt.n	8005b8e <__ieee754_pow+0x1f6>
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <__ieee754_pow+0x22c>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	dd17      	ble.n	8005bd4 <__ieee754_pow+0x23c>
 8005ba4:	2f00      	cmp	r7, #0
 8005ba6:	dcf4      	bgt.n	8005b92 <__ieee754_pow+0x1fa>
 8005ba8:	e778      	b.n	8005a9c <__ieee754_pow+0x104>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
 8005bb0:	8800759c 	.word	0x8800759c
 8005bb4:	7e37e43c 	.word	0x7e37e43c
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	080069b4 	.word	0x080069b4
 8005bc0:	433fffff 	.word	0x433fffff
 8005bc4:	3ff00000 	.word	0x3ff00000
 8005bc8:	3fefffff 	.word	0x3fefffff
 8005bcc:	3fe00000 	.word	0x3fe00000
 8005bd0:	41e00000 	.word	0x41e00000
 8005bd4:	4b64      	ldr	r3, [pc, #400]	; (8005d68 <__ieee754_pow+0x3d0>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f7fa fb0a 	bl	80001f0 <__aeabi_dsub>
 8005bdc:	a356      	add	r3, pc, #344	; (adr r3, 8005d38 <__ieee754_pow+0x3a0>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	4604      	mov	r4, r0
 8005be4:	460d      	mov	r5, r1
 8005be6:	f7fa fcbb 	bl	8000560 <__aeabi_dmul>
 8005bea:	a355      	add	r3, pc, #340	; (adr r3, 8005d40 <__ieee754_pow+0x3a8>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa fcb2 	bl	8000560 <__aeabi_dmul>
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	; (8005d6c <__ieee754_pow+0x3d4>)
 8005bfe:	4682      	mov	sl, r0
 8005c00:	468b      	mov	fp, r1
 8005c02:	2200      	movs	r2, #0
 8005c04:	4620      	mov	r0, r4
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fa fcaa 	bl	8000560 <__aeabi_dmul>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	a14d      	add	r1, pc, #308	; (adr r1, 8005d48 <__ieee754_pow+0x3b0>)
 8005c12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c16:	f7fa faeb 	bl	80001f0 <__aeabi_dsub>
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	f7fa fc9f 	bl	8000560 <__aeabi_dmul>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	2000      	movs	r0, #0
 8005c28:	4951      	ldr	r1, [pc, #324]	; (8005d70 <__ieee754_pow+0x3d8>)
 8005c2a:	f7fa fae1 	bl	80001f0 <__aeabi_dsub>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	4680      	mov	r8, r0
 8005c32:	4689      	mov	r9, r1
 8005c34:	462b      	mov	r3, r5
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7fa fc91 	bl	8000560 <__aeabi_dmul>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7fa fc8b 	bl	8000560 <__aeabi_dmul>
 8005c4a:	a341      	add	r3, pc, #260	; (adr r3, 8005d50 <__ieee754_pow+0x3b8>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fc86 	bl	8000560 <__aeabi_dmul>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4650      	mov	r0, sl
 8005c5a:	4659      	mov	r1, fp
 8005c5c:	f7fa fac8 	bl	80001f0 <__aeabi_dsub>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4680      	mov	r8, r0
 8005c66:	4689      	mov	r9, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fac2 	bl	80001f4 <__adddf3>
 8005c70:	2400      	movs	r4, #0
 8005c72:	4632      	mov	r2, r6
 8005c74:	463b      	mov	r3, r7
 8005c76:	4620      	mov	r0, r4
 8005c78:	460d      	mov	r5, r1
 8005c7a:	f7fa fab9 	bl	80001f0 <__aeabi_dsub>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4640      	mov	r0, r8
 8005c84:	4649      	mov	r1, r9
 8005c86:	f7fa fab3 	bl	80001f0 <__aeabi_dsub>
 8005c8a:	9b00      	ldr	r3, [sp, #0]
 8005c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	4682      	mov	sl, r0
 8005c94:	468b      	mov	fp, r1
 8005c96:	f040 81f1 	bne.w	800607c <__ieee754_pow+0x6e4>
 8005c9a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005d58 <__ieee754_pow+0x3c0>
 8005c9e:	eeb0 8a47 	vmov.f32	s16, s14
 8005ca2:	eef0 8a67 	vmov.f32	s17, s15
 8005ca6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005caa:	2600      	movs	r6, #0
 8005cac:	4632      	mov	r2, r6
 8005cae:	463b      	mov	r3, r7
 8005cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb4:	f7fa fa9c 	bl	80001f0 <__aeabi_dsub>
 8005cb8:	4622      	mov	r2, r4
 8005cba:	462b      	mov	r3, r5
 8005cbc:	f7fa fc50 	bl	8000560 <__aeabi_dmul>
 8005cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4689      	mov	r9, r1
 8005cc8:	4650      	mov	r0, sl
 8005cca:	4659      	mov	r1, fp
 8005ccc:	f7fa fc48 	bl	8000560 <__aeabi_dmul>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa fa8c 	bl	80001f4 <__adddf3>
 8005cdc:	4632      	mov	r2, r6
 8005cde:	463b      	mov	r3, r7
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	4689      	mov	r9, r1
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7fa fc3a 	bl	8000560 <__aeabi_dmul>
 8005cec:	460b      	mov	r3, r1
 8005cee:	4604      	mov	r4, r0
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f7fa fa7c 	bl	80001f4 <__adddf3>
 8005cfc:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <__ieee754_pow+0x3dc>)
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	ec45 4b19 	vmov	d9, r4, r5
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	468b      	mov	fp, r1
 8005d0a:	f340 82fe 	ble.w	800630a <__ieee754_pow+0x972>
 8005d0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005d12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005d16:	4303      	orrs	r3, r0
 8005d18:	f000 81f0 	beq.w	80060fc <__ieee754_pow+0x764>
 8005d1c:	a310      	add	r3, pc, #64	; (adr r3, 8005d60 <__ieee754_pow+0x3c8>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	ec51 0b18 	vmov	r0, r1, d8
 8005d26:	f7fa fc1b 	bl	8000560 <__aeabi_dmul>
 8005d2a:	a30d      	add	r3, pc, #52	; (adr r3, 8005d60 <__ieee754_pow+0x3c8>)
 8005d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d30:	e6cb      	b.n	8005aca <__ieee754_pow+0x132>
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	60000000 	.word	0x60000000
 8005d3c:	3ff71547 	.word	0x3ff71547
 8005d40:	f85ddf44 	.word	0xf85ddf44
 8005d44:	3e54ae0b 	.word	0x3e54ae0b
 8005d48:	55555555 	.word	0x55555555
 8005d4c:	3fd55555 	.word	0x3fd55555
 8005d50:	652b82fe 	.word	0x652b82fe
 8005d54:	3ff71547 	.word	0x3ff71547
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	bff00000 	.word	0xbff00000
 8005d60:	8800759c 	.word	0x8800759c
 8005d64:	7e37e43c 	.word	0x7e37e43c
 8005d68:	3ff00000 	.word	0x3ff00000
 8005d6c:	3fd00000 	.word	0x3fd00000
 8005d70:	3fe00000 	.word	0x3fe00000
 8005d74:	408fffff 	.word	0x408fffff
 8005d78:	4bd7      	ldr	r3, [pc, #860]	; (80060d8 <__ieee754_pow+0x740>)
 8005d7a:	ea03 0309 	and.w	r3, r3, r9
 8005d7e:	2200      	movs	r2, #0
 8005d80:	b92b      	cbnz	r3, 8005d8e <__ieee754_pow+0x3f6>
 8005d82:	4bd6      	ldr	r3, [pc, #856]	; (80060dc <__ieee754_pow+0x744>)
 8005d84:	f7fa fbec 	bl	8000560 <__aeabi_dmul>
 8005d88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	1523      	asrs	r3, r4, #20
 8005d90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d94:	4413      	add	r3, r2
 8005d96:	9309      	str	r3, [sp, #36]	; 0x24
 8005d98:	4bd1      	ldr	r3, [pc, #836]	; (80060e0 <__ieee754_pow+0x748>)
 8005d9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005d9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005da2:	429c      	cmp	r4, r3
 8005da4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005da8:	dd08      	ble.n	8005dbc <__ieee754_pow+0x424>
 8005daa:	4bce      	ldr	r3, [pc, #824]	; (80060e4 <__ieee754_pow+0x74c>)
 8005dac:	429c      	cmp	r4, r3
 8005dae:	f340 8163 	ble.w	8006078 <__ieee754_pow+0x6e0>
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	3301      	adds	r3, #1
 8005db6:	9309      	str	r3, [sp, #36]	; 0x24
 8005db8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005dbc:	2400      	movs	r4, #0
 8005dbe:	00e3      	lsls	r3, r4, #3
 8005dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc2:	4bc9      	ldr	r3, [pc, #804]	; (80060e8 <__ieee754_pow+0x750>)
 8005dc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dc8:	ed93 7b00 	vldr	d7, [r3]
 8005dcc:	4629      	mov	r1, r5
 8005dce:	ec53 2b17 	vmov	r2, r3, d7
 8005dd2:	eeb0 8a47 	vmov.f32	s16, s14
 8005dd6:	eef0 8a67 	vmov.f32	s17, s15
 8005dda:	4682      	mov	sl, r0
 8005ddc:	f7fa fa08 	bl	80001f0 <__aeabi_dsub>
 8005de0:	4652      	mov	r2, sl
 8005de2:	4606      	mov	r6, r0
 8005de4:	460f      	mov	r7, r1
 8005de6:	462b      	mov	r3, r5
 8005de8:	ec51 0b18 	vmov	r0, r1, d8
 8005dec:	f7fa fa02 	bl	80001f4 <__adddf3>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	2000      	movs	r0, #0
 8005df6:	49bd      	ldr	r1, [pc, #756]	; (80060ec <__ieee754_pow+0x754>)
 8005df8:	f7fa fcdc 	bl	80007b4 <__aeabi_ddiv>
 8005dfc:	ec41 0b19 	vmov	d9, r0, r1
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4630      	mov	r0, r6
 8005e06:	4639      	mov	r1, r7
 8005e08:	f7fa fbaa 	bl	8000560 <__aeabi_dmul>
 8005e0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e20:	46ab      	mov	fp, r5
 8005e22:	106d      	asrs	r5, r5, #1
 8005e24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005e2c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005e30:	2200      	movs	r2, #0
 8005e32:	4640      	mov	r0, r8
 8005e34:	4649      	mov	r1, r9
 8005e36:	4614      	mov	r4, r2
 8005e38:	461d      	mov	r5, r3
 8005e3a:	f7fa fb91 	bl	8000560 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4630      	mov	r0, r6
 8005e44:	4639      	mov	r1, r7
 8005e46:	f7fa f9d3 	bl	80001f0 <__aeabi_dsub>
 8005e4a:	ec53 2b18 	vmov	r2, r3, d8
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa f9cb 	bl	80001f0 <__aeabi_dsub>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4650      	mov	r0, sl
 8005e60:	4659      	mov	r1, fp
 8005e62:	f7fa f9c5 	bl	80001f0 <__aeabi_dsub>
 8005e66:	4642      	mov	r2, r8
 8005e68:	464b      	mov	r3, r9
 8005e6a:	f7fa fb79 	bl	8000560 <__aeabi_dmul>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4630      	mov	r0, r6
 8005e74:	4639      	mov	r1, r7
 8005e76:	f7fa f9bb 	bl	80001f0 <__aeabi_dsub>
 8005e7a:	ec53 2b19 	vmov	r2, r3, d9
 8005e7e:	f7fa fb6f 	bl	8000560 <__aeabi_dmul>
 8005e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e86:	ec41 0b18 	vmov	d8, r0, r1
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fa fb67 	bl	8000560 <__aeabi_dmul>
 8005e92:	a37d      	add	r3, pc, #500	; (adr r3, 8006088 <__ieee754_pow+0x6f0>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	4604      	mov	r4, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	f7fa fb60 	bl	8000560 <__aeabi_dmul>
 8005ea0:	a37b      	add	r3, pc, #492	; (adr r3, 8006090 <__ieee754_pow+0x6f8>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f9a5 	bl	80001f4 <__adddf3>
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	f7fa fb57 	bl	8000560 <__aeabi_dmul>
 8005eb2:	a379      	add	r3, pc, #484	; (adr r3, 8006098 <__ieee754_pow+0x700>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f99c 	bl	80001f4 <__adddf3>
 8005ebc:	4622      	mov	r2, r4
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	f7fa fb4e 	bl	8000560 <__aeabi_dmul>
 8005ec4:	a376      	add	r3, pc, #472	; (adr r3, 80060a0 <__ieee754_pow+0x708>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f993 	bl	80001f4 <__adddf3>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f7fa fb45 	bl	8000560 <__aeabi_dmul>
 8005ed6:	a374      	add	r3, pc, #464	; (adr r3, 80060a8 <__ieee754_pow+0x710>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f98a 	bl	80001f4 <__adddf3>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	f7fa fb3c 	bl	8000560 <__aeabi_dmul>
 8005ee8:	a371      	add	r3, pc, #452	; (adr r3, 80060b0 <__ieee754_pow+0x718>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f981 	bl	80001f4 <__adddf3>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	460f      	mov	r7, r1
 8005ef8:	462b      	mov	r3, r5
 8005efa:	4620      	mov	r0, r4
 8005efc:	4629      	mov	r1, r5
 8005efe:	f7fa fb2f 	bl	8000560 <__aeabi_dmul>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4630      	mov	r0, r6
 8005f08:	4639      	mov	r1, r7
 8005f0a:	f7fa fb29 	bl	8000560 <__aeabi_dmul>
 8005f0e:	4642      	mov	r2, r8
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	464b      	mov	r3, r9
 8005f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f1a:	f7fa f96b 	bl	80001f4 <__adddf3>
 8005f1e:	ec53 2b18 	vmov	r2, r3, d8
 8005f22:	f7fa fb1d 	bl	8000560 <__aeabi_dmul>
 8005f26:	4622      	mov	r2, r4
 8005f28:	462b      	mov	r3, r5
 8005f2a:	f7fa f963 	bl	80001f4 <__adddf3>
 8005f2e:	4642      	mov	r2, r8
 8005f30:	4682      	mov	sl, r0
 8005f32:	468b      	mov	fp, r1
 8005f34:	464b      	mov	r3, r9
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fb11 	bl	8000560 <__aeabi_dmul>
 8005f3e:	4b6c      	ldr	r3, [pc, #432]	; (80060f0 <__ieee754_pow+0x758>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	4606      	mov	r6, r0
 8005f44:	460f      	mov	r7, r1
 8005f46:	f7fa f955 	bl	80001f4 <__adddf3>
 8005f4a:	4652      	mov	r2, sl
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	f7fa f951 	bl	80001f4 <__adddf3>
 8005f52:	9c04      	ldr	r4, [sp, #16]
 8005f54:	460d      	mov	r5, r1
 8005f56:	4622      	mov	r2, r4
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	f7fa faff 	bl	8000560 <__aeabi_dmul>
 8005f62:	4b63      	ldr	r3, [pc, #396]	; (80060f0 <__ieee754_pow+0x758>)
 8005f64:	4680      	mov	r8, r0
 8005f66:	4689      	mov	r9, r1
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7fa f93f 	bl	80001f0 <__aeabi_dsub>
 8005f72:	4632      	mov	r2, r6
 8005f74:	463b      	mov	r3, r7
 8005f76:	f7fa f93b 	bl	80001f0 <__aeabi_dsub>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4650      	mov	r0, sl
 8005f80:	4659      	mov	r1, fp
 8005f82:	f7fa f935 	bl	80001f0 <__aeabi_dsub>
 8005f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f8a:	f7fa fae9 	bl	8000560 <__aeabi_dmul>
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4606      	mov	r6, r0
 8005f92:	460f      	mov	r7, r1
 8005f94:	462b      	mov	r3, r5
 8005f96:	ec51 0b18 	vmov	r0, r1, d8
 8005f9a:	f7fa fae1 	bl	8000560 <__aeabi_dmul>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	f7fa f925 	bl	80001f4 <__adddf3>
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f7fa f91d 	bl	80001f4 <__adddf3>
 8005fba:	9c04      	ldr	r4, [sp, #16]
 8005fbc:	a33e      	add	r3, pc, #248	; (adr r3, 80060b8 <__ieee754_pow+0x720>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	f7fa facb 	bl	8000560 <__aeabi_dmul>
 8005fca:	4642      	mov	r2, r8
 8005fcc:	ec41 0b18 	vmov	d8, r0, r1
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f7fa f90b 	bl	80001f0 <__aeabi_dsub>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa f905 	bl	80001f0 <__aeabi_dsub>
 8005fe6:	a336      	add	r3, pc, #216	; (adr r3, 80060c0 <__ieee754_pow+0x728>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	f7fa fab8 	bl	8000560 <__aeabi_dmul>
 8005ff0:	a335      	add	r3, pc, #212	; (adr r3, 80060c8 <__ieee754_pow+0x730>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	f7fa faaf 	bl	8000560 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4630      	mov	r0, r6
 8006008:	4639      	mov	r1, r7
 800600a:	f7fa f8f3 	bl	80001f4 <__adddf3>
 800600e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006010:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <__ieee754_pow+0x75c>)
 8006012:	4413      	add	r3, r2
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa f8ec 	bl	80001f4 <__adddf3>
 800601c:	4682      	mov	sl, r0
 800601e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006020:	468b      	mov	fp, r1
 8006022:	f7fa fa33 	bl	800048c <__aeabi_i2d>
 8006026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006028:	4b33      	ldr	r3, [pc, #204]	; (80060f8 <__ieee754_pow+0x760>)
 800602a:	4413      	add	r3, r2
 800602c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006030:	4606      	mov	r6, r0
 8006032:	460f      	mov	r7, r1
 8006034:	4652      	mov	r2, sl
 8006036:	465b      	mov	r3, fp
 8006038:	ec51 0b18 	vmov	r0, r1, d8
 800603c:	f7fa f8da 	bl	80001f4 <__adddf3>
 8006040:	4642      	mov	r2, r8
 8006042:	464b      	mov	r3, r9
 8006044:	f7fa f8d6 	bl	80001f4 <__adddf3>
 8006048:	4632      	mov	r2, r6
 800604a:	463b      	mov	r3, r7
 800604c:	f7fa f8d2 	bl	80001f4 <__adddf3>
 8006050:	9c04      	ldr	r4, [sp, #16]
 8006052:	4632      	mov	r2, r6
 8006054:	463b      	mov	r3, r7
 8006056:	4620      	mov	r0, r4
 8006058:	460d      	mov	r5, r1
 800605a:	f7fa f8c9 	bl	80001f0 <__aeabi_dsub>
 800605e:	4642      	mov	r2, r8
 8006060:	464b      	mov	r3, r9
 8006062:	f7fa f8c5 	bl	80001f0 <__aeabi_dsub>
 8006066:	ec53 2b18 	vmov	r2, r3, d8
 800606a:	f7fa f8c1 	bl	80001f0 <__aeabi_dsub>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4650      	mov	r0, sl
 8006074:	4659      	mov	r1, fp
 8006076:	e606      	b.n	8005c86 <__ieee754_pow+0x2ee>
 8006078:	2401      	movs	r4, #1
 800607a:	e6a0      	b.n	8005dbe <__ieee754_pow+0x426>
 800607c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80060d0 <__ieee754_pow+0x738>
 8006080:	e60d      	b.n	8005c9e <__ieee754_pow+0x306>
 8006082:	bf00      	nop
 8006084:	f3af 8000 	nop.w
 8006088:	4a454eef 	.word	0x4a454eef
 800608c:	3fca7e28 	.word	0x3fca7e28
 8006090:	93c9db65 	.word	0x93c9db65
 8006094:	3fcd864a 	.word	0x3fcd864a
 8006098:	a91d4101 	.word	0xa91d4101
 800609c:	3fd17460 	.word	0x3fd17460
 80060a0:	518f264d 	.word	0x518f264d
 80060a4:	3fd55555 	.word	0x3fd55555
 80060a8:	db6fabff 	.word	0xdb6fabff
 80060ac:	3fdb6db6 	.word	0x3fdb6db6
 80060b0:	33333303 	.word	0x33333303
 80060b4:	3fe33333 	.word	0x3fe33333
 80060b8:	e0000000 	.word	0xe0000000
 80060bc:	3feec709 	.word	0x3feec709
 80060c0:	dc3a03fd 	.word	0xdc3a03fd
 80060c4:	3feec709 	.word	0x3feec709
 80060c8:	145b01f5 	.word	0x145b01f5
 80060cc:	be3e2fe0 	.word	0xbe3e2fe0
 80060d0:	00000000 	.word	0x00000000
 80060d4:	3ff00000 	.word	0x3ff00000
 80060d8:	7ff00000 	.word	0x7ff00000
 80060dc:	43400000 	.word	0x43400000
 80060e0:	0003988e 	.word	0x0003988e
 80060e4:	000bb679 	.word	0x000bb679
 80060e8:	080069b8 	.word	0x080069b8
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	40080000 	.word	0x40080000
 80060f4:	080069d8 	.word	0x080069d8
 80060f8:	080069c8 	.word	0x080069c8
 80060fc:	a3b5      	add	r3, pc, #724	; (adr r3, 80063d4 <__ieee754_pow+0xa3c>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa f875 	bl	80001f4 <__adddf3>
 800610a:	4622      	mov	r2, r4
 800610c:	ec41 0b1a 	vmov	d10, r0, r1
 8006110:	462b      	mov	r3, r5
 8006112:	4630      	mov	r0, r6
 8006114:	4639      	mov	r1, r7
 8006116:	f7fa f86b 	bl	80001f0 <__aeabi_dsub>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	ec51 0b1a 	vmov	r0, r1, d10
 8006122:	f7fa fcad 	bl	8000a80 <__aeabi_dcmpgt>
 8006126:	2800      	cmp	r0, #0
 8006128:	f47f adf8 	bne.w	8005d1c <__ieee754_pow+0x384>
 800612c:	4aa4      	ldr	r2, [pc, #656]	; (80063c0 <__ieee754_pow+0xa28>)
 800612e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006132:	4293      	cmp	r3, r2
 8006134:	f340 810b 	ble.w	800634e <__ieee754_pow+0x9b6>
 8006138:	151b      	asrs	r3, r3, #20
 800613a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800613e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006142:	fa4a f303 	asr.w	r3, sl, r3
 8006146:	445b      	add	r3, fp
 8006148:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800614c:	4e9d      	ldr	r6, [pc, #628]	; (80063c4 <__ieee754_pow+0xa2c>)
 800614e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006152:	4116      	asrs	r6, r2
 8006154:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006158:	2000      	movs	r0, #0
 800615a:	ea23 0106 	bic.w	r1, r3, r6
 800615e:	f1c2 0214 	rsb	r2, r2, #20
 8006162:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006166:	fa4a fa02 	asr.w	sl, sl, r2
 800616a:	f1bb 0f00 	cmp.w	fp, #0
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	bfb8      	it	lt
 8006178:	f1ca 0a00 	rsblt	sl, sl, #0
 800617c:	f7fa f838 	bl	80001f0 <__aeabi_dsub>
 8006180:	ec41 0b19 	vmov	d9, r0, r1
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	ec51 0b19 	vmov	r0, r1, d9
 800618c:	f7fa f832 	bl	80001f4 <__adddf3>
 8006190:	2400      	movs	r4, #0
 8006192:	a379      	add	r3, pc, #484	; (adr r3, 8006378 <__ieee754_pow+0x9e0>)
 8006194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006198:	4620      	mov	r0, r4
 800619a:	460d      	mov	r5, r1
 800619c:	f7fa f9e0 	bl	8000560 <__aeabi_dmul>
 80061a0:	ec53 2b19 	vmov	r2, r3, d9
 80061a4:	4606      	mov	r6, r0
 80061a6:	460f      	mov	r7, r1
 80061a8:	4620      	mov	r0, r4
 80061aa:	4629      	mov	r1, r5
 80061ac:	f7fa f820 	bl	80001f0 <__aeabi_dsub>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4640      	mov	r0, r8
 80061b6:	4649      	mov	r1, r9
 80061b8:	f7fa f81a 	bl	80001f0 <__aeabi_dsub>
 80061bc:	a370      	add	r3, pc, #448	; (adr r3, 8006380 <__ieee754_pow+0x9e8>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f7fa f9cd 	bl	8000560 <__aeabi_dmul>
 80061c6:	a370      	add	r3, pc, #448	; (adr r3, 8006388 <__ieee754_pow+0x9f0>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	4680      	mov	r8, r0
 80061ce:	4689      	mov	r9, r1
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa f9c4 	bl	8000560 <__aeabi_dmul>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4640      	mov	r0, r8
 80061de:	4649      	mov	r1, r9
 80061e0:	f7fa f808 	bl	80001f4 <__adddf3>
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4630      	mov	r0, r6
 80061ee:	4639      	mov	r1, r7
 80061f0:	f7fa f800 	bl	80001f4 <__adddf3>
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	4680      	mov	r8, r0
 80061fa:	4689      	mov	r9, r1
 80061fc:	f7f9 fff8 	bl	80001f0 <__aeabi_dsub>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4620      	mov	r0, r4
 8006206:	4629      	mov	r1, r5
 8006208:	f7f9 fff2 	bl	80001f0 <__aeabi_dsub>
 800620c:	4642      	mov	r2, r8
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	464b      	mov	r3, r9
 8006214:	4640      	mov	r0, r8
 8006216:	4649      	mov	r1, r9
 8006218:	f7fa f9a2 	bl	8000560 <__aeabi_dmul>
 800621c:	a35c      	add	r3, pc, #368	; (adr r3, 8006390 <__ieee754_pow+0x9f8>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	4604      	mov	r4, r0
 8006224:	460d      	mov	r5, r1
 8006226:	f7fa f99b 	bl	8000560 <__aeabi_dmul>
 800622a:	a35b      	add	r3, pc, #364	; (adr r3, 8006398 <__ieee754_pow+0xa00>)
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f7f9 ffde 	bl	80001f0 <__aeabi_dsub>
 8006234:	4622      	mov	r2, r4
 8006236:	462b      	mov	r3, r5
 8006238:	f7fa f992 	bl	8000560 <__aeabi_dmul>
 800623c:	a358      	add	r3, pc, #352	; (adr r3, 80063a0 <__ieee754_pow+0xa08>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f7f9 ffd7 	bl	80001f4 <__adddf3>
 8006246:	4622      	mov	r2, r4
 8006248:	462b      	mov	r3, r5
 800624a:	f7fa f989 	bl	8000560 <__aeabi_dmul>
 800624e:	a356      	add	r3, pc, #344	; (adr r3, 80063a8 <__ieee754_pow+0xa10>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7f9 ffcc 	bl	80001f0 <__aeabi_dsub>
 8006258:	4622      	mov	r2, r4
 800625a:	462b      	mov	r3, r5
 800625c:	f7fa f980 	bl	8000560 <__aeabi_dmul>
 8006260:	a353      	add	r3, pc, #332	; (adr r3, 80063b0 <__ieee754_pow+0xa18>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f7f9 ffc5 	bl	80001f4 <__adddf3>
 800626a:	4622      	mov	r2, r4
 800626c:	462b      	mov	r3, r5
 800626e:	f7fa f977 	bl	8000560 <__aeabi_dmul>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7f9 ffb9 	bl	80001f0 <__aeabi_dsub>
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4640      	mov	r0, r8
 8006288:	4649      	mov	r1, r9
 800628a:	f7fa f969 	bl	8000560 <__aeabi_dmul>
 800628e:	2200      	movs	r2, #0
 8006290:	ec41 0b19 	vmov	d9, r0, r1
 8006294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006298:	4620      	mov	r0, r4
 800629a:	4629      	mov	r1, r5
 800629c:	f7f9 ffa8 	bl	80001f0 <__aeabi_dsub>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	ec51 0b19 	vmov	r0, r1, d9
 80062a8:	f7fa fa84 	bl	80007b4 <__aeabi_ddiv>
 80062ac:	4632      	mov	r2, r6
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	463b      	mov	r3, r7
 80062b4:	4640      	mov	r0, r8
 80062b6:	4649      	mov	r1, r9
 80062b8:	f7fa f952 	bl	8000560 <__aeabi_dmul>
 80062bc:	4632      	mov	r2, r6
 80062be:	463b      	mov	r3, r7
 80062c0:	f7f9 ff98 	bl	80001f4 <__adddf3>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4620      	mov	r0, r4
 80062ca:	4629      	mov	r1, r5
 80062cc:	f7f9 ff90 	bl	80001f0 <__aeabi_dsub>
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	f7f9 ff8c 	bl	80001f0 <__aeabi_dsub>
 80062d8:	460b      	mov	r3, r1
 80062da:	4602      	mov	r2, r0
 80062dc:	493a      	ldr	r1, [pc, #232]	; (80063c8 <__ieee754_pow+0xa30>)
 80062de:	2000      	movs	r0, #0
 80062e0:	f7f9 ff86 	bl	80001f0 <__aeabi_dsub>
 80062e4:	e9cd 0100 	strd	r0, r1, [sp]
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80062ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062f2:	da2f      	bge.n	8006354 <__ieee754_pow+0x9bc>
 80062f4:	4650      	mov	r0, sl
 80062f6:	ed9d 0b00 	vldr	d0, [sp]
 80062fa:	f000 f9cd 	bl	8006698 <scalbn>
 80062fe:	ec51 0b10 	vmov	r0, r1, d0
 8006302:	ec53 2b18 	vmov	r2, r3, d8
 8006306:	f7ff bbe0 	b.w	8005aca <__ieee754_pow+0x132>
 800630a:	4b30      	ldr	r3, [pc, #192]	; (80063cc <__ieee754_pow+0xa34>)
 800630c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006310:	429e      	cmp	r6, r3
 8006312:	f77f af0b 	ble.w	800612c <__ieee754_pow+0x794>
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <__ieee754_pow+0xa38>)
 8006318:	440b      	add	r3, r1
 800631a:	4303      	orrs	r3, r0
 800631c:	d00b      	beq.n	8006336 <__ieee754_pow+0x99e>
 800631e:	a326      	add	r3, pc, #152	; (adr r3, 80063b8 <__ieee754_pow+0xa20>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	ec51 0b18 	vmov	r0, r1, d8
 8006328:	f7fa f91a 	bl	8000560 <__aeabi_dmul>
 800632c:	a322      	add	r3, pc, #136	; (adr r3, 80063b8 <__ieee754_pow+0xa20>)
 800632e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006332:	f7ff bbca 	b.w	8005aca <__ieee754_pow+0x132>
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	f7f9 ff59 	bl	80001f0 <__aeabi_dsub>
 800633e:	4642      	mov	r2, r8
 8006340:	464b      	mov	r3, r9
 8006342:	f7fa fb93 	bl	8000a6c <__aeabi_dcmpge>
 8006346:	2800      	cmp	r0, #0
 8006348:	f43f aef0 	beq.w	800612c <__ieee754_pow+0x794>
 800634c:	e7e7      	b.n	800631e <__ieee754_pow+0x986>
 800634e:	f04f 0a00 	mov.w	sl, #0
 8006352:	e717      	b.n	8006184 <__ieee754_pow+0x7ec>
 8006354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006358:	4619      	mov	r1, r3
 800635a:	e7d2      	b.n	8006302 <__ieee754_pow+0x96a>
 800635c:	491a      	ldr	r1, [pc, #104]	; (80063c8 <__ieee754_pow+0xa30>)
 800635e:	2000      	movs	r0, #0
 8006360:	f7ff bb9e 	b.w	8005aa0 <__ieee754_pow+0x108>
 8006364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006368:	f7ff bb9a 	b.w	8005aa0 <__ieee754_pow+0x108>
 800636c:	9000      	str	r0, [sp, #0]
 800636e:	f7ff bb76 	b.w	8005a5e <__ieee754_pow+0xc6>
 8006372:	2100      	movs	r1, #0
 8006374:	f7ff bb60 	b.w	8005a38 <__ieee754_pow+0xa0>
 8006378:	00000000 	.word	0x00000000
 800637c:	3fe62e43 	.word	0x3fe62e43
 8006380:	fefa39ef 	.word	0xfefa39ef
 8006384:	3fe62e42 	.word	0x3fe62e42
 8006388:	0ca86c39 	.word	0x0ca86c39
 800638c:	be205c61 	.word	0xbe205c61
 8006390:	72bea4d0 	.word	0x72bea4d0
 8006394:	3e663769 	.word	0x3e663769
 8006398:	c5d26bf1 	.word	0xc5d26bf1
 800639c:	3ebbbd41 	.word	0x3ebbbd41
 80063a0:	af25de2c 	.word	0xaf25de2c
 80063a4:	3f11566a 	.word	0x3f11566a
 80063a8:	16bebd93 	.word	0x16bebd93
 80063ac:	3f66c16c 	.word	0x3f66c16c
 80063b0:	5555553e 	.word	0x5555553e
 80063b4:	3fc55555 	.word	0x3fc55555
 80063b8:	c2f8f359 	.word	0xc2f8f359
 80063bc:	01a56e1f 	.word	0x01a56e1f
 80063c0:	3fe00000 	.word	0x3fe00000
 80063c4:	000fffff 	.word	0x000fffff
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	4090cbff 	.word	0x4090cbff
 80063d0:	3f6f3400 	.word	0x3f6f3400
 80063d4:	652b82fe 	.word	0x652b82fe
 80063d8:	3c971547 	.word	0x3c971547

080063dc <__ieee754_sqrt>:
 80063dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e0:	ec55 4b10 	vmov	r4, r5, d0
 80063e4:	4e56      	ldr	r6, [pc, #344]	; (8006540 <__ieee754_sqrt+0x164>)
 80063e6:	43ae      	bics	r6, r5
 80063e8:	ee10 0a10 	vmov	r0, s0
 80063ec:	ee10 3a10 	vmov	r3, s0
 80063f0:	4629      	mov	r1, r5
 80063f2:	462a      	mov	r2, r5
 80063f4:	d110      	bne.n	8006418 <__ieee754_sqrt+0x3c>
 80063f6:	ee10 2a10 	vmov	r2, s0
 80063fa:	462b      	mov	r3, r5
 80063fc:	f7fa f8b0 	bl	8000560 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4620      	mov	r0, r4
 8006406:	4629      	mov	r1, r5
 8006408:	f7f9 fef4 	bl	80001f4 <__adddf3>
 800640c:	4604      	mov	r4, r0
 800640e:	460d      	mov	r5, r1
 8006410:	ec45 4b10 	vmov	d0, r4, r5
 8006414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006418:	2d00      	cmp	r5, #0
 800641a:	dc10      	bgt.n	800643e <__ieee754_sqrt+0x62>
 800641c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006420:	4330      	orrs	r0, r6
 8006422:	d0f5      	beq.n	8006410 <__ieee754_sqrt+0x34>
 8006424:	b15d      	cbz	r5, 800643e <__ieee754_sqrt+0x62>
 8006426:	ee10 2a10 	vmov	r2, s0
 800642a:	462b      	mov	r3, r5
 800642c:	ee10 0a10 	vmov	r0, s0
 8006430:	f7f9 fede 	bl	80001f0 <__aeabi_dsub>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	f7fa f9bc 	bl	80007b4 <__aeabi_ddiv>
 800643c:	e7e6      	b.n	800640c <__ieee754_sqrt+0x30>
 800643e:	1509      	asrs	r1, r1, #20
 8006440:	d076      	beq.n	8006530 <__ieee754_sqrt+0x154>
 8006442:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006446:	07ce      	lsls	r6, r1, #31
 8006448:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800644c:	bf5e      	ittt	pl
 800644e:	0fda      	lsrpl	r2, r3, #31
 8006450:	005b      	lslpl	r3, r3, #1
 8006452:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006456:	0fda      	lsrs	r2, r3, #31
 8006458:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800645c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006460:	2000      	movs	r0, #0
 8006462:	106d      	asrs	r5, r5, #1
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	f04f 0e16 	mov.w	lr, #22
 800646a:	4684      	mov	ip, r0
 800646c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006470:	eb0c 0401 	add.w	r4, ip, r1
 8006474:	4294      	cmp	r4, r2
 8006476:	bfde      	ittt	le
 8006478:	1b12      	suble	r2, r2, r4
 800647a:	eb04 0c01 	addle.w	ip, r4, r1
 800647e:	1840      	addle	r0, r0, r1
 8006480:	0052      	lsls	r2, r2, #1
 8006482:	f1be 0e01 	subs.w	lr, lr, #1
 8006486:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800648a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800648e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006492:	d1ed      	bne.n	8006470 <__ieee754_sqrt+0x94>
 8006494:	4671      	mov	r1, lr
 8006496:	2720      	movs	r7, #32
 8006498:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800649c:	4562      	cmp	r2, ip
 800649e:	eb04 060e 	add.w	r6, r4, lr
 80064a2:	dc02      	bgt.n	80064aa <__ieee754_sqrt+0xce>
 80064a4:	d113      	bne.n	80064ce <__ieee754_sqrt+0xf2>
 80064a6:	429e      	cmp	r6, r3
 80064a8:	d811      	bhi.n	80064ce <__ieee754_sqrt+0xf2>
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	eb06 0e04 	add.w	lr, r6, r4
 80064b0:	da43      	bge.n	800653a <__ieee754_sqrt+0x15e>
 80064b2:	f1be 0f00 	cmp.w	lr, #0
 80064b6:	db40      	blt.n	800653a <__ieee754_sqrt+0x15e>
 80064b8:	f10c 0801 	add.w	r8, ip, #1
 80064bc:	eba2 020c 	sub.w	r2, r2, ip
 80064c0:	429e      	cmp	r6, r3
 80064c2:	bf88      	it	hi
 80064c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80064c8:	1b9b      	subs	r3, r3, r6
 80064ca:	4421      	add	r1, r4
 80064cc:	46c4      	mov	ip, r8
 80064ce:	0052      	lsls	r2, r2, #1
 80064d0:	3f01      	subs	r7, #1
 80064d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80064d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80064da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064de:	d1dd      	bne.n	800649c <__ieee754_sqrt+0xc0>
 80064e0:	4313      	orrs	r3, r2
 80064e2:	d006      	beq.n	80064f2 <__ieee754_sqrt+0x116>
 80064e4:	1c4c      	adds	r4, r1, #1
 80064e6:	bf13      	iteet	ne
 80064e8:	3101      	addne	r1, #1
 80064ea:	3001      	addeq	r0, #1
 80064ec:	4639      	moveq	r1, r7
 80064ee:	f021 0101 	bicne.w	r1, r1, #1
 80064f2:	1043      	asrs	r3, r0, #1
 80064f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80064f8:	0849      	lsrs	r1, r1, #1
 80064fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80064fe:	07c2      	lsls	r2, r0, #31
 8006500:	bf48      	it	mi
 8006502:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006506:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800650a:	460c      	mov	r4, r1
 800650c:	463d      	mov	r5, r7
 800650e:	e77f      	b.n	8006410 <__ieee754_sqrt+0x34>
 8006510:	0ada      	lsrs	r2, r3, #11
 8006512:	3815      	subs	r0, #21
 8006514:	055b      	lsls	r3, r3, #21
 8006516:	2a00      	cmp	r2, #0
 8006518:	d0fa      	beq.n	8006510 <__ieee754_sqrt+0x134>
 800651a:	02d7      	lsls	r7, r2, #11
 800651c:	d50a      	bpl.n	8006534 <__ieee754_sqrt+0x158>
 800651e:	f1c1 0420 	rsb	r4, r1, #32
 8006522:	fa23 f404 	lsr.w	r4, r3, r4
 8006526:	1e4d      	subs	r5, r1, #1
 8006528:	408b      	lsls	r3, r1
 800652a:	4322      	orrs	r2, r4
 800652c:	1b41      	subs	r1, r0, r5
 800652e:	e788      	b.n	8006442 <__ieee754_sqrt+0x66>
 8006530:	4608      	mov	r0, r1
 8006532:	e7f0      	b.n	8006516 <__ieee754_sqrt+0x13a>
 8006534:	0052      	lsls	r2, r2, #1
 8006536:	3101      	adds	r1, #1
 8006538:	e7ef      	b.n	800651a <__ieee754_sqrt+0x13e>
 800653a:	46e0      	mov	r8, ip
 800653c:	e7be      	b.n	80064bc <__ieee754_sqrt+0xe0>
 800653e:	bf00      	nop
 8006540:	7ff00000 	.word	0x7ff00000

08006544 <fabs>:
 8006544:	ec51 0b10 	vmov	r0, r1, d0
 8006548:	ee10 2a10 	vmov	r2, s0
 800654c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006550:	ec43 2b10 	vmov	d0, r2, r3
 8006554:	4770      	bx	lr

08006556 <finite>:
 8006556:	b082      	sub	sp, #8
 8006558:	ed8d 0b00 	vstr	d0, [sp]
 800655c:	9801      	ldr	r0, [sp, #4]
 800655e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006562:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006566:	0fc0      	lsrs	r0, r0, #31
 8006568:	b002      	add	sp, #8
 800656a:	4770      	bx	lr
 800656c:	0000      	movs	r0, r0
	...

08006570 <nan>:
 8006570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006578 <nan+0x8>
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	00000000 	.word	0x00000000
 800657c:	7ff80000 	.word	0x7ff80000

08006580 <rint>:
 8006580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006582:	ec51 0b10 	vmov	r0, r1, d0
 8006586:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800658a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800658e:	2e13      	cmp	r6, #19
 8006590:	ee10 4a10 	vmov	r4, s0
 8006594:	460b      	mov	r3, r1
 8006596:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800659a:	dc58      	bgt.n	800664e <rint+0xce>
 800659c:	2e00      	cmp	r6, #0
 800659e:	da2b      	bge.n	80065f8 <rint+0x78>
 80065a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80065a4:	4302      	orrs	r2, r0
 80065a6:	d023      	beq.n	80065f0 <rint+0x70>
 80065a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80065ac:	4302      	orrs	r2, r0
 80065ae:	4254      	negs	r4, r2
 80065b0:	4314      	orrs	r4, r2
 80065b2:	0c4b      	lsrs	r3, r1, #17
 80065b4:	0b24      	lsrs	r4, r4, #12
 80065b6:	045b      	lsls	r3, r3, #17
 80065b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80065bc:	ea44 0103 	orr.w	r1, r4, r3
 80065c0:	4b32      	ldr	r3, [pc, #200]	; (800668c <rint+0x10c>)
 80065c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80065c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4630      	mov	r0, r6
 80065d0:	4639      	mov	r1, r7
 80065d2:	f7f9 fe0f 	bl	80001f4 <__adddf3>
 80065d6:	e9cd 0100 	strd	r0, r1, [sp]
 80065da:	463b      	mov	r3, r7
 80065dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e0:	4632      	mov	r2, r6
 80065e2:	f7f9 fe05 	bl	80001f0 <__aeabi_dsub>
 80065e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80065ee:	4639      	mov	r1, r7
 80065f0:	ec41 0b10 	vmov	d0, r0, r1
 80065f4:	b003      	add	sp, #12
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f8:	4a25      	ldr	r2, [pc, #148]	; (8006690 <rint+0x110>)
 80065fa:	4132      	asrs	r2, r6
 80065fc:	ea01 0702 	and.w	r7, r1, r2
 8006600:	4307      	orrs	r7, r0
 8006602:	d0f5      	beq.n	80065f0 <rint+0x70>
 8006604:	0851      	lsrs	r1, r2, #1
 8006606:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800660a:	4314      	orrs	r4, r2
 800660c:	d00c      	beq.n	8006628 <rint+0xa8>
 800660e:	ea23 0201 	bic.w	r2, r3, r1
 8006612:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006616:	2e13      	cmp	r6, #19
 8006618:	fa43 f606 	asr.w	r6, r3, r6
 800661c:	bf0c      	ite	eq
 800661e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006622:	2400      	movne	r4, #0
 8006624:	ea42 0306 	orr.w	r3, r2, r6
 8006628:	4918      	ldr	r1, [pc, #96]	; (800668c <rint+0x10c>)
 800662a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800662e:	4622      	mov	r2, r4
 8006630:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f7f9 fddc 	bl	80001f4 <__adddf3>
 800663c:	e9cd 0100 	strd	r0, r1, [sp]
 8006640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006644:	4622      	mov	r2, r4
 8006646:	462b      	mov	r3, r5
 8006648:	f7f9 fdd2 	bl	80001f0 <__aeabi_dsub>
 800664c:	e7d0      	b.n	80065f0 <rint+0x70>
 800664e:	2e33      	cmp	r6, #51	; 0x33
 8006650:	dd07      	ble.n	8006662 <rint+0xe2>
 8006652:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006656:	d1cb      	bne.n	80065f0 <rint+0x70>
 8006658:	ee10 2a10 	vmov	r2, s0
 800665c:	f7f9 fdca 	bl	80001f4 <__adddf3>
 8006660:	e7c6      	b.n	80065f0 <rint+0x70>
 8006662:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006666:	f04f 36ff 	mov.w	r6, #4294967295
 800666a:	40d6      	lsrs	r6, r2
 800666c:	4230      	tst	r0, r6
 800666e:	d0bf      	beq.n	80065f0 <rint+0x70>
 8006670:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006674:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006678:	bf1f      	itttt	ne
 800667a:	ea24 0101 	bicne.w	r1, r4, r1
 800667e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006682:	fa44 f202 	asrne.w	r2, r4, r2
 8006686:	ea41 0402 	orrne.w	r4, r1, r2
 800668a:	e7cd      	b.n	8006628 <rint+0xa8>
 800668c:	080069e8 	.word	0x080069e8
 8006690:	000fffff 	.word	0x000fffff
 8006694:	00000000 	.word	0x00000000

08006698 <scalbn>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	ec55 4b10 	vmov	r4, r5, d0
 800669e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80066a2:	4606      	mov	r6, r0
 80066a4:	462b      	mov	r3, r5
 80066a6:	b99a      	cbnz	r2, 80066d0 <scalbn+0x38>
 80066a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066ac:	4323      	orrs	r3, r4
 80066ae:	d036      	beq.n	800671e <scalbn+0x86>
 80066b0:	4b39      	ldr	r3, [pc, #228]	; (8006798 <scalbn+0x100>)
 80066b2:	4629      	mov	r1, r5
 80066b4:	ee10 0a10 	vmov	r0, s0
 80066b8:	2200      	movs	r2, #0
 80066ba:	f7f9 ff51 	bl	8000560 <__aeabi_dmul>
 80066be:	4b37      	ldr	r3, [pc, #220]	; (800679c <scalbn+0x104>)
 80066c0:	429e      	cmp	r6, r3
 80066c2:	4604      	mov	r4, r0
 80066c4:	460d      	mov	r5, r1
 80066c6:	da10      	bge.n	80066ea <scalbn+0x52>
 80066c8:	a32b      	add	r3, pc, #172	; (adr r3, 8006778 <scalbn+0xe0>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	e03a      	b.n	8006746 <scalbn+0xae>
 80066d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80066d4:	428a      	cmp	r2, r1
 80066d6:	d10c      	bne.n	80066f2 <scalbn+0x5a>
 80066d8:	ee10 2a10 	vmov	r2, s0
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 fd88 	bl	80001f4 <__adddf3>
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	e019      	b.n	800671e <scalbn+0x86>
 80066ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066ee:	460b      	mov	r3, r1
 80066f0:	3a36      	subs	r2, #54	; 0x36
 80066f2:	4432      	add	r2, r6
 80066f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066f8:	428a      	cmp	r2, r1
 80066fa:	dd08      	ble.n	800670e <scalbn+0x76>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	a120      	add	r1, pc, #128	; (adr r1, 8006780 <scalbn+0xe8>)
 8006700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006704:	da1c      	bge.n	8006740 <scalbn+0xa8>
 8006706:	a120      	add	r1, pc, #128	; (adr r1, 8006788 <scalbn+0xf0>)
 8006708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800670c:	e018      	b.n	8006740 <scalbn+0xa8>
 800670e:	2a00      	cmp	r2, #0
 8006710:	dd08      	ble.n	8006724 <scalbn+0x8c>
 8006712:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006716:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800671a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800671e:	ec45 4b10 	vmov	d0, r4, r5
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006728:	da19      	bge.n	800675e <scalbn+0xc6>
 800672a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800672e:	429e      	cmp	r6, r3
 8006730:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006734:	dd0a      	ble.n	800674c <scalbn+0xb4>
 8006736:	a112      	add	r1, pc, #72	; (adr r1, 8006780 <scalbn+0xe8>)
 8006738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e2      	bne.n	8006706 <scalbn+0x6e>
 8006740:	a30f      	add	r3, pc, #60	; (adr r3, 8006780 <scalbn+0xe8>)
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f7f9 ff0b 	bl	8000560 <__aeabi_dmul>
 800674a:	e7cb      	b.n	80066e4 <scalbn+0x4c>
 800674c:	a10a      	add	r1, pc, #40	; (adr r1, 8006778 <scalbn+0xe0>)
 800674e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0b8      	beq.n	80066c8 <scalbn+0x30>
 8006756:	a10e      	add	r1, pc, #56	; (adr r1, 8006790 <scalbn+0xf8>)
 8006758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675c:	e7b4      	b.n	80066c8 <scalbn+0x30>
 800675e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006762:	3236      	adds	r2, #54	; 0x36
 8006764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006768:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800676c:	4620      	mov	r0, r4
 800676e:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <scalbn+0x108>)
 8006770:	2200      	movs	r2, #0
 8006772:	e7e8      	b.n	8006746 <scalbn+0xae>
 8006774:	f3af 8000 	nop.w
 8006778:	c2f8f359 	.word	0xc2f8f359
 800677c:	01a56e1f 	.word	0x01a56e1f
 8006780:	8800759c 	.word	0x8800759c
 8006784:	7e37e43c 	.word	0x7e37e43c
 8006788:	8800759c 	.word	0x8800759c
 800678c:	fe37e43c 	.word	0xfe37e43c
 8006790:	c2f8f359 	.word	0xc2f8f359
 8006794:	81a56e1f 	.word	0x81a56e1f
 8006798:	43500000 	.word	0x43500000
 800679c:	ffff3cb0 	.word	0xffff3cb0
 80067a0:	3c900000 	.word	0x3c900000

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
